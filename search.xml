<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hi hexo2</title>
    <url>/2022/03/01/Hi-hexo2/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ac46c2dd3e92dc31fb6aa3d49f23a4387323453dad3c1ebfc3d18f7dc7d18ba1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>testDate copy 2</title>
    <url>/2022/03/25/TEST/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b32b4d0e0b42078ee028601efa1c81a1d64148c474367864ffa4878945185ca7">777c54ddc094c9ffb29322e243d0ffbf08414c8338c54302b780fbd695c2dbd0ad5965b90d8f0d53c5923290112648b50206ddf1b75f099c8b96b1277bb9f6c9e156239718b5b2b584e61b4c5f17dddc99d997472dc3f396264144acb278f30d2f01f485df2e9fb253cd6c9020b121612e71f51d7da74347fd543136ac519fdddd33f255d9c0d4ffb172e58438b1a111628a45eb62465a5a7c095d76daba2c1b75dc41600452b18bf18b04bd8c45393246fea3b73f8dd623ca126f55cf980d467a39106061958de474c187cb8327149992c448d565b1ac456e82469247607b53dd31138fb809c7c841d6b5c4dc5233ae35ca2839e1db3610e71192c613c438772cdf413f7ff2f3fe2b8eaeb78fc42b17a014311791094a0c2ecff722771bb47be0bd67c6328cdaa6ede93be5d52277b61c82f1ea4f53710a392dbdc566d6572f4402158d9fe29126c45bafb1bb1fe8f017575e0e08b1c0eff9a7dea7624e475233c877bd0f801c379f97eb9b30affdf8d048ac3e003f0b6151b21015908ef54b847266ab7f335f8a727a93f3c6f0bd5503d1b535a938853fce6e3f9baa6f786fad5b3285909c590b30f71b7981e19c7dc895552da985fedeb77bec6e5d2995524e0023d3eea36badf38c3c03240818dd2f49add3074aa23512d1bb613c2c11aa8c04c29d4a41a8f78f6f9760e15f19bfacb8da5017aea4c34fb4428a4bf77521b8632315dbaeaecdd0c5c5c38aba792dbd75b350e44a9d250b2f2e6278b696702f861554a02e0df4a2ca55817cc49883a27d416bd0175f12cfd231aa52c4e3729bc8924cb8a9d429c4c3db4eac72a5ab4931dc64f83bb73875e9008773e39b1211cad3e0c33bc08b12f219b3618f670d052b8765ec2a4d495a3dbbad901a1979c2b45e55f8015c888b0d680c57031a1ac5ab52d1b840f4837ab3a2663e6f43d7057a72ee6e432d3db9356670515bb57ccce0f778964b7a922fe37fd7745db0a610c224a334b5edb04677e6f70637bef1e5eaef3b0fe389ffa1b2a8f527ef30662c5286af44c4e672e532eff755bbb2795cdcfda4e1466a0db7c2d066c46b9cd14036cf02740db645964b040dbef62cab82b7ffa18bff9001879bd55ab4114de7cfef430500c3e87470f98cc8826cfbdba5c165103f87c5f0a224eebaaa972fe7972415a7e4c4b793bf93d12b36758e7d10598147dd1d5a278f10ac33bbe5b1244a00df0123d8247718fef8d17b6a262aa3369a234102ddb56e20e362796d09a34fa0c79d5d706c968cbb91d5645db54ff13b580a6f33791bc44f335040e4454714a975e56085873514531030cb2c865b9b33812a9ec2d1d5970d527ea135f94fd3788ed9d75f2a0f9e4efa631032ad261bb579b33fc3c833467aa39513f3445651ea149ef7eef5dc56e70119a200ab86b605b2976e89a5795beee00c7ce8667a5a02e3184f43cdcca1a4e486c116e4ab</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Pyhton, JS</category>
        <category>java</category>
        <category>C</category>
        <category>Java</category>
        <category>Servlet</category>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>TEST</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/03/21/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
$ hexo new post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>态度</title>
    <url>/2022/04/19/%E6%80%81%E5%BA%A6/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3eac061e2b71b1c491700e4b0208757a31f7eeee291d4400a7419ce708b8790f">59067b0f0b35676af0c14e3470fcb0880e01fb96ae32b80a3ba8bf8ac7f9494c1cc155c6208b7b3b730cb9b9d3f29d867648d212489395613dcc3a906dee32781f35a3a6659eb8bddb4c1bcbf8aefaf983b05c54bd44b44a88b24b4085f80fd43f744171952d0851d81e1370806129f3241186b5cc3807d8d29b44f9108045357cd9c078f6ae04ad7355ab6023eb4a335eb523d4e60823f49e40f687cba3bf0e280975e487ece42eb1bdd1019beb8b7a22b1635eae1fad094920bd83c4465c79d5d201098817c86b333999fb7cadfde3ade1d5e4b6c14896a2fbaf826daa260fd12c2c9c47bd3aa887e8b19901167a86763dbbeabaa5bed86843da37a3393d6af76d93dc65ec8b09af13a18c87e09f7115ae00e3f01ab3aab4daa98e89be6cb2d5192d865485c36afde6ede58123a317ab01bc43d5e35f10524ec3ec6055083358938c96c4234bba5b516ea598c8e735adcdb8c9e52ca4c5aacd341a88c03e1c19c3c13b8839921b4c7280c146fc9a89d61c764b233d879b05a31ab08ebddb7655dd20412b9a31dee208ec6f501616b033da5231ac75a83ea6ec03e732e7047dba7f9839471099855cdb40c0a6ca8ea1eb3604c08f097641eaa3e81d69d770f9c38d90fcaae5a6637f9eaab5bf0cd469475678acd875d80d54de60a396079a7515b85ff0aae5883797d1bd985578f76ad3a4802cdff33df2aba32f35f42b7133a6a217c58c8a760294cf9c6ef4fdd6b4a5b87f2686496c4fc3fae5a94eb14eaad692f39af89a674c43f6bb00cf3c93364808c3b4c95bee4a1222844a3ceca67849510391d7bb7c1b90010de67069c93280354325f593683806ff6c518f20fcb2ff89e73500a6a12412be7d6bdaae121481edc7f6e93f7b13f7cc694009c3e1b8040f63e7042fc11e7ee0851180ef92eb4b44d404bf65d5bb6c11bbbbb712ab3907bcf5aad076195396dc216f665d23774ff685ff80dec7f0a4da76d9820471ef808f600dda8a4c26893026a6be43841b8c62d6e448e63a72762bcb7bc1c829bce099444d53b39540d890fdf8e44565daeb7c4a87538c718df4e76f06b28bc943eb54daee7e15a60b529139af00a0dbebdc65a452c9b511efd2fd3b24036b40c56fb29fa640174a3ba1f11eb080e3f0499b1cc27dfb430bc319cdc8f6f3ae245817280097a7dd6cf83c1249932a7d60436809a28e227ac2a77417b0606f635ffc7dd7dd0263abea45c5d6a41baf5315d9543f71679dc7fb2e7e918dc563eed4415775c4daec943381777f513b82429a283188c695a55669bda2ca64af4ede000385056b016e7335c6a4674b325b63e4b684575cfefa12d38109abafae86a8b0287657625b1a3fba265dc35b1d0f49efa78249d6ea9066c741d07425dd0ec9a6b7edfcdcf3b86088b9ba1cf179382c00e235796e293c57ae0683b279717411f9966d5fdf91bb13cb4822e303d650e5b15f92444602ba104d0d585ce9c340fd74be4031d466629eaf53ae64b12606cbf91d37dddee08e2434a1e1d63e15022a39468104333632c5cdb8ea2911a82d6a60f3d24106a9c53361d5265321300f4b6a200870a29faaacc0bba8c45afea3a94dc1845067210eb60cbfc38bc7ae533e59adb0920595fbe6e137b93d8cc11bee3bf0e0af6e1d5e5126656651feaa69955a9bdc0485a1297ac5d00c77fc4c0ec32e5d8d586ce5e999200e78502b45eb7aae030f850b8a581b1f2b75d7272367ccd7eab030f6f4ea40fc977f8566a2eafc9168406a8a0e8a2503cad8ac9a2c8e8100b4f2ae80f83af06b3a59e44fb39eec5a5eab282fc4444443d99e53d4fbae38f2da9999fee5ba5e0f0ab70e7fd9cc4a250ac88f0c2bf0dcc29f780a9860c70210de707416ef2f2ae225456912c2eab41a4251a4ccba96de497675efdaa6505c7d8609c1136b017f86e67d1a9a099e4d8a4f9f5bb70227d2f1bba4ff765f748342d92ef081c38c3cc1ee21b9d5a026ed2ba7bc42b3f9a494fefac73f604549af4c3f26dfc46ca58db0e822df34bfe4cf484c68e9ea9ae180a69f34a92a73364c51891b33f51f14c0d82da6db439b9e6232e46df4de6856498fab334b505bf93aad0d05acd0f37b3f6823af85d4807efaf8b17280222cc449e6cee8b33833ad69f23e2c72434248d81e26c9fb648e893aecc26e4c1c05705b0dc90cb9905bd25ebd79c34ac7b3ba8f1d957d243a01c82076c87e26fe69e9f4493e9e817f23b9e176ea6961d596b1199501f2a8d4d6153ea9d876c7368f69cfecf27bd2628cbd90f962a0edfe260b4ffcf0a82d51b96950caf4f92cebdb67861e5c1dc5fb416efb6b981d7dc05e19de81dfc627b18c86bfbf0e8c1ffdd976af1e30ad9d9d5dd70fa176e7212b35dbc8f1027b93ede3a2e4c384df33c9679a0bd071994eedcb0ecc74f283cc88c938b279d2c0626089f9efb5277efb74cfca7d398bae910479f3ac4e212352f5e4b89ba1c6dbd84489a0a2b0ae03afa7a01f4df9f23e7a51e8e06b45a97ee6f13b51507cc692d93bbfe8bc1b266d5e52a1dfb5b197cada207bab0db917b3ed714df99af36afe75e57bb6e1e5ab3a512edcb9d5ff7669d546940a83328948a9e2d60e6b343fc01648fc071e1972ad94b5b8db6e60d2e388b47d13744d3b0db4fc78fb2b14f380e200f393717bf3cdd55898fe52b3f1a64d931abfbf7d16e5b4c1ea028a69ffe329150658a762506577331dd2cc1eb98a2856e7309eccb327509bf632c31b5eba1f7efa027bba12537a9ee57a695623372e98a7aec2bcd029b08d35658029d087b93d3531b8285095ec297e7ffac75b0689a10c6ba750d2465d150db345b0a0be286b834208090d80cb17d918f3a34f31e37a930a8682cf471bedbc550c92b83a17705a9823f3c0f6f1977a9b4ee8137e8358a262eba018efc7e8c82f8db30a77ef6f62b4044a2426d7b52d25faacefe60b938999c6fbac8b318898ceac66a235d32f20ec47b3362eb4980c76537f3e5f4f612ddac1712cd0da5a56420bcdf77b28df12e95cc11be5819e402f1e23576a48e4e20d3f487734bfb2896b6329536688fb73afc5b13dfeae03d056c5075cb4089dd9026457803c3d956f96473c29309c0d6fde8c75552b0b9dfc17f9c6e4bc69b0eeecb6a2857a415bf7d75a2bc8c4e27ce148d666c921017cc28c8e0fb1d4653364d8b40d15ec2f7987347a0287155dc004f76989ff835fb6f667f0b15432c483f7716f9521748eba45d29c0f30928720c1ecbfbd2aa2d85ac0e21a939c2178cfa2f08a635710bd3ad643aaf76d1f5efaf788f92ac1e07388392f91437afb405f8ef91155f0b8825cd254bb1f92126bb730578c90717bf1228e61402eb4511099add5f80a349b5352bff2744bce9d4e90b4a9d7087ce153230f96c8eeb00eb382bb97012c271fdebdc65c2bff219cedaad5aec0c748d6cc0f5316305454ef8c12dafbada3f8748ed68630f299c48c6f30e5b0f4dfeb0a6442a8a792853cd55c09f99f4afe2ba61403dc7b89a3b08d69c377fc6f3ddfdd7fb1f3bcfa9564dbada7781030e1bd7c552a6d8e32a3540c5db59a3cf39473bf823dc6a14753f2ca9e85ecd8f6c062dc3c169cd4f6c536e67e1b944a97676014b5e64c0801832bdc38663a17b308b4db66a65977f54ec536fc7a203845e310492be57efa71db80746bbfc5d21de57af33fb307edcda784676131e4a6a286cb6db3f962000e365227cd5ee83ece62ecaf42e3f1c675002450adf3dfa358785c16592c34a8d18b6278d1e1e6b3ec6b4279c524a92e26c24fc18afe7058cfa9884ce8e722f3f0547bf76ebcd158448ad645cbb3a4c99e3b12128a1a90b4d391f64935510ee6fbd2ae8e1ee38bf8246a0455c54813f95c69f2f93500a0c8531b5d64345e6949d0fca7c0864bee3e7c07d2c9e9ed3c0eee5513636ba9113d3694fc39ba189301f0535c8d4d1910f887eb6aabe1f7ea2f59c3ec9af65106d2938ee89ed79734f8bce90a6a122d7f8311c427071e847495294063817026c902bc508a423e27f41d95e521e64e4c2bf88b14155a015334af8d205a48dea5a32614f5062790187e0c9ee692667e68ff534347959c2325b2df3f062792d3d491d1c7f1957df220cf4f66e49a9e385406f523d3fdbf30d6e323bb48742696579512b86e28eaf21ee083ba77f5c3d0c9908b7946d7d85d9fd75b7a1c9d56811e79e365e42809e76f0fb2f285a61d4c822edcda9e1554c5f47e5d7889c0d7279aa2d8e19b06b6151696aa96f65a1c09bb8e5aaf48c2c29e05b0a1c709adb79530c929619c94d733b8dbbd5ea309dd0640278b04dde28a298cda3d03ff7402a9c5a5f7e7db684ba01fb0fbc864f30b255026e35da6f34fb132e8b1a5c5bed0955fa91d6a880d57865b66a9d0e4c860b27a5c37ab81e5ae555febae5d000314e2c3796ac288ec0a6810e933782eadc02381c49bfc9ce3825fadbc08b1b1fdd9cbf5bae3dc2de5cd79ef0f1af1be1cede32cd0ac9dda306709aedd39baec12c0766470653a02b6c0f7264250ad43848de602c70d9e88d0cf34b2c96fdd7f9d0911be0c99ba5fed083e0c0124be17da2915509fdf1bc217d8a4850a0bc0c7aa2737cb150fa332d7bf91d2ccdcf3d52f298d259732694a005401602e14d235e9120fc28132690fa7e2f2df81d8ce80990d9f718623e29f50a8923367249b0e4257ee33cdececd5b101b837163f467c0a43fd67d55fc1a977f7a80324a6bb8eb679c05c0404b16a0d51f4380a17c456cefac4cb5f4d9727a96ebe19984a56b09cfb7aba7a4b7a08fc8d6995f1969f933c8dd775259f85653e5f0cb2debb69820affcb39dbad5879ac49cc0c4541b42136e04e0bb926821e081f170635ecc0518b55bee538799e24a44aa814de4bf02aebad16417015b9c6226587ddc15276222252158a56a7c274831e7298e00b0a40a23876a1d933b28017ab6b46b0068ceb6655ff87999727f57c437f33158b410259c1095812c63faf643a9f05fdca2f735c12ca124c7feba0350c5449d6cc2c34d4fedd4461448f0831d1f61b9a8508cd7a57d56881005991937802af3de62b66b104643a2d38ef6cf3b449e77381b4b8de61de3c8a3c98999a03150900bbeda4b1090062575d9e837c5537e12b025d7aec976a0e5d752058aa10950ee497f858bcf04b9ffffa8669a6c45d07470b1191ef13403107cd9889402e2083476da2fa1458cfb77639763ac0b5ffe0293d2d30eb502bfffed082269bdc7571525e3bc2313c081b96ba849975fa97715e561c87373fe403b9c947c56a95f146e91af7b391d0a82201500ed17c1f05edc164674b69ca35a48361d4ea005b00acd4e2c4da1cd92ef7ade98e60d158d2b37d95466b2986384630f6b630d6c6e207027169cb3a76b439004dbac07cdfcf1147ee8a8f2ee73c014e30b71c6928fe07f830e6a7bf79ea9ac33ed7df43710fcad2761987009e35967bbce7bbea12298af3fe65227881cf71e185ed73a7a7a93c1654e0362919ade5a72beef6cd18b429d0522e22756c8e170779a9395ed00a2fdb45a35b7794fee43106ff2b9608246d2fecbaa8ddf2798d702f47f0a59cdf36dcdd1aae0f6db34bbc820cc56d1d2884240f45c1a49d0a368c2ea2dfe536a79805b13b53a735db87ce1076a2d9f92d586eb160508003b03a27e3ef9a22bc8b85036c24d88e7383d466b26b3545bf550daca4651e265e6692236908a176b38a06ce999c8b69f565743caeb7ce36070208856939cc2182639bf6780369a27c27dffee18e9b8d7eea4e371878b90b61c5dca544eca96a5404ebab8de6cf9aa494d038537910ea707d5919288331ef11a6f83df38234fba1ef78d5fd10bd05b2ecf7a6d70a9653d3689788234402cbf823123eac48c4de57d4167306f5ad21d58d725779fcb468f01c25802f36ca4f3a96a5c04ca5d8ccc7975996142d1cd40a421f6387b3c2cd5d5cee375603f22877f0bb0f294dc59d4f99b15cba82d5239e3d5c24f65f79f9f83a2a7d786a936af01dbb9484ad85161442ee1f6fdd86e35f6e364438f6df37f793e403e0dcb4aefec25bb2ef3e07e388db72290345034888b11060b8d9f8154346e146f5b13042a0382f393c0e17f448db5a9d5e416eec8c1518eb314f04380f75b9a4f00ebcdf68ebca09c20b9f2badb8142e64b844a2603fcd0f89e5739dd4c7c78ee4f32cea011581bd5afdf87391b591e19743365e9a2e14bce4bf59e68eca60641652553f3af03d053b117e532f144e88eab3bc91b9368c3c31baae19cb1e1fe2c54aaf968fddd2921c03bc7947a6a0a7762245c8995c14e5604fdbed0e9a127627630ef5b1499721e0c4834e8b6b103a7b481d72d9a37f6086baa2fb4c46213ea55bb9c3a70c4bb82e5415da03221cbf5dc54dbec4456eac607d3fa208406558b71a21b9e8a4354436cc573cb9ad4b9da047c505dfc6fb6ce62a5851a465b559a4aeffc777c74acddb63f538f037a2d1e99584cc6a890386505d72a390272e2bece981d0c7aa13f3b3ae02e97e4a6f4fee5d028f3e3d86b0f1175cfd416eb26fa3a3eb8e47061228d7eacb328ddb1b813d957ab2fba2e5997bcfd9ecf40ab6b7f629f86882fe30776791e3a36b82bf711350772c20c26772ba8810ca68d0ebea1505ed9fd3800c9a6b51e8e567615a90ac9d6ccb96e1493ac01ba58081e9f6541aab14fe41c63b8f9769c7d962d12915a223e2d460e88f172383afc5852ddcebe450c85690546181aebc1355f16822427368017310269d60aef6100cb8d7a6b7a22aefbdd32a0c166d8bff58ed8d4b5273d3f52bb1c7dcbf7be3685c583638374a8cbae32025a8cf4e4d54b363a50b6d2923d1bf0e6c764585a405b4775ff1564f174fbb0b297cba24cf7043b52f17805fd808dbaa91f036efa5b343e73e28a8cf6df5ab26b4cfb1460fcf6ed0990491a2615b23e4b8c5cfd6a5079f0e3f2246a1f2370f6de593e11a4afc6820a6dbe33b13aaf30f24aaaa932d5e5979d821e4aa9701312f3ad708595a05bf681e64287a7a5c405f607da89d45ee270b806da5da0020ec4528e9bc254d4ed44ba82887c9a6a41268993e4d792025ad1fcecb6b1f46a4ef72f35439ceefbd09dc60a9db4d4308d0baa489de67391816bf0f883f3f5dac24d0e6fb1daff848fe4c269c9342f1843477fb5c57fc848db4f24d093231f330da2e56bdb81b0ca0b0bc4f7a63df0425451baab47a00af146dd3a135f0e413a9772a7d3a6714eeb9dea04d574d39c65afb156a1c48aaf5570e8184136c97108cb8d822affe11e3a6c1f51177524ed43a32f83626d6de571a21531f46e4e5c20b014bf6a5282137f019371bf9e056328cab53acaf5b246db05f7743eda31340679eb69a2ffc6f108438c611a93ae6e3bb48a8975634673d2d63c5578e39db92cb303eefdbd1fc83ae155f66f246107c904049a891a1b18f78f21bc6aedb6d40d9d4f9a8588f35995fc50b3b5d8c860a32f9989163883beb664162d23e4d0cc3f3363831cb901fc40f4b7890f8222bb7461d462d7663c895bacc3c4c63a7d5bdaabd7947ad9a3dc4540c909f6b2d8784ff76d583032cdb52d182d6aca768ed5d749f88345cd719df173da3cdddbf3c884376e983f42a746a32c27d7f1764f549852b574153bbc12e33c5ca5dfb89dfb036fb69c6cc3880bb5635442ef5dcbd9356387a38b97c4ea254953efe12197817239c7706c73682808659439cacf5877571f9e7e98cdbe6649f8c7fbeb7c179bec6d2669451a70e8e8846b7143e10da16a0516628d9cd1709ad53d8f051f27de5b456686a759767c9bfe12f9bf4f6bcaae18b009e943831c3500e1b8b6522c8ec8234575c963cfca18660a67373d533214c65e3406ce1389efe2284cae0a9194562418422c538cbe373b9abe5df0cde14b1fd273750151409c253c97d92e87af45756d6853b09a241c88b5e6451f4c817505f9f8bb5c14356e5945a534ecc543588cb95655d344ff3ebb79857c5d08e19fbcd7848452669ad370eab3aae2a94df865e60d87724be5d32fae4bf2aeecc96a4efc6099854be0bfc9c4c82fd400824e57fca6696cc40b6015c2581d71e7e3a924606cc2f0ceb2528410fd6c353c6f3446af71c45b26c074d442f70862404eca9adf297c08f0d43e03a30d90f8b48093db28c6bb8115b8386e164c3100c1e5a0509e42f4516e2910e46807d32a7eb2428176dc5493efca50eb4a53ca94ffa12f8cd3d1cdf68aa5c91312a01bb8ccf80d6c038062be1c22e073641962e2ca329a119824d88ceffc0ad56aad18804fbf65e26dd7c76c8a09436de4c400f748c48bd1ab74d2ed4739be5d5e8e3d681d85fa1a9bc546960f756eaf509207247c4761e7ca40bb326502983ec08b4ca894c826c5d5897934c6a78c2f936464564863ee556785f2c7eabe69328d7f4869eaa9d2e98ffbd79fc5cccec282a173045093e11ed06eb8fa00691ad20f0d4a09502abe0a870609b13d9e43b2b0d53559bcf44aa7ee5811740d1d24f8ad13085a1a6b583495a6f62e0c943656bc6ec34465f344d02ab84e6f1c5bfa25f157f30e5b95fc407d018b09c50d3e64cf7178023aa003e35996e64d54895dc0a69ffd8e60e53a0cf60f5187ab2f38f55549f809a482c5e6566c7cd93f2fc166b9ccaa1c9c66c7a8495b5d8146491a47d7c802b72606c743617ecf4c01e446b00a2bdd1342ea28d90c8d98204c0a7fcb3c206d7ec3a20437c449320febb4f4c9a2f6798a12f0e5e4562e64439ebffc8ee64e6341acff34ae7ee5c5e3282a4059a800cd5575bbb73398920d6c1c92da0d81dfe16e4afa3be1139d5102e1592d25954219668dbcc5867033fde30324e94699519f602daa7c04b8e5a8820f9f9e49d5b49f2494f7164a60dfafd371daf705703ff3b5d3b444e222302a13b27e68ed55764fc8f342207a6fb64e2f147d84ebe5e1637714fe9db9ae279bbeede2894982205a793dd89dba242437744899f620b8b585c4b4c414f111e74b567bd8864109675cdfd873708d65ed1b893b6bf5a7b92ae9c484a76e7c62c7ceb2b28f535f35db2afb2e191b471c273cfde6cf3022a4f400cc44927e961c01cd40de0ce190e05055a896f8214aa7fd18a1f9ce27011a6107503465cf8d8c3e57561ac8423a48ccd301dd761108205ab5fdffa6113c618f154359ec414f6b0329572be7c3d9fe7c2e5d2f9cad69d6fc3201027540e03243b772886f51dc361d69d272c6013678ab778a7441b75e1c3b3fa55363b2695ba6d05a3920c85bcb80d0ed3d646df8c1166d8c5ba55e4aa4fc85b76faffed1c1afc319f4e2ef2cdc14ac3cccbed304c456f851e4d753a6b5d27d1e56aed814740d4ff7173d5e2ba67bbc5d9f3ff8aa76e5cd0a86a7a5c024c2cb939730d48c0650a66b5931377abeb45ef4b7cebe016828109c83b0e5639109cc165fd63bcab2bcc3a0d8cf08115549f41c80140a948a3e51b3a27a12e4357b83718d6adb012ed6de32085a1638a8608d15b65429c1f1e5c3366dbad9ea9dcd6d648c06be8e45abe18a6d6a4f686baf09da0ef43b3dff89981277c132d1873533081cde624174e769c83df326f621a817e26281f0f30db6e0b7d814ae3c8a1b16b1b559984f9046bd49e6c8c1bc0120c7e8162d6e2e9741b9e5c29779008e2f2f3e022b922c5fd53f7cbbee8e04517c48623097bcf766faebc4b505fe75d0c2375a77830fdf4cfc9187bab96b790c22fb61b709097dd4e2de9d1cc13bf84cc96c160b11af16768cb94c5bb96e6e1b7d182b56770284c6e502dba02f5d82bd4fe9dd57204ac5d55251589f3ca817ef08a50f8cb83bfdbe7e07f8c4b230e1dd7bea979e4b4a756fc375636aaeb5d02ed30630f8299abb5f59ad34a6898e96f546352eabda8addfabd7b411c33e5af372299a0bff6669e5ed5c52724ebf4e1b905909c56500bbd7f7c4acbdadc0b3fd95de334bf7f178981667c03e4a690a665a18d27874127ddf2c0ead5d590efd6b734700ca21fd651bd315ac170e2b2855c3135295bae0981c158a78e831a8d06d61b6768de9da06f7c52cdfc193b21f0c5cc83289cdf219a1fb28c5a3492227ef79c161d4b148adbaa44c5cb78d26170ef92d959956e8e193b6dfa62cc8e2341fb3d71388f07c50cf6089945f887106e03f7c2ceabd4009c4b0afa751feffc696053b0beb9c73187f24df009eca216a2b184f1308644c49427fc8d8af4d6e80c8c1bad2819fdd0cfa492e0c4c9249b606d4e5d669cf7b856f84cf37fa901d26df2eb85f3a3a1be9ee5cfeac7ac7b7c74ae663e375b3b4e2face76486ce3289238962d76aa10ebe9f211c91b42a100bcf97ebecd339e66e049806480f1a412134760bd2e9aabf5341efafd02ee2618650a051ed0cdfcd847e16a524bbcb6c443a19d836612584fc6764d2515284bc912ee29d1072abddf881c08bc34afd1d047ad51fa82ff0601668f153f30ba0bcf70e5991b9981b2ecf2a86967545f7a994e12dc3dd3fd58e08e8eaf537c16980c740c586f591611b393dbabfeb2f23c5c8f0a9a3a85a44973b9ee4ec72eb746b124b521a15d6cc3067ecdaae7537d722761cf90cfcad5e4aa32fc02d169f4c25296599787cfd638584b809d7de73ea375296f032f411f492fe162f36fd51e3388817c50f38e45fab6e0aaf6cd5ec3b443891b3b2af81a8d05968ee36dda37b4db8ee1a4afefc538b3a9cb8639679947338f7e996906991845eed633e4070582997d5c54289401b24bb7c12a5967eafcac5ed7b396e2a169b006f1d3e1558a2c8a850afc7a8bb5270eb4b5625cc4379778eb0e65bb34e7297c1001545476a948e5e7dab325be09b49ed9d19573aa9ad069f85d702c26d449a208fb7b37b12c958f87e7bed766a25cb5ea3a6ff597e8cb4fa427479b63f572794a3979d6a63c8bc25fb776d989484680330beff312357a411bf737e253214afadaad557e82f1282d535a9d82e9540a6519326722e65e07f5a7e1ee6c2a37b5b7c908d74c613c77afad3c13f12b923dd0eafc2cdddc28bbc373054a9391658fba70283fbfd0034e9bc9f9f92f464085282be39dcc11e3ff7b9711b6de0d9f34eb26085229916e2b7736ee3b6100f6a1d93b4f46f06502101a4947e76775b66c02d088bf46909c105bbd45928e049c79cc2fdf0ee88f8ac6e5ac5f9a2ec7d6f0b4099de3c87633b3de1029b7ba2ca0619abd8ac22889993cab4b4f864923f3f9c05cf1e2c8c2b00d9799a1c73aa6378e2c6384271c4e815e5791e318a7ed4bbd77ec350753e32d5ab3a91a20a061ee202f674d24684e5ace9592eed264267d5e9db65e7bd41e6f6bf9a5fa1f7ab9b1436c7f8ba106760c0bf3ff35fdc77249375886a3b3b39a5d5357ea38efb5622cb5bc232df77da2454b7e512439585510606ed1111c101de5531f1cc7cac4711815c3403e05fce4242212d31d5b39887daf9a0e6cf05352cd91386c3dc4efe1fb82d8c77c67a2924f294cee715d8de06df212621718120bc97eb2086ab7267c377f6ff1674b4aa3f2370ec29712612711c0013b154ca1f9421a4003fc60fffcf1de113b4e57af96c110dc6a33cb9fdaccf40603e604d17275fcd29e409eca3db82b76c33b89c44f16eb01463b50f1b21bc204e7ed74eec93f4a69a74f206c2874badb350cc62668bc169781850a3aee520c69f9c6023e0f33478c8e2362f7e94ef25c7c493f7d60309c02663c7db53eab486dc1f50df04ff3fa4706531062f2bb9aae9ae2205c338365b083facb58566d21d2c05f978dfa30d07a528b385f6060f318d07d843d37f61464109774779f680136809adde9decff4393b779fd5c9ff5041bf115cf1a9dd7cfb5a8ed437a918bd9b3888880a93c6b10565c48e18b25243694fb5e4195d7258012d8ca8fc206d2ef95e51ce9ee1738443e506b00dd82ec921bd622fe302c9304e77ae1365399d613e0caf82bf764c9df5315be2e7deb2958e4bb0b431a6dbc6d8a529a6fe59bb2f3e3f09d6d4e6066506a9092dc96db6cf35ffa869086f0f8bdcf0eb82d41592e4d8406adb3fcac4251a617e29d9424201298e01816627c72155b95dda182949311a86973d73a85707ff8655b95f74af2de1ba0cf7b30d17d7a8cf6459db4798528451e3c0e0a059441e2da1d6331507434d2a0c3888bc6268e32069096c943b6419e77f0e4b8e10da89314a3a26677cdb446732044cc4bac5dc67ba76758126f9058ba358b244bb40bab7ab359a5446a72975e76837face1b4c456f7ff5a1618f516859ee8d6c99a0e5276e23896970d073f45cd3436f62c4b598e5a23733183b878e6b02ca401d9db424d721016e948e6bb883184194729a93ec570586c639ff8e34b2499be59d43534d3ec9938a2c420b991a361c07f953bcde8472344c3c159e1fbc98f765ab9e7b552b67c12f1ad8e9b7bc461fa28e75d942973c60adb5c89422c76e6a22fa316d2122a3440ab6cb8bad6e383f205ff4ce5ae5456c737698c9a91533c7b6d9f889abe8e7f8dcd334ec412981ae9ee69facdc51c3c53e6db27c9032bbc8107ddfd403824965042be88750b9c0f8e1a8ce07e14178ac60be22b7578b3fcbf3928f124c15103c7efdbb725b520c6e3a0be47de0c1cf7445ef0695b3b86c015456313d082c85084c5e4830afd874eb088378ae36874cba96e5df5baf573e9b87ad6e12812d9fd9e12cab9839b382e29bca83f99a3298cc738719dae7821f8e8070dbff75a9916abcf2aa18be4a2a886e66f101fbae4b3eb8bfcbd45b336a3c16e7b136aaa5733d54c64fcc80d6cfe38b8d0de24d2b819b2ae41fe81aeebfed68650895c59c2f9f6c930c7440c2772ca6c73c043dfed4501c758490897c86ee49edf44b0c03887bfeaa1f6ec1b6ab902c881af46d418b25d30d5ff91b93bd9030e83a816304974d15eceeffacec4afb7582652fc143600c922e63bb0cc591e5a9249b3b542c2478dc5111e0e534722ad10d364c58d8f55d8f2b039a981a116713cccc8805f967e16c66c55c48b3af22760b467e2fcff18182e052a49350f09c8172d6a1f1104fba870f4609543159cc92bcae47a905ea6758870daccaeee8f6199bea8fc37843868aeeb71ea52cf28fd31fb648a988dd4c3cb142ffc6bc78fa300aeda86df71d58d736dfc54eb5406fbfc00f1f4bfc54400545f9e2ef3257e10a7d9e4bd4a0446d6aad138b0d4846b7e11573325e6e9c025fe51364c73e417bbb1e45cb7f339a00d887881724620ff79f852dfc466c0ad2f987618dfdf6662d644cea965297196a6067643e91a2e4d97728c56e5e810e7e13dc2fc1d96b34106ba7dde3e2b3c1e267989de9d7228eb8ff5b22946e71f7b805cf0eb158ce63bd6c7831cd96a4ab07b92c7de387c292987ec483254cdadeaec8c8e7274d55f55bec89f68963f04d6210abd5bdb2a3c6b39ee1ad7b9ec797705b7328409d7f1d7c33b3b1ccff2022eb3f112fd8329c895fefec7600355ad699d02c28f30f4567ed7910e61e81ca30b25d3fb75dcf4362e9fc38ca051b276b8eaedb6b891df8d64f73286ecd3b03c267c9e7b0e8a2e983a169e518b0eb0bb1df3ef17092266a51c7d5d3fd0c48c6df9fd31c9f5a2323cfe2af4d519c50b6739f0e4ef941d4376b76916dff582253dde305ab4a6db6f86e50aab9832e81ed12c87b6e191eb379592c9abac9b29d39c9f54764ff01529ae128c72b3a1ea26a4ff01f02b5f2ddf06061606433d2949afa2606e7cd8244f1f068414272e416790b662dff8131da585945fd7eb1791c7906852c11d0a83e595e805311edd574283d62dc2ff069d27e29843dfad2d1d141c3d9f95d7fd235d544f1ddf754d61d573e5c3197a7c3656a86a0b897b9ccf76a25b91e8cc9ebca94dd146e9126a59619c4d0e94a90cc804d3bc1ffd1548b3113f56e32a19fcb0c1804b25fe1ff0b6cf16991b9aedb28480fb8403a51185aa891e5c86055ca5238677891db5d8c64cd37f518e2ea755cf9727ec0ffb44424da2c94da42cc681d1f549dfb1d09f77a578549db41e0da2b99e8d064f63cb0b409cf920a732fc8016847298acaacd3b52a4c2e7860fd3c2173c3045e4922a2c385b51100ef660f783404f48efa826b70f231204720b1fc6ea9c14becf75e2e88e7e8974783915a8901898e50c828dbf2142da8c9621373b82fcf7a2105c255602352d7d126b2a2fbf83e7e652117c660f789f745b836d842f0f148e6795bddf8c581875e7e35d20b5170d194f9242ede82cbd994b3ffa80f6ed5d9f6ff0f5db81737a67fefdfd49b47baa294308706c001fb9425eeb90c673d5b5b6cbca182facbdf530bd5abed86db9866f5e7fc285143f41a7888a9b5f4ad7624e345a31a04789263d155059faa91ce68e7021c7058187cc88d8ddcce584441952336a31a15a08efce4df19bfde6ec828c8d3568fb231fffd982b44b0bf68d6d2892a3ac1921deacf93e1f61ee48f580cb8681db181ae370691305d7ab2a931b9f6741d4019fe59847aa5b282baa1bb71bdadc6c490d883f7a567c7f4c3b3a172489c31a49bef8013d16c32505c4cd0bcba5ceec6c85d600016f316d96f64bc6da92428d308ef174fe1b95ffd5d976dee67f9b1a1f57f89fd82c2fe5a54886e83139ea3fcb6e0a2e3134a4c9547827c5081fcf853f01308676577893e83ff4fdc45b629296f173da3721f4e877ec780c1a0dad9d7c7b46fb83e4a180287e1b0fae05732e27b3f2e6e9269e20f974f1b1c81376d661fcc054d1206d8d5b3b887b5eb52e5044cbbc9218c78c22acb98ce8c863e3aac3ee0463ff9297d4b92e960cb8b739a12603be18cc4ba4d0483fd970a16ed37f30807d5208812702cf64a407b551a657c8720e255352c6cfa2945c02b31620d1459eb921d24b2a83d2359b1121be6b3564301e3ff34fbb5132a3c236aae3b2c7f5c24fd2d55b7920cc023002432ede970d9a2d9408c741f2f52772324ccc66e43095b24fcc87e63709a81372ca87513759e0a62562ad51dd4a733e4bc87e6de9ee57c0efe3db34c9808c0f56c010499ee61781409d32a214da68833d24fa21a557a3243740f605f0c2c6170852515ddeccb5238eafa05ac75d69fb11cfe3d4ae3546b2ede8e13716d064f781a4ed8cc54f146db5a9993202cbd462deb9ffafcb905b6262a1afb063867cf3f6eb9aa2813771929efc39e4ed04ec8fe1b84366f4d182510af8118e2edcd6a0d660176a73384824b126bf10d3a79eeb683ef85f28da8e58033ed5e2da2f7a7d88ff4c2e6942f18be3a796793d22e7ea7e97d3f7a2e6db0c7b5f90895d723f290c4e5fa457fcba729e943113ee9d31c6d13497e6eb5bf0c793cf636290c805047dcc844dfa3a0c286fa1f3d9dbed1a7bf1ed97fb4f3dbe41301a77f849fe69e71ab8436d24ced1287e26b10c96d30710cad951ec8f880d769c5e86dee35ca72511fb6fddfa4689332288ba216dd0763247fddc8e951f51e79a12079bbaa2f1049b54ced6420676505abbdfeb72602a5a8161c38ce831b88c08bf19288fd01dc03b20bb602e12ec4bd68187cd1d4f801ec9479c5c196254dfed5a26ae1ed19e528ea6df44a69a4ba819a21708e7b3808e39d13a243be88ade3fdc6eade7958cfb6f3c260ec59d34a497144eaa780ea9ba3d50d36b059f79effacf4856d8a0336fb28f6d7b4c895c8336279c98d188bffb13db0492c0bf0f1718cd54a8ec65fa6e7bc5c053076a091657f1cc3f72b40e0f1a55f15331ae8885a5ffc6ca542528e6ea0280fdae4c58a5cfb08ad1273583ff0abd1629de16bf6b6eab894f4afa8cfa70f43fd24920cbb71e119dc9a7f18b128bee55309b601441d3481851a49d466909cb6df2212126cb4be368a34405440082ac2b3e369c040e49c7aff9db7c55550199c74aa39bb36a85edb6a07dfb79fa197a182f1450706d31d111fe6048a741f1404d7f3af95692a9196584ab53aeeca84504afa0aa6e1d4b710200351ecdada2069d4df95be4e9d8f60b8fe059f579dfe7d57597c7df90689da6893364835da2c046cccec1b48341b7c0f100420c7df78dee75a048c115be66915bb1a7efe2a2daae7dca02336b859ec290e89541f1b7d3ca3d9d74212cb9874dd1ac173a4a069e4b3b17fec778b4838ee441696dbdb90c91869d6a158bcb05b1935f0c69c573237131ed994cb2a8f8e5c913062d48dd07ce2786ea59ac414e26a0633555c5b4a57c959b61d1dd52dbfbf90eeab2ec8f33ad5c0a565aa732c2433e0ad24191f7bf2bae9a1a5c192182eed759fa33097345356290e3c31b714590a2e13f69ae58da758a4b68c7a6885d755d3f8a569c834b0d4dee3c3b1dde1e1791d516e3d0edabcbc07c5e96b7f3e91fe0fc4c74b4af0ded19f36e528c0ff48607c99cf87ebbe7faeca2e1180660cab1d2e9850d6ddae4751014354215f081d2c0a88532f19f74db223219fc3e657f57e07ac3122161046d56ec5f4615aa83d9193d830342b3131aca265689ecfb11ac859920f1c40a499256fb978085bc909d6fa51b217eb28b94ca90a84572134b7ed19347f5ccdcfc2fa69deeb4818ea6f0a71f51f8decdc05b9bdb9bde3af3eeb4d36b0b1c81da4ce94c63eb41bb486a533167779cc07c9862dec571d444bf3a310faff879ac902cfb97c7df338c9</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>批判性思维</category>
        <category>独立思考</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>态度</tag>
      </tags>
  </entry>
  <entry>
    <title>成长</title>
    <url>/2022/05/19/%E6%88%90%E9%95%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li><p>20220523 泽泽打A群疫苗。不知不觉 泽泽快十个月了。泽泽是一个勇敢 安静的男孩子。陪泽泽三次打疫苗，泽泽都没哭。他妈妈说 小时候打的会哭，现在只是哭啼两小就安静了。真实勇敢的孩子。</p>
</li>
<li><p>20220524 孩子妈妈和我第一次带泽泽去试听早教课。 泽泽第一次和那么多小朋友一起玩耍。有点腼腆，再游戏过程中还会有点怕，样子好搞笑。如果家长有能力的话，这样的玩耍 活动确实是有意思的。心疼泽泽。爸爸妈妈目前没有办法提供好的生活条件。</p>
</li>
<li><p>20220525 泽泽今天睡的舒服，很晚才起来。他妈妈上班的时候说好想他，不舍得他。这个小伙子越来越让人怜爱了。他的四颗牙齿长得更长了，笑起来更可爱了。 早上起来的时候，精神最好。小伙子慢慢长开了，变好看了。唯一让他妈妈忧愁的就是不怎么吃奶粉，很长时间不长个 不长重。他妈妈说要让他饿一段时间，真是两难的选择。不舍却又无可奈何。</p>
</li>
<li><p>20220714 泽泽周年照。泽泽最近非常有自己的想法了。出门给他带口罩，非常的不愿意，会坚决的撤掉，并且生气的扔掉它。有点脾气了。 今天去拍周年照，到达工作室，泽泽有点不愿意配合，是因为困了。 后来给他哄了睡，睡醒了才进入状态。 泽泽三套衣服，三个场景，都好看。 拍照过程也很快速，都没怎么感觉，就结束了。拍摄过程泽泽笑起来起来都显得是苦笑，也是没谁了。 不知道排出的效果会怎样。</p>
</li>
<li><p>20220722 泽泽最近站的比较多了，也更愿意粘人了。早上吃饭的时候，总是爬到椅子边，扶着椅子脚慢慢站起，然后就抓着大腿，怔怔地看着我。 走到哪，他也会爬到哪。 奶奶还说，最近会懂得保护自己了。坐小推车时，差点要掉下去，要不是他双手紧紧抓着车上的扶手，就可能掉下去了。 吃鱼，也会懂得将刺满满吐出来，真是厉害了。</p>
</li>
<li><p>202208xx 泽泽第一次发烧。 在做事情的时候，接到妈妈电话说泽泽有点发烧，心里就很不安。 急急赶回家。 妈妈和奶奶已经从医院回来了。 泽泽因为有点发烧，精神蔫蔫的，不像往日那般活泼。 抱起来可以感受到气息的温热。 不过，好在并不是很严重，应该是白天流汗 风吹导致的着凉。 晚上好好休息一晚上就正常了，医院开的药也没怎么吃。 小孩子有点不舒服都会让父母变得紧张，只能说孩子就是父母的软肋。</p>
</li>
<li><p>20221123 泽泽要回老家吃舅舅的喜酒了。一直担心泽泽在动车上哭闹，不过担心是多余的。只要有妈妈在，泽泽就能非常的放松自在，所以在动车上泽泽也非常的乖巧。妈妈带着泽泽看看窗外，玩玩东西，吃吃东西，车上的时间也很快过去了。</p>
</li>
<li><p>20221124—1130 泽泽回老家看到那么多人，刚开始的时候有点怕生和不自在，不过经过一个晚上，就完全融入了老家。 外公 外婆 舅舅 刚开始都是拒绝抱抱的，第二天就能很好的接受了。很大的原因应该是看到爸爸妈妈跟家里人不一样的关系，是亲近的，自然也就接纳了。 到了老家之后，泽泽突然间感觉理解了很多事情，能够与他进行简单的沟通交流了。能够主动要东西。知道怎么听指令做动作。知道自己吃饭要坐在自己椅子上，知道谁能够给他什么东西。 比如 外公能够给他糖吃，那么每次拿到糖的时候，都会拿到外公面前让外公剥给他吃，而不是拿到爸爸妈妈面前，因为他知道爸爸妈妈不会让他吃糖。可以拿着扫把畚斗有模有样的扫地。 知道要和哥哥好好玩耍。 感觉泽泽就是在突然间进入了可以玩耍的小孩子的状态，而不是婴儿状态。我想，还是环境的因素，家里人多，泽泽接触的人多，自然就更活泼开朗了，知道要和其他人打交道。 总之，这次回家之旅，泽泽的大变化让我们看的非常惊喜。</p>
</li>
<li><p>20221208 泽泽开始呀呀学语。爸爸妈妈奶奶哥哥舅舅都说的很好。尤其鸡蛋说的最有意思，虽然没有特别的清晰，但是反而增加一丝萌意。对吃的特别感兴趣，为了吃的，能做很多动作，说很多话， 鸡蛋就是为了吃鸡蛋而说。 那种急迫的样子特别搞笑。 泽泽也变得越来越有模有样。 最令他妈妈欣慰的是，身高和体重慢慢在回归平均水平。也慢慢展现出泽泽的学习欲来， 似乎要给他进行简单的智力开发，而不是没有目的陪伴。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>成长</category>
      </categories>
  </entry>
  <entry>
    <title>技能点</title>
    <url>/2022/04/19/%E6%8A%80%E8%83%BD%E7%82%B9/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c2deaa4b543eefda6e1f0f0c862c06a129dd6469242318d3cf9cec005a00cd5d">59067b0f0b35676af0c14e3470fcb0880e01fb96ae32b80a3ba8bf8ac7f9494c1cc155c6208b7b3b730cb9b9d3f29d867648d212489395613dcc3a906dee32781f35a3a6659eb8bddb4c1bcbf8aefaf983b05c54bd44b44a88b24b4085f80fd43f744171952d0851d81e1370806129f3241186b5cc3807d8d29b44f9108045357cd9c078f6ae04ad7355ab6023eb4a335eb523d4e60823f49e40f687cba3bf0e280975e487ece42eb1bdd1019beb8b7a22b1635eae1fad094920bd83c4465c79d5d201098817c86b333999fb7cadfde3ade1d5e4b6c14896a2fbaf826daa260fd12c2c9c47bd3aa887e8b19901167a86763dbbeabaa5bed86843da37a3393d6af76d93dc65ec8b09af13a18c87e09f7115ae00e3f01ab3aab4daa98e89be6cb2d5192d865485c36afde6ede58123a317d21fdc12cd9a152d6a7877df69149849d6fb798277f607cf971c2d956c566267f828ec2047b8da1935641502042acbfee768b153e710712af242652e7467a1e08deaf5c03132969c37f6aaf53f0ea2accb6874639d41181817ebbb9104eb7f98ff2588e995b072d17f7dce2c7a15079ff22773afda76b816ab6eb7735f7c8b68649c9469b155bada5855ceeb73079d2eb77331a1108e6ac8674fc1405d34e0ca8539ad638b8c2407d07c36b7884229a0ab92360e0c8747021146997954953bc4b2c6a32b5b347218a9c8a7a668dbf9e64a0de141f8fe53fa4ecbdac5d19baab411c421ea2b41c1ec0e50246f9ca32ec14264f1bbde052ab5375d9b56fb19e39296c8dd7c5f93950426714a26af149ea50a75ed158ec1c8b072c9bffbfe4172184719db2264b158e06f4e1b14034a1009c8141795076441ff50c4df2eefc46cf7eda29128cfb380b7620b98039c8a084e994ae29065ef82205fec53593e608bf4778d35898a809a72a12cb1ec10bc1a4d451365f45debc17966f431e3aed8e206f0fd2e9e9a843ee9e59af043ba0bb7ae333d18f21f1e59b58de869fbfba0153d60e78aef13c2728b1df82cdf163e4afe3ed9e9da16e1818002f070166f726fdd</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>学习图谱</category>
      </categories>
  </entry>
  <entry>
    <title>每一天</title>
    <url>/2022/04/19/%E6%AF%8F%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="23a4f678728de04fb8c59b6c7f927381525ab2c3acbf178116b0a9c0a9ab7e0c">3a9386b74a75ebe57713af3bc4d282a74e3020e7fb284842999de43ed3c787097e8f8d749915098eb992815ad7db19b0e28f2c48b91462824aef79b33f96d6ff9482db9e5036e5ac00219e922deeced960cef8faad6b695fdd83fff8f3e663d0945a1b86cd5f9a4dd517f1e23e0ba455a2313c03160dc8af907c10169df8bbc314ee4f997bbb8dae90d20eed3e35aeb1898c3f20b1c4242e889edd881a2d6ce56157878cf8441eca1e283b01591da39445f9f21e1b927c7356a8faf3fb9c3322a75af6f2e75ffb7eb651c9208362045539c23b6756dd28e8503e5e451ff2ad9ea9f4a9929cac214f54016a15690a0af3ffcf55a8de00b90506d5bbab46e8bd7cbf2e3200c1ca5bf32720dbe551fb38b595465aa7d877532f897cfe3480b01bc3c299e47bfeef71f36574dd424533c09e1dbe68694d7e5027f08493115e637ed55de96a5e7807e8084fb53849bcf44ec98d804de80186d69c759c7766ecb0f8f3ae184aa88dce4b472253c944ef4b4f90bcdd1a5cddfb8a9358813b6dffadc601cda423e4bb166a3da4949937f1abfe388b0ef8f40903535794db2707dd71f9a5918c70df525957a2b78fa2eec16668f36c742a7dfe92c45c913b4dbfdfbbfbf24949485c3c30170c294b94de34989cc371de4f0aa8a8533613551901fd950023a4061fa1e203a0e68a61950c40adbc1e8ac8a2b33335b5b3a8e58a1f554cc7e44c055d2c80d0545fb0f6e00e284835ed1183409062476cbd5baac15e6ab2f489968f4e185ed76fea1cade10164f1817666115c671d61edcc113b407d6e2d27e2ac8c63fc181764f3038b80c9756a0adcf34fd6ac26332e03723de6ff4bfbd928f65b0f706028d50524756825d7d98cce60f7162b88d6e62376d94f3b336039e6e583df4da6c8051a9092183a95eb1dcd01faed632cc7475606b62484142d43af53741f8e317ce86b17466774ca74c3dfe1c590e57ee5ec8ea39be0a6c97cf2c4036a61192b1f23d524b771b8311e73ff</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>每天总结</category>
      </categories>
  </entry>
  <entry>
    <title>Build your blog</title>
    <url>/2022/03/17/Build-your-blog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#%E5%8D%9A%E5%AE%A2%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B">博客技术选型</a></li>
<li><a href="#%E6%90%AD%E5%BB%BA">搭建</a><ul>
<li><a href="#1%E6%96%B0%E5%BB%BAgithub%E7%9A%84repository">1.新建github的repository。</a></li>
<li><a href="#2%E5%AE%89%E8%A3%85hexo">2.安装hexo。</a><ul>
<li><a href="#21-%E5%AE%89%E8%A3%85hexo">2.1 安装hexo</a><ul>
<li><a href="#hexo-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%8E%9F%E7%90%86">hexo 目录结构，原理。</a></li>
</ul>
</li>
<li><a href="#22-hexo-%E5%AE%89%E8%A3%85%E4%B8%BB%E9%A2%98">2.2 hexo 安装主题</a></li>
<li><a href="#23-hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">2.3 hexo 常用命令</a></li>
<li><a href="#24-1-%E4%B8%BB%E9%A2%98%E7%9A%84%E5%8A%9F%E8%83%BD%E6%8F%92%E4%BB%B6%E5%AE%9A%E5%88%B6">2.4-1. 主题的功能，插件定制。</a></li>
<li><a href="#24-2%E5%AE%9A%E5%88%B6-%E4%BF%AE%E6%94%B9-%E4%B8%BB%E9%A2%98-%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%9A%84%E5%8A%9F%E8%83%BD-%E6%A0%B7%E5%BC%8F%E7%AD%89">2.4-2.定制 修改 主题 （增加新的功能 样式等）</a></li>
<li><a href="#25%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%80%E5%8F%91hexo-theme">2.5.自定义开发hexo theme。</a></li>
</ul>
</li>
<li><a href="#3push%E5%88%B0repository">3.push到repository。</a></li>
<li><a href="#4%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE">4.域名访问。</a></li>
<li><a href="#5%E5%88%A9%E7%94%A8github-action%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83">5.利用github action自动发布。</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直想要构建一个属于自己的博客，可以作为自己生活工作的输出和记录。但是碍于各种麻烦(买服务器，构建，运维)(当然主要就是懒)，最终只停留在想想阶段。 后来意识到输出的重要性，才认真的考虑构建自己的博客。</p>
<h2 id="博客技术选型"><a href="#博客技术选型" class="headerlink" title="博客技术选型"></a>博客技术选型</h2><p>博客主要有动态网站，静态网站。  </p>
<ul>
<li>动态网站，比如Wordpress，自己写的动态网站博客(jsp php等)。这个就是比较麻烦，要服务器，要自己构建，自己维护。（所以一直没有去实施） 但是这种比较灵活，可玩性比较高，可以根据自己的需求处理。</li>
<li>静态博客，就是服务器只托管静态的html页面，并没有动态的能力。其实很早之前网上就有这样的博客了，只是以前一直不知道这就是静态博客。 不过了解之后，发现这个可玩性也很高，可定制自己的博客样式，而且可以结合github，免去服务器的维护。</li>
<li>博客就应该简单，不需要太多的乱七八糟的动态交互。 因此很适合做静态网站的形式。</li>
</ul>
<p>了解一番，静态博客可选择： github.io／GitHubpage + hexo&#x2F;Jekyll&#x2F;hugo. 最后选择了hexo，主要因为它是nodejs写的，而我也想学nodejs，因此就选hexo。</p>
<p>原理，利用hexo&#x2F;Jekyll&#x2F;hugo等静态网站生成器，将md文件生成的静态的html页面，push到github上。github托管你的静态网站，github会提供一个博客域名给你，你就可以访问域名使用了。</p>
<p>静态博客框架原理<br>静态博客框架&#x2F;静态博客生成器 利用模版语言如ejs&#x2F;njk等，将md文档渲染成html。</p>
<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>具体搭建方法见 <a href="https://shw2018.github.io/posts/6e8839eb.html">链接</a>。 以下记录，就是记录流程和一些关键概念。</p>
<h3 id="1-新建github的repository。"><a href="#1-新建github的repository。" class="headerlink" title="1.新建github的repository。"></a>1.新建github的repository。</h3><p>   <a href="https://www.jianshu.com/p/22b413e3da53">githubpage用途</a><br>github上新建githubpage。repository名为 githubusername.github.io. 新建这个仓库后，通过域名githubusername.github.io就可以访问这个仓库下的静态资源。 </p>
   <pre class="line-numbers language-none"><code class="language-none">注意名字只能是githubusername.github.io，其他名字的仓库，github不会托管的，也就是说github只给每个用户一个githubpage。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>相当于github帮你托管了一个静态网站，并给你提供了网站域名githubusername.github.io， 你通过这个域名就可以访问静态网站了。</p>
<h3 id="2-安装hexo。"><a href="#2-安装hexo。" class="headerlink" title="2.安装hexo。"></a>2.安装hexo。</h3><p>hexo 快速、简洁且高效的博客框架, 静态博客生成器。  <a href="https://hexo.io/zh-cn/docs/">官方文档</a></p>
<h4 id="2-1-安装hexo"><a href="#2-1-安装hexo" class="headerlink" title="2.1 安装hexo"></a>2.1 安装hexo</h4><p>其基于nodejs，因此先安装nodejs。<br>hexo原理，其实就是样式和内容分离。渲染。<br>0.读取总配置文件。根目录下的 _config.yml.<br>1.渲染。source文件夹 和 theme文件夹。 两次渲染。1.第一次先将source下各自文件夹中的md文件渲染成article对象。2.根据种配置文件中theme将article对象根据theme文件夹下相应的lauout的ejs的进行渲染成html，输出到public。article对象用哪个layout的ejs进行渲染，用的是 md所在的文件夹名称 就是 theme下layout对应名称的xx.ejs。 theme的渲染配置在各自theme文件下的_config.yml.<br>配置文件中也是定义一些变量。<br>模版语言：ejs njk</p>
<h5 id="hexo-目录结构，原理。"><a href="#hexo-目录结构，原理。" class="headerlink" title="hexo 目录结构，原理。"></a>hexo 目录结构，原理。</h5><p>   目录结构， 配置文件， 原理。  </p>
<p>目录结构</p>
<ul>
<li><a href="https://www.jianshu.com/p/a938da5ddb5d">链接</a></li>
</ul>
<p>配置文件</p>
<ul>
<li>根目录下的_config.yml <a href="https://zhuanlan.zhihu.com/p/127786638">链接</a></li>
<li>theme目录下的配置文件。</li>
<li>关于.yml文件 <a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML 语言教程</a></li>
</ul>
<p>原理</p>
<ul>
<li><a href="http://coderunthings.com/2017/08/20/howhexoworks/">链接</a></li>
</ul>
<h4 id="2-2-hexo-安装主题"><a href="#2-2-hexo-安装主题" class="headerlink" title="2.2 hexo 安装主题"></a>2.2 hexo 安装主题</h4><p>有很多主题可供选择。这里我尝试了两种，hexo-theme-matery, next. 最后选用了next，因为最符合简约 有效的风格。 hexo-theme-matery 虽然很炫，但是太杂了，不适合技术博客的风格。<br>安装主题，选择你喜欢的主题。</p>
<ol>
<li>找到你喜欢theme的github, git clone 到hexo根目录下的theme目录下。</li>
<li>修改根目录下的_config.yml中的theme配置。 修改为theme目录下的主题目录名。</li>
</ol>
<h4 id="2-3-hexo-常用命令"><a href="#2-3-hexo-常用命令" class="headerlink" title="2.3 hexo 常用命令"></a>2.3 hexo 常用命令</h4><p>（要在init生成的目录下执行hexo命令）<br>hexo init XXX<br>hexo g  &#x2F; hexo generate 生成静态页面。在public目录下。<br>hexo s &#x2F; hexo server 启动本地http服务器， 访问localhost:4000<br>hexo clean clean生成的文件。<br>hexo new “xxx” 生成文章，到_posts下。<br>hexo new page “xxx” 生成文章，到source下。<br>hexo new draft “xxx”</p>
<pre class="line-numbers language-none"><code class="language-none">除了hexo new post|page xx。也可以在相应的目录下手动生成md。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>hexo d &#x2F; hexo deploy 会将public下生成的文件puosh到_config.yml配置文件设定的github仓库上。</p>
<p>关于.yml配置文件 注意两个地方。根目录下的_config.yml, theme目录下各个主题的_config.yml</p>
<p>我安装的hexo 和 next主题 版本 如下：</p>
<pre class="line-numbers language-none"><code class="language-none">hexo -v

NexT version 8.10.1
Documentation: https:&#x2F;&#x2F;theme-next.js.org
&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
hexo: 5.4.1
hexo-cli: 4.3.0
os: darwin 16.7.0 10.12.6

node: 15.3.0
v8: 8.6.395.17-node.22
uv: 1.40.0
zlib: 1.2.11
brotli: 1.0.9
ares: 1.16.1
modules: 88
nghttp2: 1.41.0
napi: 7
llhttp: 2.1.3
openssl: 1.1.1g
cldr: 37.0
icu: 67.1
tz: 2019c
unicode: 13.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-4-1-主题的功能，插件定制。"><a href="#2-4-1-主题的功能，插件定制。" class="headerlink" title="2.4-1. 主题的功能，插件定制。"></a>2.4-1. 主题的功能，插件定制。</h4><p>   我想要的博客功能： 简洁，不需要花哨， 搜索， 归档， tag， 分类。</p>
<ol>
<li>归档，分类，tag。</li>
<li>搜索。 npm install hexo-generator-searchdb</li>
<li>RSS。 npm install hexo-generator-feed –save</li>
<li>字数统计,阅读时长等。npm install hexo-word-counter</li>
<li>访客统计。 不蒜子。</li>
<li>评论功能。 gitalk， valine。 评论回复时 邮件提醒。</li>
<li>留言板。gitalk， valine。<ul>
<li>gitalk 文章与issue对应 是根据文章的url来决定的。文章的url作为issue的id。gitalk issue初始化问题(利用sitemap.xml去自动化初始化)。<div style= "display:none;" >
leancloud 账号 国内版(13490**),国际版(13490**)。 国际版有提供二级域名。
</div>
<pre class="line-numbers language-none"><code class="language-none">1.设置valine评论。 valine + leancloud. https:&#x2F;&#x2F;ioliu.cn&#x2F;2017&#x2F;add-valine-comments-to-your-blog&#x2F;
2.设置valine评论的邮件提醒。 valine admin. https:&#x2F;&#x2F;github.com&#x2F;zhaojun1998&#x2F;Valine-Admin
   注意：leancloud的休眠策略。防止休眠：1.leancloud定时任务。2.github action 发请求。
https:&#x2F;&#x2F;blog.csdn.net&#x2F;Aoman_Hao&#x2F;article&#x2F;details&#x2F;105323917
https:&#x2F;&#x2F;github.com&#x2F;zhaojun1998&#x2F;Valine-Admin
https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_49687704&#x2F;article&#x2F;details&#x2F;119790377<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>阅读进度。修改next中参数就行。</li>
<li>文章加密。<br>- 简单的前端设置密码。(绕过，到githubio上还是可以看。比如hexo-theme-matery就是这么加密的)。pass。<br>- 对整篇文章内容加密，解密前只显示加密的密文。(hexo-blog-encrypt)</li>
<li>说说，备忘录。</li>
<li>相册。</li>
<li>tag的词云。 hexo-tag-cloud。</li>
<li>添加CC协议。</li>
<li>将githubpage放到giteepage。 github太慢。</li>
<li>添加音乐播放器。 aplayer, metingjs。  hexo-tag-aplayer（hexo-tag-aplayer 是 APlayer播放器的 Hexo 标签插件。也支持metinjs。） hexo-tag-aplayer 只在md文件中使用。其他可以在支持html标签的页面中使用。<br>  - 使用 <code>&lt;iframe&gt;</code><br>  - 使用aplayer。<br>  - 使用aplayer + metingjs.<br>  （以上三种可以在md文件，也可以在像sidebar.njk这样的njk文件中使用。）<br>  - 使用hexo-tag-aplayer.(hexo的标签插件只能在md文件中使用。为什么无法用在njk文件？ 好像也不能用在ejs文件中)<br>  - 放在sidebar; 放在某篇文章; 页面跳转继续播放全局可播放; 底部磁吸模式; <ul>
<li>放在sidebar里只能<code>&lt;iframe&gt;</code>,aplayer原生,或者metings。因为hexo标签插件在njk文件不起作用。</li>
<li>关于全局播放。 使用pjax技术。 即不刷新请求，同时改变url。(ajax + pushstate)。 next很简单，直接开启pjax:true</li>
</ul>
</li>
</ol>
<h4 id="2-4-2-定制-修改-主题-（增加新的功能-样式等）"><a href="#2-4-2-定制-修改-主题-（增加新的功能-样式等）" class="headerlink" title="2.4-2.定制 修改 主题 （增加新的功能 样式等）"></a>2.4-2.定制 修改 主题 （增加新的功能 样式等）</h4><p>当官方／第三方 主题 功能 样式都无法满足自己的需求，就要自己去魔改了。</p>
<h4 id="2-5-自定义开发hexo-theme。"><a href="#2-5-自定义开发hexo-theme。" class="headerlink" title="2.5.自定义开发hexo theme。"></a>2.5.自定义开发hexo theme。</h4><p>真正厉害的就是自己开发hexo的主题。</p>
<h3 id="3-push到repository。"><a href="#3-push到repository。" class="headerlink" title="3.push到repository。"></a>3.push到repository。</h3><p>当我们完成文章创作之后，就可以发布到githubpage上了。<br>    1. 修改根目录下的_config.yml的deploy配置。</p>
<h3 id="4-域名访问。"><a href="#4-域名访问。" class="headerlink" title="4.域名访问。"></a>4.域名访问。</h3><pre><code>1.  yourgithubusername.github.io
2.  如果你自己有域名的话，可以将你的域名cname到yourgithubusername.github.io。
    1.  在域名服务商处将自己的域名cname到yourgithubusername.github.io
    2.  在github网站上 githubpage 的 repository 中的settings-&gt;githubpage-&gt;domain 修改为你的域名。 （修改cname后，要记得修改 评论模块的安全域名设置（gitalk leancloud））
    3. 问题：既然域名服务商已经添加了域名解析cname，为什么还要在github上添加cname? github上的cname作用是什么?  如果没有设置github上的cname，就不成功。  我原先也是这么想的，其实就是相当于域名cname到githubpage上就可以了。但是我试过不行。仅仅在域名服务商那边设置cname还不行，还要在github上设置cname才行的。 所以我不知道github上设置cname是什么作用？ 是为了验证？ 另外，两个域名互相cname会怎样？？
</code></pre>
<h3 id="5-利用github-action自动发布。"><a href="#5-利用github-action自动发布。" class="headerlink" title="5.利用github action自动发布。"></a>5.利用github action自动发布。</h3><p>   0.源文件仓库。 私人。<br>   1.gihubpahe仓库。 公开。<br>   2.在源文件仓库中设置githubaction。 方式1.使用hexo d 一键部署 发布到gihubpahe仓库。 方式2.编写hexo的action直接来将生成的静态文件push到gihubpahe仓库。<br>      方式1将token放在源文件中不是很好。<br>      hexo 的_config.yml中设置token提交：<br>         deploy:<br>            type: git<br>            repo: <a href="https://xxxtoken@github.com/ruozhiertong/ruozhiertong.github.io.git">https://xxxtoken@github.com/ruozhiertong/ruozhiertong.github.io.git</a><br>            branch: main<br>      然后直接 hexo d.<br>      改进，通过hexo指令向其传递变量，然后再action中向hexo传变量。 比如类似 hexo d –github_token xxxtoken. 然后再github action中去设置xxxtoken。  </p>
<pre><code>  方式2，可以直接使用github action中设置东东。 
</code></pre>
<p>为了保证源文件的私有性，所以设置了步骤0的私有仓库。 每次编写md文件后，push到步骤0的仓库。 步骤0仓库的action会生成静态文件push到步骤1的仓库，从而实现源文件和公开博客的分离。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>建博客：</p>
<ul>
<li>在github上创建githubpage的repository。</li>
<li>安装hexo，创建hexo工程，安装主题，安装相应的功能，修改配置文件参数。</li>
</ul>
<p>创作：</p>
<ul>
<li>hexo new xxx 创建文章</li>
<li>xxx.md 的内容创作。 编辑相应的categories，tags等。</li>
<li>hexo g &amp;&amp; hexo s 本地生成和浏览</li>
<li>hexo d 部署到githubpahe。</li>
<li>访问 yourgithubusername.github.io</li>
</ul>
]]></content>
      <categories>
        <category>Skills</category>
      </categories>
      <tags>
        <tag>site</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hax&#39;s vps</title>
    <url>/2022/03/19/Hax-s-vps/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#%E7%94%B3%E8%AF%B7-hax-vps">申请 hax vps</a></li>
<li><a href="#hax-%E5%BA%94%E7%94%A8">hax 应用</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近发现一个还不错的免费的vps。当然有能力买一个云服务器是最香的。如果仅仅是为了学习，短暂使用，那这个免费的vps还是最香的。<br>我自己之前使用过 aws， 阿里云。 aws免费一年。阿里云活动100多一年。 虽然花的钱不多，但是用的也不多，仅仅是用于学习，很多时候是浪费的。 所以，这个免费的vps有点香。<br>先说一下 有一个自己的服务器能做什么？</p>
<pre class="line-numbers language-none"><code class="language-none">服务器／云服务器／VPS
1.搭建vpn／梯子。
2.云服务器跑自动化。
3.搭建博客，网站，酷炫的应用等。
4.数据存储, NAS。
5.验证自己学习上遇到的困惑和想法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以，能有一台永不宕机，永远在线的服务器是很酷的事。</p>
<h2 id="申请-hax-vps"><a href="#申请-hax-vps" class="headerlink" title="申请 hax vps"></a>申请 hax vps</h2><p><a href="https://hax.co.id/">官网</a><br>hax vps 是利用虚拟化技术而创建的vps。<br>hax vps 是免费的，因此1.性能上不能强求太多。2.没有ipv4(这也是很坑的一点)。3.每7天续订一次。(对于长期使用，就别用这个了)  </p>
<ul>
<li>申请vps。（要tg账号）</li>
<li>申请完之后，因为只支持ipv6，如果你所在网络只支持ipv4。可以使用hax 提供的ipv4toipv6。（实际上只是一个纯粹的中转，将所有流量最后还是转发到vps上的）注意ipv4地址一定要能访问得到。hax只让你用三条映射。<pre class="line-numbers language-none"><code class="language-none">ssh root@103.253.24.78 -p 2345 (经过ipv4toipv6)
ssh root@2a01:4f8:13a:19e5:1026:a11a:c4a8:0001 (直接使用ipv6连接)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>注意，hax只支持ipv6网络，因此你要想用haxvps访问ipv4，那么需要安装warp(原理是通过一个中转点，这个中转点可以访问ipv4 ipv6)。<h2 id="hax-应用"><a href="#hax-应用" class="headerlink" title="hax 应用"></a>hax 应用</h2>  毕竟免费，太复杂的应用是干不了的。只能做一些自动化脚本，梯子等（网站还是有点够呛）</li>
</ul>
<div style= "display:none;" >
白嫖hax的vps作为翻墙用：
1. 申请vps。 （要tg账号）。 hax账号密码： tgid， 12345678. vps登录账户和密码：root abc1234.
2. 因为hax的vps支持ipv6，所以如果本地是ipv4是无法访问的。  可以用hax提供的ipv4toipv6。 （实际上只是一个纯粹的中转，将所有流量最后还是转发到vps上的。）注意ipv4地址一定要能访问得到。hax只让你用三条映射。
    ssh root@103.253.24.78 -p 2345 (经过ipv4toipv6)
    ssh root@2a01:4f8:13a:19e5:1026:a11a:c4a8:0001 (直接使用ipv6连接)
3.安装 shadowsock-libev并配置。 配置成ipv4 ipv6都能接受的。
一键安装： wget -N https://raw.githubusercontent.com/ruozhiertong/pythonDemo/master/test/env_hax.sh && bash env_hax.sh

<p> 3.1.sudo apt-get update. 3.2.sudo apt-get install shadowsocks-libev<br> 3.3.sudo vim &#x2F;etc&#x2F;shadowsocks-libev&#x2F;config.json<br><a href="https://www.oilandfish.com/posts/shadowsocks-libev.html">https://www.oilandfish.com/posts/shadowsocks-libev.html</a><br>同时支持ipv4 和v6.<br>{<br>    “server”:[“[::0]”, “0.0.0.0”],<br>    “server_port”:8388,<br>    “local_port”:1080,<br>    “password”:”AWS2020aws”,<br>    “timeout”:200,<br>    “method”:”aes-256-cfb”<br>    &#x2F;&#x2F;“plugin”:”obfs-server”,<br>    &#x2F;&#x2F;“plugin_opts”:”obfs&#x3D;http”<br>}<br> 3.4 sudo &#x2F;etc&#x2F;init.d&#x2F;shadowsocks-libev start</p>
<ol start="4">
<li>客户端连接。<br>haxv4(经过ipv4toipv6映射了):</li>
</ol>
<p>103.253.24.78<br>8388<br>AWS2022aws<br>aes-256-cfb</p>
<p>hax：<br>2a01:4f8:13a:19e5:1026:a11a:c4a8:0001<br>8388<br>AWS2022aws<br>aes-256-cfb</p>
<ol start="5">
<li>让hax vps 也能访问ipv4网络。 安装warp。<br><a href="https://owo.misaka.rest/warp-vps/">https://owo.misaka.rest/warp-vps/</a></li>
</ol>
<p>warp: 是让只有ipv6的vps套上ipv4，使得VPS可以访问ipv4网络。 但是如果原来vps只支持ipv6，那么此时外部的ipv4网络还是无法访问到vps。单向的。<br><a href="https://github.com/fscarmen/warp/blob/main/README.md#WARP%E5%8E%9F%E7%90%86">https://github.com/fscarmen/warp/blob/main/README.md#WARP%E5%8E%9F%E7%90%86</a><br><a href="https://www.veidc.com/19128.html">https://www.veidc.com/19128.html</a><br><a href="https://luotianyi.vc/5252.html">https://luotianyi.vc/5252.html</a><br><a href="https://blog.skk.moe/post/something-about-cf-warp/">https://blog.skk.moe/post/something-about-cf-warp/</a><br>查看你的主机支持的网络： <a href="http://ip6.me/%E3%80%82">http://ip6.me/。</a> 如果支持IPv4，那么是无法访问ipv6的网络上的内容的。ipv6 同理。<br><a href="http://www.test-ipv6.com/">http://www.test-ipv6.com/</a><br><a href="https://ip.zxinc.org/ipquery/">https://ip.zxinc.org/ipquery/</a></p>
<ol start="6">
<li>hax的免费vps要每周续期才可以。 能弄一个自动续期就很完美了。（github action可以。 不过那个脚本好像不能用了）</li>
</ol>
<p>7.测试 vps速度。<br>——————– A Bench.sh Script By Teddysun ——————-<br> Version            : v2022-02-22</p>
<h2 id="Usage-wget-qO-bench-sh-bash"><a href="#Usage-wget-qO-bench-sh-bash" class="headerlink" title=" Usage              : wget -qO- bench.sh | bash"></a> Usage              : wget -qO- bench.sh | bash</h2><p> CPU Model          : AMD Ryzen 5 3600 6-Core Processor<br> CPU Cores          : 1 @ 3593.250 MHz<br> CPU Cache          : 512 KB<br> AES-NI             : Enabled<br> VM-x&#x2F;AMD-V         : Disabled<br> Total Disk         : 4.7 GB (2.4 GB Used)<br> Total Mem          : 416.0 MB (86.6 MB Used)<br> Total Swap         : 128.0 MB (268.0 KB Used)<br> System uptime      : 0 days, 2 hour 33 min<br> Load average       : 0.00, 0.00, 0.02<br> OS                 : Ubuntu 20.04 LTS<br> Arch               : x86_64 (64 Bit)<br> Kernel             : 5.4.0-29-generic<br> TCP CC             : cubic<br> Virtualization     : KVM<br> Organization       : AS13335 Cloudflare, Inc.<br> Location           : Frankfurt am Main &#x2F; DE<br> Region             : Hesse</p>
<hr>
<p> I&#x2F;O Speed(1st run) : 207 MB&#x2F;s<br> I&#x2F;O Speed(2nd run) : 203 MB&#x2F;s<br> I&#x2F;O Speed(3rd run) : 211 MB&#x2F;s<br> I&#x2F;O Speed(average) : 207.0 MB&#x2F;s</p>
<hr>
<p> Node Name        Upload Speed      Download Speed      Latency<br> Speedtest.net    386.46 Mbps       269.90 Mbps         2.97 ms<br> Los Angeles, US  251.06 Mbps       149.69 Mbps         148.62 ms<br> Dallas, US       255.47 Mbps       156.11 Mbps         120.55 ms<br> Montreal, CA     276.02 Mbps       122.99 Mbps         93.10 ms<br> Paris, FR        829.82 Mbps       299.59 Mbps         21.27 ms<br> Amsterdam, NL    285.65 Mbps       149.41 Mbps         13.08 ms<br> Shanghai, CN     4.99 Mbps         85.90 Mbps          249.19 ms<br> Nanjing, CN      214.21 Mbps       145.04 Mbps         266.27 ms<br> Guangzhou, CN    118.55 Mbps       75.64 Mbps          258.30 ms<br> Hongkong, CN     209.17 Mbps       101.95 Mbps         195.77 ms<br> Seoul, KR        198.94 Mbps       114.69 Mbps         296.75 ms   </p>
<hr>
<p> Finished in        : 6 min 2 sec<br> Timestamp          : 2022-02-25 09:42:03 CET</p>
<hr>
<p>使用支持ipv6的网络去ping hax的vps， 以及用支持ipv6的网络去连接vps的ssser。</p>
<p>使用ipv4之后翻墙成功了。 试试用ipv6的。 </p>
<p>验证，是否是warp使得翻墙成功了，因为昨晚的时候一直不成功。  靠。还真的是warp安装之后可以了。 应该是连接上vps了，但是vps无法连接到外面的ipv4网络，因此导致失败，提示的也是network unreachable。<br>其实现在很多网络还是只支持ipv4，支持ipv6的不多，不过后面会越来越多的。</p>
<p>hax 的ipv4都被墙了，基本用不了，只能ipv6了。</p>
</div>]]></content>
      <categories>
        <category>Skills</category>
      </categories>
      <tags>
        <tag>site</tag>
        <tag>vpn</tag>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Write</title>
    <url>/2022/03/17/How-to-Write/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3686c85103ec8df5f51dd1ed3089857410cedf86c20ab7c0d1bd0b46df3e689e">777c54ddc094c9ffb29322e243d0ffbf08414c8338c54302b780fbd695c2dbd0ad5965b90d8f0d53c5923290112648b50206ddf1b75f099c8b96b1277bb9f6c9e156239718b5b2b584e61b4c5f17dddc99d997472dc3f396264144acb278f30d2f01f485df2e9fb253cd6c9020b121612e71f51d7da74347fd543136ac519fdddd33f255d9c0d4ffb172e58438b1a111628a45eb62465a5a7c095d76daba2c1b75dc41600452b18bf18b04bd8c45393246fea3b73f8dd623ca126f55cf980d467a39106061958de474c187cb8327149992c448d565b1ac456e82469247607b53dd31138fb809c7c841d6b5c4dc5233ae35ca2839e1db3610e71192c613c438772cdf413f7ff2f3fe2b8eaeb78fc42b17a014311791094a0c2ecff722771bb47b06b8976c88c19269e213eea2cc2e66afac68f4b9965c91ce34876fe1d6641010df649aecfa0e088a85aaf19465b26665997686a331e6a55616b1f4537998baf7090350a6f9e3ea53fca991c65c3eb1848d0004e17d9667ec19e1bbbd9198fc9ab081d283d8d7879e2a7991e301f4a2e0c4246754d9d59ab9d25a599b46cd49fe8b5e36cc8b0c2f6a527b6a4662edf66d02755fde4ed9248d85d15e0284c9c46e6ff9d2e7e9cc4903de2797ce36747ae27ea03251a0e00d0b86faa838934d8167844ec58b8ec229a71be22215b51d65b9455993d010187dea8679da1362c052420cf749c5eaf80ce6247150ed6c837e99a0cb629d36c272f058f258807d5a22f9fd8f933a69f05f7ce1962fcf9bd6e3f92432614d0cbae01fd74a42a2e96624f045c641e53486b2c2aebcbfba11b3f557dae5fe715b312abe29238f8000ee012b32bacbe4bac98dad0266306c656bf2eb4ed73645b97cccb2408c255c7ac32551fce09555903df3c93e44ba12287173bc901a4163a41ffec32b81f867f44007489899c7e329c8a777129d48ac4578b93740ae51fae56ce8c006cbec4dd74dab84e79cfb0a3294d96d2fd997231abddd633a620cccd27250f5c4a3ad94e8966c174a4eb5538cf9755a6c3d5ae8251bb857cc6964f6f3d1055a277f1d55cea82dd36812ffc6f80391b435de99b0d99573c89037d50e314f22b93dbe27d3af94f61fc43e68597a4aef7d43192882a045691c433d0631ffc44b4ad586f946e26f6fdca4b322f8865aa43e9675018590d5bd253b4ba5c46c39b205202cc386fec7fca1b26afddf6aa0e9bde940243dcc5f49f89af559f5e6702e98e3bdb1f9bddf276d7086e89ece9c225121147d631cf5d59f40fe9cb2f269cdb85e23d5cace73e97a69b5ea9e9abee979e91d4fe7d0faa4189345d180b491584867577556483a3651cd7c76b75e2a2cda20bd84f83e04fa36eb366bed3dbbebdda8bbc07b5417307351ef15e511e28e638eab2dac233967b2c5e3dd46d415a14c8898a9282d7288941064fe702479afb323c5a317f7b8b4b24e381b206cc428824b3d6189c96b082eec7d8e1509a149f1b2e0bda090184d3fbd52d1f14e07bba8eea3666f9dd3612e5552726765fad94d2f1f04cae930af29d0a3a468c5d4e440abffd47dc76ec75040be027484ee533fbfbeafb94bb0fe49ee7dd79926e8622f72a6eff48d5d8e2aaaf517f2c52d20f599f81a055cae9d9522701c0b2202379431780c181b1ed93299de9af039a315ddc448fe1991eac05f8ab260ac95ac8f53cd050d76acd3cfed18919d453348f2eb3ccebcdd05b1bafa5e4eb146a2289f054f36702a5a7dc85c766046a734806f45dc2ae54bcb8ba3156c79c3b4e4cdb010e645c9a7c0480e09c84ef6d01e85e37297e23470a8cd8055f468eaa4f8bc66e506685562c77e690a41c04042a80a7cf503508d28241b2fb34e3378301faa0244f610657480edd6e9ebe8e1818f7dd45f6d041b6a9c61ad98ce5e4e0356d66f6152dd7bfc3207dcdd1f3a24247d6d331b5f74bbd807c639fec36401e0171a8be3d691e61b97e5f2ada85a7ca297491cc9e49707b6de0c725f31d5d1efdf699c22ef6f3b93bd73049ce766ca7bd6ed3c740ed51624bce901d8837fcc358a5882858adb811311ae33a4de0961425389151a2cef7c56a4f123454365d97199152139a37c7e22ab7a6c17e3db3d892976ee8be2587b53beb5496a8685a0d43043feccb1592751851ebca76c4f87ecbd7381987de8714091c6e924ab2425e9e1fca31417bf504721e71b55e5bbd8a74e227fcb26f4b07b05a03441ec5d354887f39a79a8fe3ae382abb2494ee0e5be371cf290e6143b2a96ad5d9feef810c14f6c3ae29da8d6b88aae173ff1724f7e345fd8b3c786dd25b2be2b5348adea81026ee73b222759ecf479d84eb0f9e1c64b52dbdea8b55f1d3bc32e5f4cdb2fb3d968fef2f78829d84beffe094ababa8f1f10c72ea51b9042b6492abc128be0e4068fe096fcdf333c4c016afe1db6b41095806052fb2f60a74d74a143b9ea82663261d0444a34927b88cb9fecfc72cbd845736a93356bf140b8599a1fec3a2ae5e5d2fd9311a4c07c9a1325585b0462f37cdd3a43d072eafe2d13c5d080e6e8088e114d68c22a401ea9d7268d3afbf6efb96202b580550c9cd31571a566cecf3711e41917508f2c62604bcb055772d43f0b1daa271312883bf7e69826678aaaa093012ea64a83da9842fd747961fdd08e5bab758306785ce79a0126611584f97904f2bd29b47fffb0a579c3fdebf54e3e80d86917c7bc00ce20cc27e188d2381bc840a353597e0f1d1f25f068a05af3d80c0bd818b6be5a78d22129e0b5557708d880877071c0cf469368725ecc5236d74944ef6828b5e39de45896911c47a63d6021aa766b01c444d14a76f61cc07e84684ce5917b894e9aba9cb8a94f6ec683fbc56df2ac5b7997edb875468c07d8ab9f2f13cb2a15d6f6f3c62fcb1917ce46af8bf4a99242a880256a873dfb66482114409ce8427c3f27d5f7e10c46bb235864cd3a21643474b22cdff909ae8b4e743163afe03625015980a9e94ea7a1c31e74c73bb957239f55febb3a261352720dd0a39978966dad8eb397cfb8e3e05ae907ed48d051ce725e7e96dbd7798eac98a2468f604fdafb6a580cfa80be0b6ac01ccc118aab6b32159740c2bcb9cdd2090fbb97d93f566c041879ddb26947aaf5fedcff612c06bc91958022f483bdd4b684d025dd3dbd5a6223540724ed768eca087eaff99e0d307b6c538c0904193e0fb5fe52384c5b0c8677f3ddba34ab20d57e47776d124ed06af29f330c9e99357d92c5901e0429dd0ebe8c012e3401c85e044ddd2be1dc96abbb10b9690e48a3bfd853e00e169f1f6e9a6b1aef06c883641eb35fedc8a62b6e64cb02baba07dc869e61d9c5a64f00a2fc051fac1ab6abd6e4ed7a82796ffd8be88e491aa2aa5c81b469ba753bb4e86b6b422ce319822552b12f615fdf158569029a1b22fb2626e77233c7deb54da41da62ab53bddc2c5055669d673fa7ac2655941ddb2ab4b7b7260e1a9284f8d494cf6deffa8e0fa49be6c6d145fbbcd07116bdb91ad9b5b056e63309ac0645f7acb2469fe86aba663a935ba43e7fcbfe8e101bbdede810fb3a0dcea7cc07c3607442f92f8f751a3ab48878fa5480c0dc4694ea160399d5f303189daeb76aa7ab3150a5d96db51fe0c0609d278458e0f8d3aced0342eedf7b2a1c4f11b597256e36e1e543d2ab832aa2f80a5c03536a7271b384371c0ce83860e6221686d5fbdbaf139111a50c99724d9aa61f4466672e108ae56f180c77f62bbff7200056245b76de724b6bcc0675619fcb5175b54957252745cb78ce3b86249dd930acad84b26a799f140d1f5f49c50d5e69a6c2d5ab16af5df0e8d0c60440f62594f82b703fc17b361a3b9c3ec16d843238b4f6b0713240e3751e597c6b01d970f1c889d674ef9beafe5636f0d8fef9b0e424b12c1da967514a91284d34c0137d7c9f1911d5f15a8cecbc3025abef7b4ad70c8bd4bf8bd2460f8f08e2f33e9a67846b02b2e98f68da02b9bb48684a5ff6ce20afb3da9f89c843395d257a823afb87747b04a9c57b8e2005c8707a73286caf1d6af5c712975b9afc8d79aa3cbc8ecfa1b7b534963dff1771070040256f79f9640790b7b75219a36c4c11d90bd30728919aa09c50572d1a56beaecd698b690f9b4ba644bd7e7a6ec435875df1b836933a1057d5c0ca4fe5a6bfd64f1554cf2ded64f6e4abc264253750c9c1eed75481ff083fd03ead4cd003654b678c33e5bd01055de700286abac888bbe03281c84c7b9f5644643dad521318cc06ec45034a65aeecfc0f1c18ef5e355a733b126942e699910b9d890475c7c54d9d97ef5ea749e5301274e00c9eb1171c25351741ac368e6e0dc05e2e9b750</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Skills</category>
      </categories>
      <tags>
        <tag>Writting</tag>
      </tags>
  </entry>
  <entry>
    <title>Learn Markdown</title>
    <url>/2022/03/17/Learn-Markdown/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#markdown-%E6%98%AF%E4%BB%80%E4%B9%88">Markdown 是什么？</a><ul>
<li><a href="#%E6%88%91%E7%9A%84%E7%90%86%E8%A7%A3">我的理解：</a></li>
</ul>
</li>
<li><a href="#%E5%88%9B%E5%BB%BA%E5%92%8C%E6%9F%A5%E7%9C%8B">创建和查看</a><ul>
<li><a href="#%E5%88%9B%E5%BB%BA%E7%BC%96%E8%BE%91md%E6%96%87%E6%A1%A3">创建编辑.md文档。</a></li>
<li><a href="#%E5%B1%95%E7%A4%BAmd%E7%9A%84%E6%95%88%E6%9E%9C">展示.md的效果。</a></li>
<li><a href="#%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8">常用的编辑器</a></li>
</ul>
</li>
<li><a href="#%E5%B8%B8%E8%A7%81%E7%9A%84md%E4%B9%A6%E5%86%99%E8%A7%84%E5%88%99">常见的MD书写规则</a><ul>
<li><a href="#%E6%96%87%E7%AB%A0%E9%A2%98%E7%9B%AE">文章题目。</a></li>
<li><a href="#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">文章目录。</a></li>
<li><a href="#%E6%A0%87%E9%A2%98">标题</a></li>
<li><a href="#%E6%AE%B5%E8%90%BD%E6%8D%A2%E8%A1%8C">段落／换行</a></li>
<li><a href="#%E5%88%86%E5%89%B2%E7%BA%BF">分割线</a></li>
<li><a href="#%E5%88%97%E8%A1%A8">列表</a></li>
<li><a href="#%E5%BC%95%E7%94%A8">引用</a></li>
<li><a href="#%E5%BC%BA%E8%B0%83">强调</a></li>
<li><a href="#%E8%BE%85%E5%8A%A9%E7%BA%BF">辅助线</a></li>
<li><a href="#%E8%A1%8C%E5%86%85%E4%BB%A3%E7%A0%81-%E5%9D%97%E4%BB%A3%E7%A0%81">行内代码 块代码</a></li>
<li><a href="#%E8%B6%85%E9%93%BE%E6%8E%A5">超链接</a></li>
<li><a href="#%E5%9B%BE%E7%89%87">图片</a></li>
<li><a href="#%E8%A1%A8%E6%A0%BC">表格</a></li>
<li><a href="#%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8">任务列表</a></li>
<li><a href="#%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7">特殊符号</a></li>
<li><a href="#%E5%85%B3%E4%BA%8E-%E5%AD%97%E4%BD%93-%E9%A2%9C%E8%89%B2-%E5%AD%97%E5%8F%B7-%E5%AF%B9%E9%BD%90-%E4%B8%8B%E5%88%92%E7%BA%BF">关于 字体 颜色 字号 对齐 下划线</a></li>
<li><a href="#%E6%9B%B4%E5%A4%9A%E7%9A%84">更多的</a></li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要想写一篇格式清楚，样式精美的文章，在以前需要先写内容，然后再润色样式。这种方式很大程度上影响内容的输出，而且样式在各平台的不统一。<br>如何只要关注内容，而不必关注样式，并且样式能在各个平台兼容？markdown是一种不错的选择。熟悉了markdown书写规则之后，就能不被样式束缚，可以只关注于内容，而且现在多个平台上基本都支持md，样式也基本标准统一。所以，我们在输出内容时，也能输出统一标准精美的样式（md的样式基本是统一标准的）。这种的方式非常适合于技术博客。</p>
<h2 id="Markdown-是什么？"><a href="#Markdown-是什么？" class="headerlink" title="Markdown 是什么？"></a>Markdown 是什么？</h2><blockquote>
<p>Markdown 是一种轻量级标记语言，创始人是约翰・格鲁伯（John Gruber）。它允许人们 “使用易读易写的纯文本格式编写文档，然后转换成有效的 HTML 文档”。<br>—— 维基百科。</p>
</blockquote>
<blockquote>
<p>Markdown 简化了 HTML 的语法，使得大多数人都可以轻松地完成文档排版；<br>Markdown 的基础排版功能，如标题、段落、加重等功能，不要求使用者有其他技能基础；<br>Markdown 的基础样式功能，如字体、字号、颜色等，需要使用者有 HTML &amp; CSS 基础。</p>
</blockquote>
<p>markdown 原理 <a href="https://juejin.cn/post/6844903834041450510">链接</a>, <a href="https://zhuanlan.zhihu.com/p/99319314">链接</a></p>
<h3 id="我的理解："><a href="#我的理解：" class="headerlink" title="我的理解："></a>我的理解：</h3><ul>
<li><p>md 是一种轻量级标记语言，创始人是约翰・格鲁伯（John Gruber）。它允许人们 “使用易读易写的纯文本格式编写文档，然后转换成有效的 HTML 文档”。 .md文件是md标记语言编写的。 语法：有其md特殊的标记(如# * 等)，它也支持所有的html标记(即在.md文档中直接使用html的所有标签)。实际上，md的展示过程，是 md处理器&#x2F;引擎 处理md特殊标记 然后编译转化输出html文档，然后再渲染html进行展示（对于html标记不做处理 原样转化）。 所以一些可以展示md的编辑器／软件 实际上是有md引擎以及html渲染引擎的。</p>
</li>
<li><p>Markdown 语法支持嵌入原始的 HTML 标记语言，支持 CSS 样式。  </p>
</li>
<li><p>所以你理解html 就能理解md。因为最后渲染成html的。知道html的样式 效果，就能知道md标签的含义和最后效果。  md使得你专注内容，而不是那些样式等。  </p>
</li>
<li><p>学习md 既能加深html的理解，以及展示的效果， 还能学到排版 样式 等知识。  </p>
</li>
<li><p>如何学习这么多的md规则？ 实际上md文档就是为了写文章，文章中主要有什么？你清楚了文章主要有什么，那么就能很快掌握md相应的书写规则。<br>你想想文章 都有什么 或 排版都有什么：  </p>
<ul>
<li>结构：文章题目，目录， 各个标题 小标题 。 正文(由段落组成)，常用的图表，图片，链接，代码块 等。</li>
<li>样式&#x2F;格式： 字体，字号，颜色，对齐， 斜体，加粗，下划线，删除线 等等。</li>
</ul>
<p>这些都对应着响应的md书写规则。 只要你对文章的结构 排版都清楚，那么学起md就非常得心应手。</p>
</li>
</ul>
<p>markdown 太轻便了，学会了，使用起来非常舒服，优雅。 任何时刻，都可以写（毕竟时纯文本形式）。<br>学会简单的规则，就能写出很好的文档。 不需要用那些复杂的文本编辑软件等。</p>
<pre class="line-numbers language-none"><code class="language-none">文章 排版结构：
1.前面目录。 [TOC]
2.层次 逻辑分清楚。 段落／主题， section，小节。
3.各个段落／主题 之间的关联。
4.字体 颜色 样式。 着重： 标红 放大 加粗 斜体 下划线。  代码块。 表格。 图片插入。分点样式等。
写作有时候 虽然文笔不好，但是 能将逻辑、 结构、步骤弄清楚 也是一篇不错的合格的文章。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="创建和查看"><a href="#创建和查看" class="headerlink" title="创建和查看"></a>创建和查看</h2><h3 id="创建编辑-md文档。"><a href="#创建编辑-md文档。" class="headerlink" title="创建编辑.md文档。"></a>创建编辑.md文档。</h3><p>任何编辑器都可以创建.md文件。 .md文件实际上就是纯文本文件，因此可以用任何编辑器编辑。所以 只要你学会md的书写，那么你就可以何时何地，不受工具限制，进行文章创作。</p>
<h3 id="展示-md的效果。"><a href="#展示-md的效果。" class="headerlink" title="展示.md的效果。"></a>展示.md的效果。</h3><p>需要编辑器／软件 1.支持.md的解析，2.以及html的渲染，展示最终效果，否则只能看到纯文本的源文件。 </p>
<h3 id="常用的编辑器"><a href="#常用的编辑器" class="headerlink" title="常用的编辑器"></a>常用的编辑器</h3><p>用于展示和编辑的编辑器有Typora， vscode(安装相应插件)。</p>
<h2 id="常见的MD书写规则"><a href="#常见的MD书写规则" class="headerlink" title="常见的MD书写规则"></a>常见的MD书写规则</h2><p>注意 书写规则中MD标记 前后空格。 如</p>
<pre class="line-numbers language-none"><code class="language-none">#无效的标题. 因为和#连在一起。
# 有效的标题。
1.无效的有序列表。 
1. 有效的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="文章题目。"><a href="#文章题目。" class="headerlink" title="文章题目。"></a>文章题目。</h3><p>这个没什么说的。H1.</p>
<h3 id="文章目录。"><a href="#文章目录。" class="headerlink" title="文章目录。"></a>文章目录。</h3><ol>
<li>[TOC] 自动生成目录。 不过有些md编辑器无法显示。  </li>
<li>手动。 需要手动更新。 不过有些编辑器可以插件生成，比如vscode。<pre class="line-numbers language-none"><code class="language-none">- [一级标题](#一级标题)
  - [标题 1-1](#二级标题 1-1)
  - [标题 1-2](#二级标题 1-2)
- [二级标题](#二级标题)
  - [标题 2-1](#二级标题 2-1)
  - [标题 2-2](#二级标题 2-2)
- [一级标题](#一级标题)
  - [标题 1-1](#二级标题 1-1)
  - [标题 1-2](#二级标题 1-2)
- [二级标题](#二级标题)
  - [标题 2-1](#二级标题 2-1)
  - [标题 2-2](#二级标题 2-2)

# 一级标题
一些内容……
## 二级标题 1-1
一些内容……
## 二级标题 1-2
一些内容……
# 二级标题
一些内容……
## 二级标题 2-1
一些内容……
## 二级标题 2-2
一些内容……
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>使用 #。对应 html中h1～h6.<br>标题是组织文章结构的最好方式。<br>Markdown 的标题定义方式，不用担心标题格式混乱，文章始终保持结构性，作为创作者，只需要关心内容即可。在某些 Markdown 编写工具中，标题也可用于自动生成目录树或大纲。<br>标题 目录 也是文章的逻辑、 结构、 思维导图。</p>
<pre class="line-numbers language-none"><code class="language-none"># 这是一个标题
## 这是一个标题
### 这是一个标题
#### 这是一个标题
##### 这是一个标题
###### 这是一个标题
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="段落／换行"><a href="#段落／换行" class="headerlink" title="段落／换行"></a>段落／换行</h3><p>分段  </p>
<ol>
<li>用空行。 没有空行，那么都算一个段落中。  </li>
<li>后面加两个空格，再按enter，那么渲染的时候就会换行。 否则计算源文件enter换行，渲染后还是再同一行.(不分段的换行)</li>
</ol>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><pre class="line-numbers language-none"><code class="language-none">下面是三类分割线

使用「星号」作为分割线

***

使用「减号」作为分割线

---

使用「下划线」作为分割线
___
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>无序列表， 有序列表。html中的 ul ol</p>
<pre class="line-numbers language-none"><code class="language-none">### 无序列表

使用星号生成无序列表

* 项目1
* 项目2
* 项目3

使用加号生成无序列表

+ 项目1
+ 项目2
+ 项目3

使用减号生成无序列表

- 项目1
- 项目2
- 项目3
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">
### 有序列表
使用数字实现有序列表

1. 项目1
2. 项目2
3. 项目3

源码中的数字与渲染后的数字并不一一对应，但可以决定列表的开始序号

例如，让 Markdown 渲染器自动安排序号：

0. 项目1
0. 项目2
0. 项目3

让有序列表以 “2” 开头：

2. 项目1
1. 项目2
0. 项目3
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>行首加入&gt;</p>
<blockquote>
<h4 id="块引用里的标题"><a href="#块引用里的标题" class="headerlink" title="块引用里的标题"></a>块引用里的标题</h4><p>多行引用<br>hello</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">### 块引用的特殊样式

&gt; #### 块引用里的标题
&gt;
&gt; 块引用里的 **重点文字**
&gt;
&gt; 块引用里的列表
&gt; - 项目1
&gt; - 项目2
&gt; - 项目3
&gt;
&gt; 块引用里的表格
&gt;
&gt; |a|b|
&gt; |---|---|
&gt; |c|d|
&gt;
&gt; 块引用里的分割线
&gt; ___
&gt;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p><em><strong>标准的粗斜体</strong></em><br><em>斜体</em><br><strong><em>用粗体包含斜体的粗斜体</em></strong><br><em><strong>用粗体包含斜体的粗斜体</strong></em>   </p>
<pre class="line-numbers language-none"><code class="language-none">### 强调语法的组合应用

- 默认的粗斜体

  ***标准的粗斜体***

- 用粗体包含斜体

  **_用粗体包含斜体的粗斜体_**

- 用斜体包含粗体的粗斜体

  *__用粗体包含斜体的粗斜体__*
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="辅助线"><a href="#辅助线" class="headerlink" title="辅助线"></a>辅助线</h3><p><del>这是一条删除线</del></p>
<pre class="line-numbers language-none"><code class="language-none">### 中划线语法

这是一个删除线

~~这是一条删除线~~

当删除线内部紧跟 &quot;空格&quot; 时，删除线效果会失效。

~~有效的删除线~~

~~失效的删除线 ~~

~~ 失效的删除线 ~~

~~ 失效的删除线~~
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="行内代码-块代码"><a href="#行内代码-块代码" class="headerlink" title="行内代码 块代码"></a>行内代码 块代码</h3><pre class="line-numbers language-none"><code class="language-none">行内 用 &#96;&#96; 包起来。  

块 用&#96;&#96;&#96; 包起来。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><pre class="line-numbers language-none"><code class="language-none">#### 声明超链接

一对中括号就可以将文字转换为超链接，如: [北京](https:&#x2F;&#x2F;)，[上海]()，[广州]()，[深圳]()

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><code>![替换文字](图片路径 &quot;标题(可选)&quot;)</code></p>
<pre class="line-numbers language-none"><code class="language-none">#### 插入一张图片

图片前的文字。

![](https:&#x2F;&#x2F;tva3.sinaimg.cn&#x2F;crop.0.0.180.180.180&#x2F;6d04a77djw1e8qgp5bmzyj2050050aa8.jpg?KID&#x3D;imgbed,tva&amp;Expires&#x3D;1588529780&amp;ssig&#x3D;vNCcwnltm2)

图片后的文字
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><pre class="line-numbers language-none"><code class="language-none">#### 定义表格

|学号|姓名|
|----|----|
|1|张三|
|2|李四|
|3|王五|
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><pre class="line-numbers language-none"><code class="language-none">在 Markdown 文件中，在 &quot; 无序列表 -,+,* &quot; 后面使用 「中括号 []」 声明复选框。在中括号中写入 x ，便可实现选中效果。

#### 复选框 checkbox

- [ ] Java
- [x] Php
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><p>使用转义 *  &gt;.<br>只用特殊的字符遇到\ 才能转义，其他的还是原样输出，如 \x</p>
<h3 id="关于-字体-颜色-字号-对齐-下划线"><a href="#关于-字体-颜色-字号-对齐-下划线" class="headerlink" title="关于 字体 颜色 字号 对齐 下划线"></a>关于 字体 颜色 字号 对齐 下划线</h3><p>由于md只关注内容本身，并不关注样式，因此要做这些的话，可以通过html标签去实现。<br>比如:<br><font color='red'> 红色字体 </font><br><u>下划线</u>  </p>
<div style="text-align:center">我剧中了何厚铧德士古时代感和 i 时代公司丢个合适的个合适的根深蒂固的宿舍大概还是低谷 </div> 
<div style="text-align:left">左对齐</div>  
<div style="text-align:center">右对齐</div> 



<h3 id="更多的"><a href="#更多的" class="headerlink" title="更多的"></a>更多的</h3><p>可以参考 <a href="https://www.imooc.com/wiki/markdownlesson/markdownoverview.html">慕课网教程</a><br>这个教程做的很不错。文章的结构和逻辑 非常清晰明了。（要多学习这种技术文章的技巧，排版，结构，逻辑）</p>
]]></content>
      <categories>
        <category>Skills</category>
      </categories>
      <tags>
        <tag>writting</tag>
      </tags>
  </entry>
  <entry>
    <title>coder-copyright</title>
    <url>/2022/03/21/coder-copyright/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>不管是轮子程序员，cv程序员，还是md程序员(今天新学名词)，总会遇到版权相关的问题。<br>这里从网络上找到的资料做一个梳理，并介绍相关的使用方式。</p>
<h2 id="版权"><a href="#版权" class="headerlink" title="版权"></a>版权</h2><p>程序员常常用到的主要是两种版权：  </p>
<ul>
<li>开源代码版权<ul>
<li>代码相关</li>
</ul>
</li>
<li>知识共享版权(CC: Creative Commons)<ul>
<li>文章相关</li>
</ul>
</li>
</ul>
<h2 id="开源源代码版权"><a href="#开源源代码版权" class="headerlink" title="开源源代码版权"></a>开源源代码版权</h2><ol start="0">
<li>各种版权协议(MIT BSD GPL等)。含义，如何选择。 <a href="https://zhuanlan.zhihu.com/p/340135415">链接</a></li>
<li>如果自己版权，如何声明。<br> 在项目下声明 LICENSE.md 文件 或 LICENSE文件，可以将对应协议全部内容复制。比如：<a href="https://github.com/4refr0nt/luatool">这样</a>。 也可以在LICENSE文件或readme.md中指明协议，以及协议链接(即协议内容)，比如：<a href="https://github.com/yannecer/NCalendar">这样</a>。 (其实只要有一个地方能声明是什么协议就好了，至于什么形式都可以)。具体如何选择以及相应的文本 见<a href="https://choosealicense.com/appendix/">链接</a> </li>
<li>如果使用别人，应该如何注明。<br> 如果用他人项目，你可以将他人的license放到自己目录下。 或者 在源文件中指明该文件或项目是 谁的，什么协议，项目链接等。 （其实只要一个地方声明是引用谁的就好了，至于什么形式都可以）<a href="https://segmentfault.com/q/1010000000126507">链接</a></li>
</ol>
<h2 id="知识共享版权。"><a href="#知识共享版权。" class="headerlink" title="知识共享版权。"></a>知识共享版权。</h2><ol>
<li>CC的各种形式(BY NC ND等)。含义，如何选择。 <a href="https://zhuanlan.zhihu.com/p/20641764">知识共享</a></li>
<li>如果自己版权，如何声明。<br> (在文章开头 或 结尾 声明协议 (以及协议的链接 可选)) 具体可参考本博客下的cc声明部分。</li>
<li>如果使用别人，应该如何注明。<br> (在相应地方注明 作者 ，协议， 链接等) 比如: <code> 图/作者，采用 CC BY 4.0 协议授权』</code></li>
</ol>
]]></content>
      <categories>
        <category>Writting</category>
      </categories>
      <tags>
        <tag>版权</tag>
      </tags>
  </entry>
  <entry>
    <title>X86汇编语言</title>
    <url>/2022/04/27/X86%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>汇编 推荐两本书：<br>《X86汇编 从实模式到保护模式》<br>《汇编语言(第3版) 》王爽著</p>
<p>实模式：<br><a href="https://blog.csdn.net/zzzzzec/article/details/121311995">https://blog.csdn.net/zzzzzec/article/details/121311995</a></p>
<p>笔记：<br>ROM 程序固化到ROM的。<br>对于PC的主板而言，BIOS&#x2F;UEFI 就是固化到ROM里的，是固件。 以前是不可擦写的，现在也是可编程 可擦写的。 即可以刷机新的BIOS或升级BIOS到ROM的。<br>计算机启动的时候，会先读取BIOS，完成硬件的自检和初始化。然后BIOS将权限交由启动的硬盘或光盘等。运行硬盘中的MBR&#x2F;GPT。 MBR再去启动OS。 （我们安装的OS是安装到硬盘上，并且设置MBR）<br>PC中的bootloader是MBR／GPT 中的grub／grub2。<br>嵌入式中的bootloader（固件）  作用相当于PC中的 BIOS+MBR。也有做硬件自检。</p>
<p>MBR中记录 开机启动程序／开机管理程序。 有grub,grub2,LILO 等。 </p>
<pre class="line-numbers language-none"><code class="language-none">1. 载入 BIOS 的硬件信息与进行自我测试，并依据设置取得第一个可开机的设备；
2. 读取并执行第一个开机设备内 MBR 的 boot Loader （ 亦即是 grub2, spfdisk 等程序） ；
3. 依据 boot loader 的设置载入 Kernel ，Kernel 会开始侦测硬件与载入驱动程序；
4. 在硬件驱动成功后，Kernel 会主动调用 systemd 程序，并以 default.target 流程开机；
systemd 执行 sysinit.target 初始化系统及 basic.target 准备操作系统；
systemd 启动 multi-user.target 下的本机与服务器服务；
systemd 执行 multi-user.target 下的 &#x2F;etc&#x2F;rc.d&#x2F;rc.local 文件；
systemd 执行 multi-user.target 下的 getty.target 及登陆服务；
systemd 执行 graphical 需要的服务
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>存储分类：<a href="https://blog.csdn.net/vincent3678/article/details/122226578">https://blog.csdn.net/vincent3678/article/details/122226578</a><br>（内&#x2F;主存+外&#x2F;辅存） （pc：内存 + 硬盘）（手机：运存+内存&#x2F;闪存 (说法乱而已，其实还是 内+外)）</p>
<p>CPU可用的内存空间，不仅仅是常规的内存(由内存条提供，RAM，掉电易失)，还有BIOS(ROM,不易失)，显卡等。</p>
<p>从内存空间去理解计算机和操作系统。因为cpu所有的指令 数据都要放在内存空间中才能处理。 冯诺依曼体系结构中，cpu所有的数据 指令都要从内存空间中取得的。核心就是CPU和内存。<br>如果要想知道程序如何load到内存，如何被cpu执行， 学习汇编是很好的选择，因为汇编能更好体现这些底层。</p>
<p>一段程序 逻辑上 分为 堆段，代码段，栈段，数据段，BSS段。<br>虚拟内存， 物理内存。 </p>
<p>如何让计算机启动的时候执行我们的代码？<br>实模式。<br>我们知道， 8086 可以访问 1MB 内存。其中，0x00000～9FFFF 属于常规内存，由内存条提供；0xF0000～0xFFFFF<br>由主板上的一个芯片提供，即ROM-BIOS。中间还有一个320KB 的空洞，即0xA0000～0xEFFFF。<br>传统上，这段地址空间由特定的外围设备来提供，其中就包括显卡。</p>
<p>我们知道，计算机启动的时候，将ROM中的BIOS的代码加载到内存中(0XF0000)，然后BIOS进行自检后，会将硬盘的MBR代码加载到内存地址0x7c00,并jmp到该地址，从而运行MBR代码，之后MBR再执行操作系统的代码。<br>MBR是硬盘上的硬盘的0面0道1扇区。512B。 别小看512B，它足够处理操作系统的boot。它可以选择启动哪个os。将os启动的代码载入内存某个地址，cpu并跳到该内存地址，开始运行os启动代码。<br>所以，如果我们要启动的执行我们的代码，我们应该将自己的代码编译后放入硬盘的第一个512B，代替MBR。</p>
<p>地址 <code>[地址]</code> 表示取该地址中的值<br>立即数<br>8086 寄存器：8个通用寄存器(AX,BX,CX,DX,SI,DI,BP,SP)， 6个段寄存器(CS,DS,SS,ES,FS,GS)， 程序寄存器(IP),标志寄存器(FLAGS)<br>以上都是16位的，32位的寄存器在前面加E。<br><a href="https://zhuanlan.zhihu.com/p/366550341">https://zhuanlan.zhihu.com/p/366550341</a><br><a href="https://blog.csdn.net/weixin_44519342/article/details/123690618">https://blog.csdn.net/weixin_44519342/article/details/123690618</a></p>
<p>指令：MOV JMP<br>（不同体系的CPU中的寄存器，指令等也是不一样的。）<br>MOV指令无法直接将立即数移动到段寄存器，只能经过通用寄存器来做。<br>也无法将段寄存器移动到段寄存器，只能通过通用寄存器来做。</p>
<p>每个指令都会对应相应的机器指令。</p>
<p>JMP指令会改变CS， IP <a href="https://blog.csdn.net/woxueliuyun/article/details/2033359">https://blog.csdn.net/woxueliuyun/article/details/2033359</a></p>
<p>div中溢出的问题，<a href="https://blog.csdn.net/u010196648/article/details/25067179">https://blog.csdn.net/u010196648/article/details/25067179</a></p>
<p>第一种类型是用16 位的二进制数除以8 位的二进制数。在这种情况<br>下，被除数必须在寄存器AX 中，必须事先传送到AX 寄存器里。除数可<br>以由8 位的通用寄存器或者内存单元提供。指令执行后，商在寄存器AL<br>中，余数在寄存器AH 中。</p>
<p>第二种类型是用32 位的二进制数除以16 位的二进制数。在这种情况<br>下，因为16 位的处理器无法直接提供32 位的被除数，故要求被除数的<br>高16 位在DX 中，低16 位在AX 中 。同时，除数可以由16 位的通用寄存器或者内存单元提供，指令执行<br>后，商在AX 中，余数在DX 中。</p>
<p>XOR 指令</p>
<p>add 指令需要两个操作数，目的操作数可以是8 位或者16 位的通用<br>寄存器，或者指向8 位或者16 位实际操作数的内存地址；源操作数可以<br>是相同数据宽度的8 位或者16 位通用寄存器、指向8 位或者16 位实际操<br>作数的内存地址，或者立即数，但不允许两个操作数同时为内存单元。<br>相加后，结果保存在目的操作数中</p>
<p>处理器取指令、执行指令是依赖于段寄存器CS 和指令指针寄存器IP<br>的，8086 处理器取指令时，把CS 的内容左移4 位，加上IP 的内容，形<br>成20 位的物理地址，取得指令，然后执行，同时把IP 的内容加上当前指<br>令的长度，以指向下一条指令的偏移地址。</p>
<p>jmp 指令具有多种格式.<br>相对近转移。 JMP near inif<br>绝对地址. JMP 0x5000:0xf0c0</p>
<p>伪指令times 可用于重复它后面的指令若干次</p>
<p>times 20 mov ax,bx</p>
<p>bochs:<br><a href="https://bochs.sourceforge.io/">https://bochs.sourceforge.io/</a><br><a href="https://bochs.sourceforge.io/doc/docbook/user/faq.html">https://bochs.sourceforge.io/doc/docbook/user/faq.html</a><br><a href="https://blog.csdn.net/weixin_47656385/article/details/120624117">https://blog.csdn.net/weixin_47656385/article/details/120624117</a><br>具体实用可参考书第五章。</p>
<p>movsb 和movsw 指令执行时，原始数据串的段地址由DS 指定，偏<br>移地址由SI 指定，简写为DS:SI；要传送到的目的地址由ES:DI 指定；传<br>送的字节数（movsb）或者字数（movsw）由CX指定。除此之外，还要<br>指定是正向传送还是反向传送，正向传送是指传送操作的方向是从内存<br>区域的低地址端到高地址端；反向传送则正好相反。正向传送时，每传<br>送一个字节（movsb）或者一个字（movsw），SI 和DI 加1 或者加2；<br>反向传送时，每传送一个字节（movsb）或者一个字（movsw）时，SI<br>和DI 减去1 或者减去2。不管是正向传送还是反向传送，也不管每次传送<br>的是字节还是字，每传送一次，CX 的内容自动减。</p>
<p>cld 指令将DF 标志清零，以指示传送是正<br>方向的。和cld 功能相反的是std 指令，它将DF标志置位（1）。此时，<br>传送的方向是从高地址到低地址</p>
<p>需要加上指令前缀rep（repeat），意思是CX 不为零则重复。<br>rep movsw 的操作码是0xF3 0xA5，它将重复执行movsw 直到CX 的内<br>容为零。</p>
<p>loop 指令的功能是重复执行一段相同的代码，处理器在执行它的时<br>候会顺序做两件事：cx减1。 判断cx是否为0，不为0 loop。</p>
<p>加载位置的改变不会对处理器执行指令造成任何困扰，但会给数据访问<br>带来麻烦。要知道，当前<br>数据段寄存器DS 的内容是0x0000，因此，number 的偏移地址实际上是<br>0x012E+0x7C00&#x3D;0x7D2E。当正在执行的指令仍然用0x012E 来访问数<br>据，灾难就发生了。</p>
<p>取指令，取数据。逻辑地址，物理地址。（逻辑地址到物理地址要靠基址。）<br>对于取指令基址在CS，对于取数据基址在DS。<br>CS:IP<br>DS:偏移地址</p>
<p>地址，取地址(从该地址中取出数据)</p>
<p>内存 物理地址 &#x3D;  SA *16 + EA。 SA段地址， EA偏移地址&#x2F;有效地址 Effective address。 Offset Address。</p>
<p>SA和EA 称为逻辑地址。<br>物理地址。 逻辑地址。 段地址， 偏移地址&#x2F;有效地址。 </p>
<p>在8086 处理器上，如果要用寄存器来提供偏移地址，只能使用BX、<br>SI、DI、BP，不能使用其他寄存器。<br>原因很简单，寄存器BX 最初的功能之一就是用来提供数据访问的基<br>地址，所以又叫基址寄存器（Base Address Register）。之所以不能用<br>SP、IP、AX、CX、DX，这是一种硬性规定，说不上有什么特别的理<br>由。而且，在设计8086 处理器时，每个寄存器都有自己的特殊用途，比<br>如AX是累加器（Accumulator），与它有关的指令还会做指令长度上的<br>优化（较短）；CX 是计数器（Counter）；DX 是数据（Data）寄存<br>器，除了作为通用寄存器使用外，还专门用于和外设之间进行数据传<br>送；SI 是源索引寄存器（ Source Index）；DI 是目标索引寄存器<br>（ Destination Index），用于数据传送操作，我们已经在 movsb 和<br>movsw 指令的用法中领略过了。</p>
<p>inc 是加一指令，操作数可以是8<br>位或者16 位的寄存器，也可以是字节或者字内存单元。从功能上讲，它<br>和 add bx, 1<br>是一样的，但前者的机器码更短，速度更快.<br>和inc 指令相对的是dec 指令，用于将目标操作数的内容减一，它们<br>的指令格式相同，不再赘述.</p>
<p>neg 指令带有一个操作数。它的功能很简单，用0 减去指令中指定的操作数。 （就是取相反数）。</p>
<p>很显然，一个8 位的有符号数，要想用16 位的形式来表示，只需将<br>其最高位，也就是用来辨别符号的那一位（几乎所有的书上都称之为符<br>号位，实际上这并不严谨），扩展到高8 位即可。<br>为了方便，处理器专门<br>设 计 了 两 条 指 令 来 做 这 件 事 ： cbw （ Convert Byte to Word ） 和<br>cwd（Convert Word to Double-word）。<br>cbw 没有操作数，操作码为98。它的功能是，将寄存器AL 中的有符<br>号数扩展到整个AX。举个例子，如果AL 中的内容为01001111，那么执<br>行该指令后，AX 中的内容为0000000001001111；如果AL 中的内容为<br>10001101，执行该指令后，AX 中的内容为1111111110001101。<br>cwd 也没有操作数，操作码为99。它的功能是，将寄存器AX 中的有<br>符 号 数 扩 展 到 DX:AX 。 举 个 例 子 ， 如 果 AX 中 的 内 容 为<br>0100111101111001 ， 那 么 执 行 该 指 令 后 ， DX 中 的 内 容 为<br>0000000000000000 ， AX 中 的 内 容 不 变 ； 如 果 AX 中 的 内 容 为<br>1000110110001011 ， 那 么 执 行 该 指 令 后 ， DX 中 的 内 容 为<br>1111111111111111，AX 中的内容同样不变。<br>尽管有符号数的最高位通常称为符号位，但并不意味着它仅仅用来<br>表示正负号。事实上，通过上面的讲述和实例可以看出，它既是数的一<br>部分，和其他比特一起共同表示数的大小，同时又用来判断数的正负。</p>
<p>主动权在你自己手上，在写程序的时候，你要做什么，什么目的，<br>你自己最清楚。如果是无符号数计算，必须使用div 指令；如果你是在做<br>有符号数计算，就应当使用idiv 指令</p>
<p>bx 也叫基址寄存器。存放某个地址 做为基址，相当于数组0开始的位置。索引SI，bx+si。<br>SI 的作用相当于索引，因此它被称为索引寄存器（Index Register），或者叫变址寄存器。<br>另一个常用的变址寄存器是DI。<br>注意，INTEL8086 处理器只允许以下几种基址寄存器和变址寄存器<br>的组合：</p>
<pre class="line-numbers language-none"><code class="language-none">[bx+si]
[bx+di]
[bp+si]
[bp+di]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这些组合可以用于任何带有内存操作数的指令中。其他任何组合，<br>比如[bx+ax]、[cx+dx]、[ax+cx]等等，都是非法的</p>
<p>指令jns show 的意思是，如果未设置符号位，则转<br>移到标号“show”所在的位置处执行。如图6-2 所示，Intel 处理器的标志<br>寄存器里有符号位SF（Sign Flag），很多算术逻辑运算都会影响到该<br>位，比如这里的dec 指令。如果计算结果的最高位是比特“0”，处理器把<br>SF 位置“0”，否则SF 位置“1”。</p>
<p>jns 是条件转移指令，处理器在执行它的时候要参考标志寄存器的SF<br>位。除了只是在符合条件的时候才转移之外，它和jmp 指令很相似，它<br>也是相对转移指令，编译后的机器指令操作数也是一个相对偏移量，是<br>用标号处的汇编地址减去当前指令的汇编地址，再减去当前指令的长度<br>得到的。</p>
<p>在处理器内进行的很多算术逻辑运算，都会影响到标志寄存器的某<br>些位。比如我们已经学过的加法指令add、逻辑运算指令xor 等.</p>
<p>奇偶标志位PF<br>当运算结果出来后，如果最低8 位中，有偶数个为1 的比特，则<br>PF&#x3D;1；否则PF&#x3D;0.</p>
<p>进位标志CF<br>当处理器进行算术操作时，如果最高位有向前进位或借位的情况发<br>生，则CF&#x3D;1；否则CF&#x3D;0.<br>CF 标志始终忠实地记录进位或者借位是否发生，但少数指令除外<br>（如inc 和dec）.<br>加1指令 INC指令功能:目标操作数+1INC指令只有1个操作数，它将指定的操作数的内容加1，再将结果送回到该操作数。INC指令将影响SF,AF,ZF,PF,OF标志位，但是不影响CF标志位。INC指令的操作数的类型可以是通用寄存器或存储单元，但不可以是段寄存器。字或字节操作均可。对于存储单元，需要用BYTE PTR或者WORD PTR说明是字节还是字操作。<br>为什么不影响CF：<a href="https://blog.csdn.net/weixin_43705457/article/details/106460924">链接</a></p>
<p>OF，该标志的意思是，假定你进行的是有符号数运算，如果运算结果是<br>正确的，那么OF&#x3D;0，否则OF&#x3D;1。比如上面的例子，因为从有符号数的<br>角度来看，是-1 和2 相加，结果为1，未溢出，故OF&#x3D;0。简单地说，OF<br>标志用于指示两个有符号数的运算结果是否错误。</p>
<p>指令对标志位的影响：<br><img src="/imgs/20220429_1.png"></p>
<p>“jcc”不是一条指令，而是一个指令族（簇），功能是根据某些条件<br>进行转移，比如前面讲过的jns，意思是SF≠1（那就是SF&#x3D;0 了）则转<br>移.<br>转移指令必须出现在影响标志的指令之后.<br>在汇编语言源代码里，条件转移指令的操作数是标号。编译成机器<br>码后，操作数是一个立即数，是相对于目标指令的偏移量。在16 位处理<br>器上，偏移量可以是8 位（短转移）或者16 位（相对近转移）</p>
<p>NASM 编译器提供了一个标记“$”，该标记等同于标号，你<br>可以把它看成是一个隐藏在当前行行首的标号。因此，jmp near $的意思<br>是，转移到当前指令继续执行。<br>$是当前行的汇编地址；$$是NASM 编译器提供的另一个标记，代<br>表当前汇编节（段）的起始汇编地址。</p>
<p>中断：</p>
<ul>
<li>外部中断 ／ 硬件中断<ul>
<li>可屏蔽中断</li>
<li>不可屏蔽中断</li>
</ul>
</li>
<li>内部中断 ／ 软件中断 （不可屏蔽）<ul>
<li>主动去中断：指令中断</li>
<li>被动去中断：硬件故障(除了硬件中断)、软件中断。</li>
</ul>
</li>
</ul>
<p>中断信号的来源，或者说，产生中断的设备，称为中断源.</p>
<p>种类型的中断都被统一编号，这称为中断类型号、中断向量或者中断号.</p>
<p>但是，由于不可屏蔽中断的特殊性——几乎所有触发NMI 的事<br>件对处理器来说都是致命的，甚至是不可纠正的。在这种情况下，努力<br>去搞清楚发生了什么，通常没有太大的意义，这样的事最好留到事后，<br>让专业维修人员来做。<br>也正是这个原因，在实模式下，NMI 被赋予了统一的中断号2，不再<br>进行细分。一旦发生2号中断，处理器和软件系统通常会放弃继续正常工<br>作的“念头”，也不会试图纠正已经发生的问题和错误，很可能只是由软件<br>系统给出一个提示信息。</p>
<p>和代码段、数据段和附加段一样，栈<br>也被定义成一个内存段，叫栈段（Stack Segment），由段寄存器SS 指<br>向。<br>针对栈的操作有两种，分别是将数据推进栈（push）和从栈中弹出<br>数据（pop）。简单地说，就是压栈和出栈。压栈和出栈只能在一端进<br>行，所以需要用栈指针寄存器SP （Stack Pointer）来指示下一个数据应<br>当压入栈内的什么位置，或者数据从哪里出栈。<br>定义栈需要两个连续的步骤，即初始化段寄存器SS 和栈指针SP 的<br>内容。源程序第40～42 行用于将栈段的段地址设置为0x0000，栈指针的<br>内容设置为0x0000</p>
<p>处理器内部，or 指令的目的操作数可以是8 位或者16 位的通用寄<br>存器，或者包含8&#x2F;16位实际操作数的内存单元，源操作数可以是与目的<br>操作数数据宽度相同的通用寄存器、内存单元或者立即数</p>
<p>在16位的处理器上，push 指令的操作数可以是16 位的寄存器或者内存单元</p>
<p>处理器在执行push 指令时，首先将栈指针寄存器SP 的内容减去操<br>作数的字长（以字节为单位的长度，在16 位处理器上是2），然后，把<br>要压入栈的数据存放到逻辑地址SS:SP 所指向的内存位置（和其他段的<br>读写一样，把栈段寄存器SS 的内容左移4 位，加上栈指针寄存器SP 提<br>供的偏移地址）</p>
<p>pop 指令执行时，处理器将栈段寄存器SS 的内容左移4 位，再加上<br>栈指针寄存器SP 的内容，形成20 位的物理地址访问内存，取得所需的<br>数据。然后，将SP 的内容加操作数的字长，以指向下一个栈位置</p>
<p>地址， 取地址 ([],从内存的该地址中取出数据)。</p>
<p>在实模式的汇编中，<br>汇编编译器中的汇编地址。<br>逻辑地址的形式是： 段地址：偏移地址。<br>物理地址&#x3D;段地址×10H+偏移地址</p>
<p>8086处理器的寻址方式<br>寄存器寻址<br>立即寻址<br>内存寻址：直接寻址，基址寻址，变址寻址，基址变址寻址。（根据偏移地址提供者的不同形式划分）<br>  内存寻址，默认都是DS做段地址，除非显示的表示段超越前缀。</p>
<p>直接寻址。<br>mov [es:lable], 0x05<br>目的操作数使用了标号和段超越前缀，但它依然属于直接寻址方式。原因很简单，标号是数值的等价形式，在指令<br>编译阶段，会被转换成数值；而段超越前缀仅仅用来改变默认的数据段。</p>
<p>mov [bx],dx<br>基址寻址。bx, bp. 在指令执行时，处理器将数据段寄存器DS 的内容左移4 位，加上基址寄存器BX 中的内容，形成20 位的物理地址。然后，把寄存器DX中的内容传送到该地址处的字单元里。</p>
<p>mov [di],dx<br>di, si.<br>变址寻址类似于基址寻址，唯一不同之处在于这种寻址方式使用的是变址寄存器（或称索引寄存器）SI 和DI.和基址寻址一样，当带有这种操作数的指令执行时，除非使用了段超越前缀，处理器会访问由段寄存器DS 指向的数据段，偏移地址由寄存器SI 或者DI 提供。<br>同样地，变址寻址方式也允许带一个偏移量. mov [si+0x100],al.</p>
<p>使用基址变址的操作数可以使用一个基址寄存器（BX 或者BP），外加一个变址寄存器（SI 或者DI）。它的基本形式是这样的, mov ax,[bx+si].<br>当处理器执行这条指令时，把数据段寄存器DS 的内容左移4 位，加上基址寄存器BX<br>的内容，再加上变址寄存器SI 的内容，共同形成20 位的物理地址</p>
<p>超越前缀, 不同汇编编译器，不同的语法。<br>  nasm中 [cs:di]， 都放在[]中。<br>  masm中 cs:[di].<br>注意不同的编译器 会导致一些语法的不同，要区分。<a href="https://blog.csdn.net/cainiaohhf/article/details/9916749">https://blog.csdn.net/cainiaohhf/article/details/9916749</a></p>
<p>标号， 变量名。<br>实际上都是内存地址。 要取变量的值(变量指示地址中的值)要 <code>[变量]</code>,而<code>变量</code>表示的是内存地址的.</p>
<p>操作系统通常肩负着处理器管理、内存分配、程序加载、进程（即<br>已经位于内存中的程序）调度、外围设备（显卡、硬盘、声卡等）的控<br>制和管理等任务</p>
<p>处理器的工作模式是将内存分成逻辑上的段，指令的获取和数据的<br>访问一律按“段地址：偏移地址”的方式进行。相对应地，一个规范的程<br>序，应当包括代码段、数据段、附加段和栈段。这样一来，段的划分和<br>段与段之间的界限在程序加载到内存之前就已经准备好了。</p>
<p>NASM 编译器不关心段的用途，可能也根本不知道段的用途，不知<br>道它是数据段，还是代码段，或是栈段。事实上，这都不重要，段只用<br>来分隔程序中的不同内容。<br>不过，话又说回来了，作为程序员，每个段的用途，你自己是清楚<br>的。所以，为每个段起一个直观好记的名字，那是应该的。如图8-1 所<br>示，第一个段的名字是“header”，表明它是整个程序的开头部分；第二个<br>段的名字是“code”，表明这是代码段；第三个段的名字是“data”，表明这<br>是数据段。<br>比较重要的是，一旦定义段，那么，后面的内容就都属于该段，除<br>非又出现了另一个段的定义。另外，如图8-2 所示，有时候，程序并不以<br>段定义语句开始。在这种情况下，这些内容默认地自成一个段。最为典<br>型的情况是，整个程序中都没有段定义语句。这时，整个程序自成一个<br>段。<br>NASM 对段的数量没有限制。一些大的程序，可能拥有不止一个代<br>码段和数据段。</p>
<p>逻辑右移 shr， shl。<br>逻辑右移指令执行时，会将操作数连续地向右移动指定的次数，每移动一次，“挤”出来的比特被移到标志寄存器的CF 位，左边空出来的位置用比特“0”填充</p>
<p>循环右移 ror， rol<br>循环右移指令执行时，每右移一次，移出的比特既送到标志寄存器的CF 位，也送进左边空出的位</p>
<p>ret  retf<br><a href="https://zhuanlan.zhihu.com/p/372398363">https://zhuanlan.zhihu.com/p/372398363</a></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>正数，负数。<br>二进制。原码，反码，补码。<br>正数： 原码&#x3D;反码&#x3D;补码。<br>负数：原码，是正数的原码 最高位置1 。 反码，除符号位 按位取反。 补码，反码+1。<br>规定最高位为符号位，表示正负。</p>
<p><a href="https://www.23bei.com/tool/56.html">https://www.23bei.com/tool/56.html</a></p>
<p>内存中的二进制，1.实际上是补码，用补码去理解。 2.用 负 &#x3D; 0-正 理解。<br>我们说的负数的二进制 实际上都是指 它的补码。 正数的二进制都可以(因为都一样)<br>1.实际上是补码，用补码去理解：<br>5<br>原    反    补<br>0101 0101 0101<br>-5<br>1101 1010 1011</p>
<p>7<br>0111 0111 0111<br>-7<br>1111 1000 1001</p>
<p>2.用 负 &#x3D; 0-正 理解。<br>-5<br>0-5<br>0000<br>0101<br>1011</p>
<p>-7<br>0-7<br>0000<br>0111<br>1001</p>
<p>得出的实际也是负数的补码。也能表明出最高位1时是负数，所以和我们规定的原反补都是自洽的。 也可以再反推出 反码， 原码。<br>利用方式2可以快速算出负数的二进制(补码)。比方式1快，方式1要先算出原码 反码，最后算出补码。</p>
<ul>
<li>如果系统本身是按照有符号系统处理，那么可以确定二进制的正负。 如果本身是无符号，那么就全是正。</li>
<li>如果系统本身同时支持有符号和无符号，那么在处理的时候 要特别指定是有符号 还是无符号，这样才能确定正负。<br>一般系统都是同时支持的那种。因此 处理的时候是 需要去指定的。</li>
</ul>
<p>我们人也算是同时支持有符号和无符号的。因此 处理数字时也是要 指定的（指定有符号 还是无符号）。而我们默认是指定为按照有符号的。另外也有可视化符号表示。<br>对于十进制，5-&gt;+5， -5。<br>对于二进制，1001-&gt;+1001， -1001.<br>如果没有可视化符号表示，像在计算机中表示的那样，那么前提也是要主动申明是哪种 有符号，还是无符号。<br>我们人 默认是有符号。 或者处理时 有可视化，是有指定了正负（属于有符号）。<br>5 ／+5<br>-5<br>+1001<br>-1001</p>
<p>一般计算机也是同时支持有符号和无符号的。<br>对于计算机中的表示，并没有可视化符号去表示，因此要主动去指定是有符号还是符号。<br>1001 指定有符号，是负数。指定为无符号，是正数。</p>
<p>总结：数</p>
<ul>
<li>有符号。 （正数 负数 之分，规定最高位为符号位）</li>
<li>无符号。 （全为正数）</li>
</ul>
<ol>
<li>如果本身系统就是有符号，或者 无符号， 那么就按系统指定的去解读。</li>
<li>如果本身系统同时支持 有符号 ，无符号。那么，就要有表明其是有符号 还是 无符号 的声明或指示。 如果没有明确指示，那么可以有两种不同的解读。对于同一个数，可以有两种解读。按照有符号解读 一种， 无符号的解读 一种<ol>
<li>有可视化的指示。比如可视化的+ -, 这就表明是用有符号的。</li>
<li>或者有其他的声明。声明是有符号或者无符号，比如 signed int， unsigned int。</li>
</ol>
</li>
</ol>
<p>人类系统 是同时支持有符号和无符号。 除非有声明 是无符号，否则都是有符号。<br>而且人类默认是可视化表示，所以显示的是有符号。5或+5， -5。 对于5，没有特别声明是无符号，那么就是有符号，而且是正的，即+5。 </p>
<p>可参考印象笔记中《计算机组成原理》。</p>
<p>字节序。<br>数据 在书写系统 和 内存 存放&#x2F;表示。 有大端，小端。</p>
<ul>
<li>书写表示的时候，实际上 大端字节序。 （我们默认左边到右边 位序增大，高位在低地址，所以是大端）。 基本都是大端。</li>
<li>内存 默认也是 左边到右边 位序增大。 数据在内存中，数据的低位在低地址，小端。 数据的高位在高地址，大端。 不同cpu 有不同的字节序。<ul>
<li>如果是大端，优点：和书写／表示 系统一致，人感官直觉上 比较自然，缺点：但是cpu处理起来麻烦，处理起来不自然。</li>
<li>如果小端，优点：cpu处理起来自然，逻辑上舒服。 缺点：书写表示时给人感官直觉上 比较麻烦。</li>
</ul>
</li>
</ul>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>以下 关于 操作系统启动流程。 文件系统。</p>
<p>文件： 文件大小(文件的实际大小)， 文件占的磁盘空间大小。 </p>
<p>磁盘： 见《x86汇编语言从实模式到保护模式》4.1.4章节。<br>磁盘，<br>从物理角度看， 最小存储单位是 扇区， 512B／4KB 。<br>0 面0 道1 扇区，或者说是0 头0 柱1 扇区。<br>从文件系统角度看： 最小存储单位是block，1KB，2KB，4KB。 （inode，superblock等都是存在block里）<br>inode 128B,256B.</p>
<p>0 lrwxrwxrwx   1 root root  29 12月  6 16:00 resolv.conf -&gt; ..&#x2F;run&#x2F;resolvconf&#x2F;resolv.conf<br>链接的block大小是0，因为只占用inode，并不占用block。</p>
<p>vbox 与宿主 设置共享文件夹。 linux中如果设置挂载点，那么会挂载到那个挂载点。 如果没有设置，那么挂载到 &#x2F;media&#x2F;sf_xxx下。<br>linux中无法直接用当前用户去访问挂载点。 可以在当前用户下 sudo mount –types vboxsf xxx mount_fs&#x2F;<br>xxx 是设置共享文件夹时取的名称。 mount_fs是虚拟机中某个目录。<br><a href="https://www.cnblogs.com/oddcat/articles/9685003.html">https://www.cnblogs.com/oddcat/articles/9685003.html</a><br><a href="https://blog.csdn.net/danshiming/article/details/117997558">https://blog.csdn.net/danshiming/article/details/117997558</a> </p>
<p>grub 可以识别 文件系统。ext2 ext4等。</p>
<p>linux内核启动的时候有一个 根文件系统， 然后才加在文件系统。</p>
<p>linux 中的根文件系统：<br>Initramfs， 为了映射 路径名到具体文件。从路径名访问到文件。</p>
<p>文件系统。 文件系统格式 ext2 ext4, fat ntfs, hfs。<br>文件系统：文件的树组织形式。 文件从路径名到物理磁盘文件的映射。</p>
<p>根文件系统: 可以是虚拟文件系统（内存中的），也可以是实际文件系统。  根文件系统，是可以访问&#x2F;目录的。 不是涉及文件系统格式。 比如Initramfs 是根文件系统， 在加载磁盘文件上的文件系统后，将Initramfs替换后的文件系统，也是根文件系统。<br>根文件系统的文件系统格式是具体而定的。 而且 根文件系统 的下的目录结构、目录名都有相应的标准规定。</p>
<p>linux内核加载的时候，先启动Initramfs，使得可以通过文件路径名直接在内存中访问必要的文件等，当加载了必要的磁盘驱动等，就可以加载磁盘设备上的文件系统了，就替换掉之前的Initramfs的文件系统。</p>
<p>开机时候的文件系统：<br>开机的时候， grub启动 stage1 无法识别文件系统 ， stage1.5 stage2 可以识别文件系统，然后启动内核，将整个控制权交由内核，grub不再接管。而内核此时无法识别文件系统，因此会有一个虚拟的根文件系统，在加载了必要的磁盘驱动等，就可以加载磁盘设备上的文件系统了，就替换掉之前的Initramfs的文件系统。</p>
<p>开机流程／系统启动流程：<br>加电启动<br>-&gt; cpu读取内存空间中地址0处(一般是固化到ROM里的BIOS)，执行BIOS里的代码，进行开机硬件检测等。 检测ok，cpu会将启动设备(硬盘) 里的0面0道1扇区的MBR代码载入到内存的0x7c00处，并且将执行地址跳转到0x7c00执行。这时，基本BIOS结束，将操作交由MBR。<br>-&gt; 执行MBR中的bootloader，Linux下的MBR中的bootloader一般为grub。grub stage1， （stage1.5，）stage2。 stage1 下是无法识别文件系统的，在1.5 2 才可以识别文件系统。 做了一些处理后，载入 &#x2F;boot下的内核文件(因为可以识别文件系统，因此可以找到&#x2F;boot下的内核映像文件)<br>-&gt;加载内核(内核文件&#x2F;boot&#x2F;vmlinuxxxxx)，启动内核。这时bootloader基本结束，操作交由内核了，即交给os了。内核加载时，为了能处理init服务,路径形式，那么需要加载文件系统(grub已经不在了，而此时内核又没有文件系统，无法访问路径形式的文件)，所以 此时内核会先加载的虚拟的根文件系统(&#x2F;boot&#x2F;initramfs,这个在grub阶段加载进内存了。然后这个文件会被解压缩并且在内存当中仿真成一个根目录。相应的目录下的文件因为在内存中有相应的加载，因此可以通过路径来访问相应的文件，相当于是一个文件系统。这个文件解压缩后和我们正常目录下的文件时一样的,这个只是在内核启动时加载虚拟文件系统时用到，解压，将里面的文件加载到内存中，从而执行.这个文件实际上就是那些必要文件的压缩)，这样就能找到必须的服务和模块，在加载了必要的磁盘驱动等，就可以加载磁盘设备上的文件系统了，就替换掉之前的Initramfs的文件系统，真正的文件系统就加载完成了。 这时基本内核加载差不多了。<br>-&gt;启动第一个进程，进城号为1 的 init 进程，后续必要进程启动，处理相应的配置文件等(如rc.local等)<br>-&gt; 系统的用户登陆界面。</p>
<p>(grub2 stage1.5后 和 加载完的os 都能识别磁盘上的文件系统)</p>
<p>UEFI读取GPT表，然后在相应的分区中读取.efi文件(bootloader)，控制权就交由分区中的bootloader了，bootloader再加载操作系统内核。<br>BIOS的是要先读取硬盘的MBR，根据MBR中的bootloader，要么加载相应分区中的内核文件，要么交由各自分区开头的bootloader处理。<br>菜单一：MBR（ grub2） –&gt; kernel file –&gt; booting<br>菜单二：MBR（ grub2） –&gt; boot sector（ Windows loader） –&gt; Windows kernel –&gt;<br>booting<br>菜单三：MBR（ grub2） –&gt; boot sector（ grub2） –&gt; kernel file –&gt; booting<br>而最终 boot loader 的功能就是“载入 kernel 文件”啦！</p>
<p>内核&#x2F;OS 启动流程， 也是重要的一环。</p>
<p><a href="https://www.crybit.com/linux-boot-process/">https://www.crybit.com/linux-boot-process/</a><br><a href="https://zhuanlan.zhihu.com/p/392858237">https://zhuanlan.zhihu.com/p/392858237</a><br><a href="https://blog.csdn.net/billbonaparte1/article/details/82629176">https://blog.csdn.net/billbonaparte1/article/details/82629176</a><br><a href="https://blog.csdn.net/zinnc/article/details/105026631">https://blog.csdn.net/zinnc/article/details/105026631</a></p>
<p>磁盘物理结构。<br>磁盘的MBR，分区结构。<br>文件系统格式。 文件的逻辑结构 对应 到磁盘物理结构。 文件通过 路径名形式 映射到磁盘物理结构。<br>开机流程。BIOS／UEFI， MBR／GPT，bootloader。等等。</p>
<p>开机流程简化版：<br>1.电源键启动，2.cpu读取内存地址0处代码(BIOS)，BIOS功能 硬件自检等以及启动顺序设置(u盘 硬盘 光驱 网络等)，3.从启动的硬盘&#x2F;u盘 0面0道1扇区 读取mbr或gpt （分区表），执行mbr里面的bootloader。 4.在bootloader中选择进入的操作统分区启动系统。 4.操作系统的启动。</p>
<p>总结：<br>BIOS， UEFI ： 固化到ROM的固件。 硬件启动时 加载到内存空间地址0处，并运行的第一个程序。<br>MBR，GPT： 是用于分区的分区表。  只是MBR中有446bytes用于存储bootloader(如grub)(MBR中的bootloader也可能是只是部分的bootloader)。 GPT并没有存储bootloader，bootloader是在各自分区中的.efi文件。<br>每个分区的文件系统。NFTS，ext4，fat32，exfat等等。 </p>
<p>每个硬盘 都有一个(0个或1个) 分区表 MBR&#x2F;GPT。 分区表是以硬盘为基础建立的，而不是以每个分区。<br>用U盘启动盘软件对其写入引导后把启动文件考进去就变成启动盘。 U盘此时也有建立了MBR或GPT的。<br>U盘启动方式，其中 安装的引导程序，算是bootloader吧。通过启动项选择U盘启动。启动时进入U盘，再通过U盘的引导程序(算是bootloader)进入其他系统。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Language</category>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>python_module</title>
    <url>/2022/04/06/python-module/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li><a href="#%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">项目的目录结构</a></li>
<li><a href="#python-%E5%8C%85%E6%A8%A1%E5%9D%97">python 包，模块。</a></li>
<li><a href="#import-%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97%E6%88%96%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%AA%E4%B8%9C%E4%B8%9C%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95">import 导入模块或导入模块中的某个东东。两种写法。</a></li>
<li><a href="#python-import-%E5%BC%95%E7%94%A8%E5%AF%BC%E8%87%B4%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%AF%BC%E5%85%A5">python import 引用导致的循环导入。</a></li>
<li><a href="#%E8%A7%A3%E5%86%B3import%E9%94%99%E8%AF%AF">解决import错误。</a><h2 id="项目的目录结构"><a href="#项目的目录结构" class="headerlink" title="项目的目录结构"></a>项目的目录结构</h2>pack_test<br>目录结构：<pre class="line-numbers language-none"><code class="language-none">Level0
	- Level1
		- level1_a.py
		- Level2
			- level2_a.py
	- level0_a.py
	- level0_b.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="python-包，模块。"><a href="#python-包，模块。" class="headerlink" title="python 包，模块。"></a>python 包，模块。</h2><ul>
<li>包 即目录(可以含有__init__.py,有则是regularpackage，没有则是namespacepackage)。 包名即目录名。 调用包里的模块。 包名.xx中的xx是目录下的 模块&#x2F;.py文件。</li>
<li>模块 即.py文件。模块名即文件名(不带.py)。 调用模块里的东西 模块名.xx  xx可以是.py文件中的类 函数 变量等。</li>
</ul>
<h2 id="import-导入模块或导入模块中的某个东东。两种写法。"><a href="#import-导入模块或导入模块中的某个东东。两种写法。" class="headerlink" title="import 导入模块或导入模块中的某个东东。两种写法。"></a>import 导入模块或导入模块中的某个东东。两种写法。</h2><ul>
<li>import xxx   导入模块。 (xxx查找路径 系统目录以及当前目录 或 xxx指定的 如 AA.BB.bb)。 只能导入整个模块， 要想导入模块中的某个用from。</li>
<li>from XXX import YYY  导入模块或导入模块中的东东。 从XXX模块中导入YYY(具体的类 函数 变量)。 或 从XXX包中导入模块YYY。 (XXX查找路径 系统目录以及当前目录或XXX指定的如..&#x2F;..&#x2F;ABC，不能直接指定，要sys.append)</li>
</ul>
<p>import 绝对导入 和 相对导入(使用.和..和…等。相对导入只能用在from形式，即有.或..只能用在from。直接import .XXX是不行)（在顶级包下无法使用相对导入，即无法使用from .&#x2F;..&#x2F;…等相对导入的形式。或者说相对导入无法..到顶级包。 顶级包 就是python命令运行时那个py文件所在的目录为顶级目录）。（绝对路径，相对路径）<br>(绝对是python命令执行时所在的目录为根目录，即以顶级包所在目录为根目录的。 相对是当前py文件的所在目录。)<br>一般相对导入(. ..)只用在有包的情况下。</p>
<p>pyhton2之前 默认&#x2F;隐式 为相对导入， python3为绝对导入。</p>
<ul>
<li>python3绝对导入2种： from  import, import。 相对导入(.或..) from  import。</li>
<li>python2绝对导入2种： from  import，import(eg:import AA.BB.aa)。 相对导入 from  import, import(只是import xxx默认为相对的 &lt;&#x3D;&gt; from . import xxx) .<br>（涉及. .. 只能用from形式）</li>
</ul>
<p>非常简单暴力的方法，将搜索路径 加入到sys中， sys.append。</p>
<p>绝对导入时的模块寻找路径：<br>    python模块的搜索目录有下面四个部分组成<br>    1：python命令执行时的所在目录。<br>    2：环境变量PYTHONPATH中列出的目录<br>    通过设置该系统环境变量，可以指定python的额外搜索目录<br>    3：python标准库目录<br>    python的标准库<br>    4：python的.pth文件扩展额外的搜索目录<br>    该文件提供了一种扩展搜索目录的方式。在该文件中每一行表示一个扩展目录<br>    python程序在启动时按照上面的顺序依次依次合并起来称为python的库文件查找路径集合。所以当python在查找某一个模块时，首先查找home目录然后PYTHONPATH目录，然后标准库，然后.pth文件中提供的目录。<br>    python的模块搜索路径列表存放在sys.path变量总，可以通过输出该变量来查看当前模块搜索列表。也可以通过改改变该变量的值来动态修改python的搜索路径。</p>
<p>相对导入时的模块寻找路径，就是相对导入的路径去寻找。 (相对导入 是相对当前.py文件所在目录) </p>
<p>（相对导入时如果要找上顶级包上一层的模块，可以上层路径加到sys路径中，作为绝对导入形式导入。）</p>
<h2 id="python-import-引用导致的循环导入。"><a href="#python-import-引用导致的循环导入。" class="headerlink" title="python import 引用导致的循环导入。"></a>python import 引用导致的循环导入。</h2><ul>
<li>import过程 实际上是栈的形式。 A 中import B , 在import处，暂停A的执行，去执行导入的文件B，导入文件B执行完之后，返回到A中的import点，A从import点处继续往下执行。</li>
</ul>
<h2 id="解决import错误。"><a href="#解决import错误。" class="headerlink" title="解决import错误。"></a>解决import错误。</h2><ul>
<li>ValueError: attempted relative import beyond top-level package # 试图在顶级包（top-level package）之外进行相对导入</li>
<li>ImportError: attempted relative import with no known parent package.  在顶级包中无法用相对导入。</li>
<li>ModuleNotFoundError: No module named ‘moduleY’ 找不到moduel。 解决方法，看绝对 还是 相对，然后去看看寻找路径中有没有该module。</li>
</ul>
<p>如果你想在顶级包下使用顶级包上层的模块，那么可以将上层模块加入到sys路径中。然后以绝对导入方式直接import。</p>
]]></content>
      <categories>
        <category>Language</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>\r,\n,\r\n那些事</title>
    <url>/2022/04/13/r-n-r-n%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li><a href="#1">1</a></li>
<li><a href="#2">2</a></li>
<li><a href="#3">3</a></li>
<li><a href="#4">4</a></li>
<li><a href="#5-%E9%99%84%E5%BD%95">5 附录</a></li>
</ul>
<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>用电脑的都知道enter键是回车键，实际上应该叫回车换行键才准确，因为作用不仅仅是回车，还有换行的作用。今天说一说回车、换行的那些事。</p>
<p>这一切要从古早的电传打字机说起。当我们在电传打字机上打完一行字时，那么就要进行两个操作，回车和换行。<br>回车让打字机的打印头回到起始位置。 换行让打印头往下移动一行。<a href="https://www.zhihu.com/zvideo/1469839155878891520?playTime=21.4">观看视频</a></p>
<p>回车 CR。Carriage return。 Carriage是打字机的滑杠。但是它也有马车的意思，所以翻译成回车。<br>换行 LR。Line feed。字面意思 喂了一行，含义就是换行。<br>回车 CR，ASCII值是0x0D，13, 转义字符是\r。  (return)<br>换行 LF，ASCII值是0x0A，10, 转义字符是\n。  (new line)</p>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>到了计算机时代，沿袭了打字机的概念。<br>回车 光标回到行首 不换行。 换行 光标移动到下一行 不回到行首。<br>那时，存储器很贵，一些科学家认为在每行结尾加两个字符太浪费了，加一个就可以，用一个字符来完成两个操作。于是，就出现了分歧。<br>unix 中，用\n 完成 回车和换行 的功能(虽然\n还叫回车，但完成了回车和换行)。 \r还是仅仅的回车，无换行。<br>macos 中，用\r 完成 回车和换行 的功能。 不过现在macos也转向了unix方式了。<br>windows中，维持传统，\r\n 才是回车和换行。 \r仅仅是回车，\n仅仅是换行。<br>(另外，注意, 在网络协议中还是用\r\n表示回车换行，比如http协议中头和数据之间的换行就是\r\n)</p>
<p>一个直接后果是，Unix&#x2F;Mac系统下的文件在Windows里打开的话，所有文字会变成一行；而Windows里的文件在Unix&#x2F;Mac下打开的话，在每行的结尾可能会多出一个^M符号，即多余的\r就用^M表示出来。(之所以显示为^M是因为Linux下一般用^表示Ctrl键，而Ctrl+M表示回车，可以在命令行里试试)</p>
<p>另一个后果 就是编程上的兼容性问题。<br>比如C语言对于文件中回车换行的处理。C标准库为了统一文件的回车换行，可以使用文本模式。<br>打开文件的方式分为两种：二进制模式和文本模式。<br>对于二进制模式，写入\r \n 原样写入， 读出\r \n 也是原样读出。<br>对于文本模式， 分系统。 对于windows，写入\n，会转成\r\n, 读出\r\n会转成 \n. 对于linux&#x2F;macos, 写入\n,还是转成\n, 读出\n会转成\n(linux&#x2F;unix&#x2F;mac 下文本模式和二进制模式都一样的，都等同于二进制模式)。虽然在系统层面不一样，但是在c的层面统一了。 文本模式其实就是 在中间 加了一层，做了兼容处理。 （很多时候计算机问题，都能往上加一层后，解决问题。比如网络的七层模型等）<br>所以对于文本模式，实现回车 换行，统一使用\n。 对于二进制模式，还是要分系统分析，要做跨平台的处理。 对于C标准库中的标准输入 标准输出 标准错误 默认是文本模式的，因此printf(“\n”)在各个系统都是回车换行。</p>
<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>虽然我们日常只说 回车 或者 换行 或者 enter，但是实际都是指 回车和换行，即回到行首，并到下一行。</p>
<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>参考：<br><a href="https://www.ruanyifeng.com/blog/2006/04/post_213.html">https://www.ruanyifeng.com/blog/2006/04/post_213.html</a><br><a href="https://zhuanlan.zhihu.com/p/479064200">https://zhuanlan.zhihu.com/p/479064200</a></p>
<h2 id="5-附录"><a href="#5-附录" class="headerlink" title="5 附录"></a>5 附录</h2><p>在c中如何控制回车，换行，以及光标的移动。<br>参考：<a href="https://blog.csdn.net/yuhai738639/article/details/79221835">https://blog.csdn.net/yuhai738639/article/details/79221835</a><br>以下标准输入输出 其实都是在文本模式下。</p>
<ul>
<li>仅仅回车，未换行：<pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt; 
int main()&#123;
	for(int i &#x3D; 0; i &lt; 100; i++)&#123;
		printf(&quot;process %4d \r&quot;, i); &#x2F;&#x2F;回车 未换行。
		fflush(stdout);&#x2F;&#x2F;强制刷新缓存，输出显示
		&#x2F;&#x2F; usleep(200);
		sleep(1);

	&#125;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>仅仅换行，不回车<br>无。</li>
<li>回车换行：（虽然\n还是叫回车，但是完成了回车和换行操作）<br>\n</li>
</ul>
<div style= "display:none;" >
    更多的参考可以 查看 笔记 C语言。
</div>]]></content>
      <categories>
        <category>Language</category>
        <category>Programing</category>
        <category>C</category>
      </categories>
      <tags>
        <tag>回车换行</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程多进程</title>
    <url>/2022/04/29/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>操作系统中 多线程／多进程。</p>
<p>多进程&#x2F;多线程 状态以及状态转换： 新建，就绪，运行，阻塞，死亡&#x2F;终止。<br>进程的五个状态，其实也可以用在线程上。<br>就绪和阻塞都是进程线程停止工作，暂停状态，不再运行。<br>就绪表明进程线程有使用cpu的资格，需要等待调度。也叫可运行状态。可运行状态 表明线程可执行的所有条件都满足了(比如锁等)，只要等cpu调度运行就可以。<br>阻塞表明完全没有使用cpu的资格。</p>
<p>一般说的线程 睡眠，休眠，挂起，等待 等等 都是指进程&#x2F;线程 从运行状态进入非运行状态，可能是就绪或阻塞(比如时间片用完，挂起，这是指进入就绪状态的)。不过一般都是进入阻塞状态的。 （并没有进入死亡状态的）。<br>线程终止，是指进入终止／死亡状态。<br>一般进程线程sleep是进入就阻塞状态。时间到，转为就绪，等待调度。 yield是直接进入就绪状态。<br>平时编程时，其实说的线程阻塞，等待等，是笼统的说线程停止状态，不严格的区分，没有去细分就绪还是阻塞，也就是说细分的话，两种都有可能，只是将两者都笼统放在一起使用，反正线程不再工作，停止状态。具体代码中就能明显区分了。</p>
<p>多线程的 同步、互斥 操作。<br>理论：<br>P&#x2F;V 操作 (semwait&#x2F;semsignal 操作)。 操作信号量。</p>
<p>信号量可用于同步 互斥操作。<br>当信号量值为1(二元信号量) 的时候，可用做互斥。 大于1，可用做同步。<br>互斥是常用的操作，除了信号量，还有专门的互斥量／互斥锁／锁 用于做互斥。（锁等价于二元信号量）</p>
<p>其实信号量 完全可以用 锁+条件变量+额外的变量 来实现。</p>
<p>一般用于同步：信号量，条件变量(要配合锁)。<br>一般用于互斥：锁。 二元信号量。<br>（锁。 二元信号量。互斥操作 也能完成一些同步操作的。）</p>
<p>P&#x2F;V 完成 同步 或 互斥。</p>
<p>具体实践：<br>Linux c：<br>互斥量操作<br>pthread_mutex_lock pthread_mutex_unlock<br>pthread_cond_wait pthread_cond_signal （条件变量要配合二元信号量使用）<br>    pthread_cond_wait 阻塞当前线程，并且释放当前线程拥有的锁。<br>    pthread_cond_signal 唤醒在该条件变量的阻塞线程。 将其放入原来锁的竞争队列中去。这时唤醒的那个线程要和其他线程对该锁进行竞争。 只有竞争成功，才能从条件变量阻塞处接着往下运行。 即条件变量唤醒的线程 是处于就绪状态，要等待os的调度的。<br>pthread_join<br>信号量操作<br>sem_wait sem_post</p>
<p>Java:<br>    互斥：synchronized。 lock unlock。 （这些互斥 也可以完成一些同步的操作。）<br>    同步：wait notify。  配合一些变量。   （这些同步 也会有一些互斥的效果。） （类似于C中条件变量的wait signal）<br>        LockSupport.park， LockSupport.unpack （类似一个二元信号量，一般用于同步，因为都是自身线程pack,由其他线程unpack，所以一般是用做同步）<br>    其他：<br>    join。yield。</p>
<p>多线程 同步 互斥过程中可能出现的问题。<br>死锁，饥饿，</p>
<p>代码Demo。</p>
<p>加锁 进入阻塞状态。</p>
<p>获得锁，进入就绪状态，等待调度。调度得到cpu资格，进入运行状态。</p>
<p>yield 直接进入就绪状态。 等待调度。</p>
<p>wait 释放拥有的锁，并进入阻塞状态。 wait要配合锁来使用的。只能在有拥有某个锁的线程中对某个锁进行wait。</p>
<p>notify 唤醒因条件变量阻塞的线程，进入</p>
<p>sleep 进入阻塞状态，时间到，进入就绪状态，等待调度。并没有释放拥有锁。</p>
<p>join 进入阻塞状态，等其他线程结束。</p>
<p>实践中，五种的状态还是比较笼统，一般还会将阻塞状态细分。<br>等待阻塞&#x2F;Waiting，同步阻塞&#x2F;Blocked，其他阻塞&#x2F;Timed_Waiting。<br>    等待阻塞： wait操作，释放拥有的锁，并进入阻塞状态。 notify后 或者 时间到后，进入 同步阻塞(要去竞争锁)。<br>    同步阻塞在获的锁后，进入就绪状态。<br>    其他阻塞：比如sleep(进入睡眠状态)，join等。没有释放锁，进入阻塞状态。 时间到，进入就绪状态。<br>比如像Java中的线程状态就比较细致。<br>JAVA中的状态：<br>New、Runnable、Blocked、Waiting、Timed_Waiting和Terminated.<br>其中locked、Waiting、Timed_Waiting 都是阻塞状态，对应着上面的三种阻塞。</p>
<p>wait(1000) &#x2F;&#x2F;释放锁吗？ 如果释放锁，那么锁被其他线程占去之后，一直不还，而线程的时间又到了，怎么办？<br>会释放锁。 时间到或者notify 之后 进入同步阻塞状态，去争夺锁。</p>
<p><a href="https://www.jianshu.com/p/e2b22c6bcd22">https://www.jianshu.com/p/e2b22c6bcd22</a><br>interrupt 中断。并不是完全让线程结束变为terminated，是否变为terminated由程序员决定。程序员在run中判断Thread.interrupted()状态。<br>某个线程被调用interupt，<br>如果处于运行状态，只是将设置interrupt的状态，具体是停止还是怎样由 程序员写的代码决定。<br>如果处于阻塞状态，那么该线程会抛出InterruptedException，同时将状态转为下一个状态。</p>
<p>LockSupport.park() LockSupport.unpark()。 类似于二元信号量。 用做同步。 park 休眠线程&#x2F;挂起线程-&gt;进入阻塞状态。 不释放拥有的锁。</p>
<p>Java 状态转换。</p>
<p>Java 多线程相关API。</p>
<p>参考：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1304521607217185">https://www.liaoxuefeng.com/wiki/1252599548343744/1304521607217185</a></p>
<p>Java 代码Demo。<br>1.线程的创建。</p>
<pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>




<p>知道理论原理。<br>知道具体实践。具体实践和理论的互相映照。  api 以及具体使用 场景。<br>知道具体实践的 底层实现原理。</p>
]]></content>
      <categories>
        <category>Programing</category>
      </categories>
      <tags>
        <tag>多线程多进程</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>宽带_IPV6</title>
    <url>/2022/04/06/%E5%AE%BD%E5%B8%A6-IPV6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li><a href="#%E8%83%8C%E6%99%AF">背景</a></li>
<li><a href="#%E5%BC%80%E6%90%9E">开搞</a><ul>
<li><a href="#%E5%BC%80%E6%90%9E%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98">开搞过程中出现的问题：</a><ul>
<li><a href="#dw33d">DW33D</a></li>
<li><a href="#tp%E8%B7%AF%E7%94%B1%E5%99%A8">tp路由器</a></li>
<li><a href="#%E7%A7%BB%E5%8A%A8rax3000q">移动RAX3000Q</a></li>
</ul>
</li>
<li><a href="#%E5%A6%82%E4%BD%95%E8%AE%A9%E8%87%AA%E5%B7%B1%E5%AE%B6%E9%87%8C%E7%9A%84%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E6%97%B6%E4%B9%9F%E8%83%BD%E6%9C%89ipv6">如何让自己家里的设备连接时也能有ipv6？</a></li>
<li><a href="#%E6%88%91%E4%BB%AC%E6%9D%A5%E8%AF%B4%E8%AF%B4%E8%BF%99%E4%B8%89%E7%A7%8D%E8%8E%B7%E5%8F%96ipv6%E5%9C%B0%E5%9D%80%E7%9A%84%E6%96%B9%E6%B3%95">我们来说说这三种获取ipv6地址的方法。</a></li>
</ul>
</li>
</ul>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>新拉了一条移动的宽带，300M。因为某些**原因，要用到ipv6。 因为那个vps，只提供ipv6的地址。所以，要折腾宽带的ipv6.</p>
<p>手上的设备：</p>
<ul>
<li>广东深圳移动 300M 免费一年。 </li>
<li>光猫型号：吉比特 GM232。</li>
<li>路由器： 大麦DW33D。Mercury8012(不支持ipv6)。<a href="https://blog.imlk.top/posts/rax3000q-get-shell/">移动的RAX3000Q</a>。</li>
<li>宽带用户名和密码。 用户名是手机号，密码可以在移动app上重置。</li>
<li>光猫后台管理。两种方式 user， admin。 user的在猫的背面。 admin的CMCCAdmin和aDm8H%MdA。</li>
<li>光猫设备认证码。 这个用来重置光猫以及注册光猫设备。 可以在安装的时候让装维师傅告知下。一般用不上。</li>
</ul>
<p>登录光猫网页管理界面，将一些重要的信息先截图备份，避免在后续操作中不知道怎么改回来(注意vlanid别搞错了)。移动给的光猫默认有4个连接。</p>
<p>移动猫一般有三种连接。 分别是宽带，网络电视，网络电话。 这三种都绑定了猫的一个LAN口。 所以有的lan口直连电脑不行，因为dhcp获取不到而且不是给上网用的，是特殊用途。</p>
<p>移动光猫的网口有1个千兆lan口，3个百兆lan口。被绑定了三个口。绑定了那么该端口的dhcp就不能使用了。<br>internet 就是我们平时用来上网的连接。OTTV 用于IPTV业务的连接。VOIP 用于语音业务的连接。<br>移动光猫lan1是绑定了pppoe拨号。 lan2 lan4是绑定了网路电视和网络语音。 lan3空，可以直连电脑。<br>所以，能直连电脑的网口只有lan1 和lan3. 其他口连接的话，不会分配ip的。</p>
<p><img src="/imgs/20220407_1.png" alt="找不到图片时显示" title="标题"><br><img src="/imgs/20220407_2.png"><br><img src="/imgs/20220407_3.png"><br><img src="/imgs/20220407_4.png"><br><img src="/imgs/20220407_5.png"><br><img src="/imgs/20220407_6.png"></p>
<h2 id="开搞"><a href="#开搞" class="headerlink" title="开搞"></a>开搞</h2><p>现在移动 电信 宽带都是有ipv6地址的，提供的猫也支持公网ipv6.<br>4G 5G也是有公网ipv6地址的。 手机 电脑等都支持ipv6的。但是家用路由器不一定。<br>如何检测当前网络是否支持ipv6？</p>
<ul>
<li>使用ping。 ping6 ivp6地址</li>
<li><a href="https://ipv6-test.com/">ipv6_test</a></li>
</ul>
<p>注意： 手机 电脑上能获取ipv6地址 不代表就能上ipv6网络。 可以使用上述方法进行检测。  </p>
<p>关于手机 电脑上有两个ipv6地址，<a href="https://www.zhihu.com/question/316884179">解释</a>。<br>inet6 2409:8955:321c:41aa:c6f:5822:7f30:8e60 prefixlen 64 autoconf secured<br>inet6 2409:8955:321c:41aa:e527:782d:3c19:9124 prefixlen 64 autoconf temporary<br>关于ipv6的内网 还是外网地址：<br>fe80开头的是内网IPV6地址，其他开头的是公网IPV6地址，<br>电信为240e::&#x2F;20 移动为2409:8000::&#x2F;20 联通为2408:8000::&#x2F;20<br><a href="https://www.zhihu.com/question/361275417">讨论</a></p>
<p>ipv6 地址：<br>fe08开头 本地地址。 类似 192.168<br>2001:db8 是经过NAT。 可以接收外来请求(但是要你先主动发起请求才行)。<br>2409 公网ipv6</p>
<h3 id="开搞过程中出现的问题："><a href="#开搞过程中出现的问题：" class="headerlink" title="开搞过程中出现的问题："></a>开搞过程中出现的问题：</h3><ul>
<li>光猫拨号，查看状态信息，发现光猫有ipv6地址。也可开启了dpcpv6。 有线直连电脑，电脑有ipv6，而且能稳定顺畅访问ipv6网络。这个光猫没有wifi功能。所以用wifi要配合一个路由器使用。但是设备无线连接路由器或有线连接路由器，可能会无法获取ipv6地址。</li>
</ul>
<h4 id="DW33D"><a href="#DW33D" class="headerlink" title="DW33D"></a>DW33D</h4><ul>
<li>光猫拨号，DW33D wan口连接， DW33D没有分配到ipv6地址。手机 电脑连接路由器也获取不到ipv6.该问题是因为DW33D官方固件中不支持ipv6. 刷入新的固件能获取ipv6.</li>
<li>新固件 获取的ipv6，无法连上ipv6网络。</li>
<li>但是，后来这个路由器手贱升级了变成砖了。刷机救砖是另一个悲剧的过程。总之失败告终。不过理论上应该和移动RAX3000Q一样，都能完成ipv6的获取。</li>
</ul>
<h4 id="tp路由器"><a href="#tp路由器" class="headerlink" title="tp路由器"></a>tp路由器</h4><ul>
<li>使用tp的路由器(Mercury8012)，不支持ipv6.</li>
<li>曲线救国。将tp桥接到光猫，这样手机 电脑连接的路由器时 由光猫进行dhcp 分配ipv6. 但是问题是，这个ipv6地址时而能上时而不能上ipv6网络，不稳定，应该是和路由器有关系。</li>
</ul>
<h4 id="移动RAX3000Q"><a href="#移动RAX3000Q" class="headerlink" title="移动RAX3000Q"></a>移动RAX3000Q</h4><ul>
<li>移动RAX3000Q路由器。支持ipv6，也支持nat6。 支持wifi6. 移动送的免费用一年，一年后要还的。</li>
<li>RAX3000Q很好，下面的多个实验都支持了。</li>
</ul>
<h3 id="如何让自己家里的设备连接时也能有ipv6？"><a href="#如何让自己家里的设备连接时也能有ipv6？" class="headerlink" title="如何让自己家里的设备连接时也能有ipv6？"></a>如何让自己家里的设备连接时也能有ipv6？</h3><ul>
<li>如果家里的路由器不支持ipv6。 方法：路由器桥接到猫。让路由器lan连接到猫的lan，关闭路由器DHCP，修改路由器br-lan不要和猫同一网段。连接到路由器的设备的ipv4 v6地址由猫DHCP来分配。 地址让支持ipv6的猫去分配ipv6，这样设备也能得到IPV6地址。</li>
<li>如果家里的路由器支持ipv6。 方法；1.同上。让路由器桥接猫。 2.自己本身支持ipv6分配，开启nat6.(不过似乎是内网ipv6，那么可能还是无法访问ipv6网络)。3.开启猫的桥接模式，将网络功能桥接到某个网口。 拨号 dhcp等全由路由器来做，猫只做猫&#x2F;调制解调的功能。 这个要求路由器本身支持ipv6。<br>最好的方式是3。<br>光猫改桥接：<a href="https://zhuanlan.zhihu.com/p/343762196">https://zhuanlan.zhihu.com/p/343762196</a> 。1.进入光猫配置页面。更改Internet的连接模式，改成brigde模式，选择ipv4&#x2F;ipv6, 绑定在某个lan口。(如果无法修改，可以删除后再新建一个连接) 2.路由器进行拨号。</li>
</ul>
<h3 id="我们来说说这三种获取ipv6地址的方法。"><a href="#我们来说说这三种获取ipv6地址的方法。" class="headerlink" title="我们来说说这三种获取ipv6地址的方法。"></a>我们来说说这三种获取ipv6地址的方法。</h3><ol>
<li>路由器桥接到猫。 光猫拨号上网，支持ipv6，开始dhcp6，RA设置O M 模式。 路由器lan&#x2F;wan连接到光猫(一般用lan)，设置成桥接模式，关闭路由器的dhcp。 这样电脑、手机设备连接路由器时，会获取到猫分配的ipv6地址，而且是公网的ipv6地址。缺点和问题：获取的ipv6可能不稳定，手机端可能获取不到ipv6地址。 经测试，mercury8012做的桥接获取的ipv6不稳定，而且手机端获取不到ipv6. RAX3000Q 电脑端没问题，但是手机端无法获取ipv6.</li>
<li>路由器本身支持ipv6，并且支持nat6。（前提是路由器支持ipv6，并且能够获取到猫分配的公网ipv6）。 光猫拨号上网，设置RA O M模式。 路由器wan口连接光猫，设置成自动获取ip模式(也即路由模式)(这样能从猫那里获取ipv4和公网ipv6的)(这里的dhcp模式，是说以DHCP客户端去获取IP地址。 还有DHCP服务器端，是进行分配ip地址的。)， 开启NAT6。手机 电脑等设备连接路由器，那么获取到的ipv6地址是NAT6内网的ipv6地址，并不是公网的ipv6。可以访问ipv6网络（前提要你先主动发请求出去）。<ul>
<li>理论上 路由器本身支持ipv6的dhcp，那么手机等设备也可以获取公网的ipv6，压根不需要nat6. 但是 经测试后，直接使用路由器的dhcp6并不能获取到ipv6地址。这个可能是和猫 路由器设置有关的。而NAT6比较简单，使用开启nat6，获取内网的ipv6地址，可以访问ipv6网络。</li>
</ul>
</li>
<li>光猫做桥接，路由器进行拨号并自动分配ipv6。光猫设置网络为桥接模式。路由器wan口连接光猫。 路由器使用pppoe拨号上网。并不需要其他什么而外设置，一般都是自动分配ipv4 ipv6。（这个要求路由器能支持ipv6）。 电脑 手机等设备连接路由器后获取到的是公网的ipv6地址的。<br><img src="/imgs/20220418_1.png"><br><img src="/imgs/20220418_2.png"></li>
</ol>
<p>我的选择：<br>实验了这么几种方式，都能获取ipv6地址。但是我的需求，很简单，只想要能访问ipv6地址，因此我采用的是第二种方式。第一种路由器桥接光猫，光猫的性能堪忧。 第三种 暴露公网ipv6可能会带来不友好的攻击。  </p>
<p>其实在技术上，ipv6和ipv4是类似的。 但是历史原因，造成了两种网络的割裂，纯ipv4网络和纯ipv6网络无法联通（基础设备，协议的不支持）。 现在随着基础设备支持ipv6，纯ipv4网络和i纯pv6网络以后也会慢慢互相连通的，对用户来说会感知透明。</p>
<div style="display:none;" id="温故知新">
温故知新

<ul>
<li>RJ45接口 物理层设备。 并不是一个接口就有一个网卡的。 不是一个物理的RJ45接口就有一个物理的网卡的。(比如路由器的LAN口)</li>
<li>网卡(网卡接口)是网卡工作在物理层和数据链路层的MAC子层。算是数据链路层。 有mac地址。</li>
<li>物理网卡接口(物理设备)，逻辑网卡接口(eth0 eth1， 操作系统层面使用的)（物理网卡接口和逻辑网卡接口并不是完全一对一。有一对多的）。</li>
<li>每个逻辑网卡接口都有mac地址，如果分配了ip，也会有ip地址的。 (mac地址 数据链路层，ip地址 网络层)</li>
<li>RJ45接口， 网卡， 中继器&#x2F;放大器， 集线器， 网桥， 交换机， 路由器。</li>
</ul>
<p>单纯的 集线器 是没有mac地址的。因为都没有网卡的。<br>单纯的 交换机本身有一个网卡的，而至于交换机的每个端口是否有网卡，不同实现也不一样，有的是每个端口都分配一个网卡，有的没有。有mac地址的。 但是没有涉及ip地址的。二层交换机 每个端口不一定都分配网卡，三层的交换机每个端口都分配网卡，而且也可以ip地址。<br>路由器 电脑 手机本身是有网卡的。</p>
<ul>
<li>交换机是二层。</li>
<li>VLAN是二层技术。交换机可以支持划分vlan的。只是无法让vlan之间路由。<br>要实现VLAN之间路由，需要三层路由功能。 方式有三层交换机，路由器等。 所以 要vlan之间路由 那么就是三层设备。<br>三层交换机让VLAN之间路由(有利用VLAN技术)。 路由器也能利用VLAN技术，也可以让VLAN之间路由。</li>
<li>路由器是三层。现在三层也有三层交换机。</li>
</ul>
<p>路由器 一般两个物理网卡。 wan口一个网卡， LAN口共用一个网卡(做VLAN)。 如果有wifi的话，还有有无线网卡(一般也是桥接在br-lan下，都分配同一个VLAN。 所以有线无线都是同一个局域网)。<br>（每个路由器貌似这块不一样，有得是2个，有的3个）</p>
<p>路由器本身的网卡 以及ip地址。<br>wan口：wan eth0.2 wan6 eht0.2  （其实是一个网卡的两种ip地址 ipv4 ipv6，有的路由器是放在一起eth0，有的给分开的）<br>LAN口：br-lan: 192.168.1.1 &#x3D;&#x3D;&gt; lan1 lan2 lan3 lan4 。 （lan对应的ip地址是分配到连接设备的ip地址）</p>
<p>路由器：拨号，路由，交换。 lan口之间是交换功能，都放在br-lan网卡下。 br-lan和wan，wan和上层网关 之间是路由功能。 wan也有拨号功能。</p>
<p>光猫的lan直连路由器的lan，并关闭路由器br-lan的dhcp，相当于将路由器的lan划归到了光猫的交换系统之中，vlan。</p>
<p>调制解调器：数字信号(0,1等)和模拟信号(电信号&#x2F;电流电压 光信号等。模拟信号又叫做连续信号)。<br>光猫：数字信号转成电信号 再转乘光信号。<a href="https://zhuanlan.zhihu.com/p/77906564">https://zhuanlan.zhihu.com/p/77906564</a><br>一般，家庭的光猫是功能不强大，我们一般只让做猫的功能，光信号&#x2F;模拟信号和数字信号转换。 不要让它做乱七八糟的功能。 而路由器功能更强一些， 所以一般是让路由器做拨号 路由，而光猫只负责猫的功能。</p>
<p>路由器做桥接. 有线桥接 无线桥接。两者原理是一样的。路由器A 路由器B， 路由器B桥接到A。<br>其实都是相当于将路由器B做交换机使用，具体的dhcp 路由，都是由上游的设备路由器B做的。这里系统中实际上还是存在两套系统， A的路由 交换功能， B的路由 交换。 将B桥接到A，将B中的路由 交换交给A，但是B中还是有这个功能的，可以手动设置IP连接到B的系统上来。<br>有线桥接： B的lan口连接到A的lan口， 修改B的br-lan的ip与A路由器不要同一个网段， 关闭dhcp(让A来做)。<br>无线桥接：类似。 1.关闭dhcp，2.修改网段，3.wds功能 进行桥接连接到A的ssid。 </p>
<p>路由器当交换机用。 用lan口去连接上游设备，而不是用wan口。<br><a href="https://product.pconline.com.cn/itbk/wlbg/hiwifi/1702/8881901.html">https://product.pconline.com.cn/itbk/wlbg/hiwifi/1702/8881901.html</a></p>
<ul>
<li>光猫lan口连接路由器wan口。正常的连接方式。</li>
<li>光猫lan口连接路由器lan口。让路由器桥接光猫，路由器做交换机使用。</li>
</ul>
<p>光猫的lan口连接路由器的lan口。关闭路由器的DHCP，这时路由器的lan其实只是桥接光猫，DHCP是由光猫来做。 这时路由器的本身的br-lan还是可以用的。就是说 我们电脑用dhcp获取，获取到的是光猫分配的，路由器是当交换机使用的，电脑和猫是同一网段。 如果用手动设置192.168.0.123 和路由器的br-lan ip 同网段，那么是由路由器管理的，电脑和路由器同一个网段。 其实这时 路由器连接光猫的lan口 实际是属于光猫的lan，相当于属于光猫的vlan的，即这时有两个网段(vlan)，光猫的vlan， 路由器的vlan，只是路由器连接光猫的lan口属于光猫的vlan。 在整个系统中， 光猫的拨号，路由，交换， 路由器的路有，交换。存在两个交换机系统，两个路由系统。 </p>
<p>wifi4  wifi5 wifi6<br><a href="https://zhuanlan.zhihu.com/p/151266390">https://zhuanlan.zhihu.com/p/151266390</a><br><a href="https://zhuanlan.zhihu.com/p/107885419">https://zhuanlan.zhihu.com/p/107885419</a></p>
<p>wifi4 支持2.4G&#x2F;5G<br>wifi5 只支持5G<br>wifi6 支持2.4G&#x2F;5G  </p>
<p>5G比2.4G网络更快，但是穿透能力弱。  </p>
<p>wifi6 比 前几代 都更快。  </p>
<p>有的老设备不支持wifi6，只能连接wifi6的2.4G信号。  </p>
<p>大麦的WD33D是wifi4，有2.4G／5G，因此可以连2.4和5G。<br>移动的RAX3000Q是wifi6，mbp，redmi8 只能连2.4G的。  </p>
<p>通过修改RAX3000Q的5Gwifi的工作模式.  不过，结果也不行。 因为电脑 手机设备不支持wifi5 wifi6，只能收到2.4G<br><a href="https://www.jiayongluyou.com/shezhi/wifi6/what-if-the-4.html">https://www.jiayongluyou.com/shezhi/wifi6/what-if-the-4.html</a></p>
<p>所以，<br>要想有ipv6公网地址，1.使用路由器桥接光猫 2.使用光猫的桥接模式。</p>
<p>要想访问ipv6网络，除了上面两种外，还有3.路由器开启开启NAT6(路由器要支持该功能，并且路由器已经从猫那里获取了ipv6公网地址)。 路由器wan口连接光猫，dhcp模式，并开启nat6. 这样设备连接路由器后会有2001:db8的ipv6地址，对外的ipv6地址是路由器的ipv6地址。</p>
<p>如果只是想访问ipv6网络，建议使用2和3，不要使用路由器桥接猫，毕竟猫的性能还是弱，带动好几台设备都吃力，让猫做路由功能还是吃力了点。</p>
<p>如果想访问ipv6网络并且公网ipv6 用2.<br>如果只想访问ipv6网络 没有公网ipv6，可以用3.</p>
<p>如果对公网ip没有大需求，建议使用3，能够一定程度上保护内网的主机。</p>
<p>如果知道你的网络能访问ipv6网络？</p>
<p>1.ping6 ipv6地址。<br>2.iptest网站。<br>3.ifconfig 看是否有公网ipv6地址。<br>(没有ipv6公网地址，有nat6分配的ipv6 可能也能访问ipv6网络)。</p>
</div>

<div style="display:none;">

<p>电脑直连可以获取到ipv6，说明ipv6没问题。 光猫上没有显示分配的ipv6 有点奇怪的。 算了，不影响不管它。<br>路由器直连为什么没有分配到ipv6？ 难道因路由器连接的是lan1，电脑直连lan3？  和这个没关系。 电脑直连lan1照样有ipv6. 所以问题出在路由器身上。</p>
<p>光猫上为什么不显示ipv6的分配情况。<br>为什么路由器上没有分配ipv6，而直连的电脑可以？ 那应该就是路由器的问题， 怎么解决？</p>
<p>直连光猫有ipv6，路由器wan lan都有ipv6， 但是手机连接路由器 ipv6 是内网的ipv6.<br>可能原因：dhcp，将路由器的dhcp关闭 让猫去dhcp。<br>应该是路由器的问题，可以像RAX3000Q那样NAT6。</p>
<p>问题：<br>在让路由器做交换机之后，可以获取到ipv6，但是有时候能上ipv6，有时候不能。 这就很奇怪了。可能是路由器的问题。也有可能猫的问题。<br>现在不知道如果让路由器拨号 会不会有问题？</p>
<p>如果路由器拨号 不会有问题，那说明你是猫的问题了。<br>设置ipv6的RA，开启 O M模式。  LAN测DNS获取方式 HGWProxy （和DNS关系不大）。 不过这个设置之后，会导致有时候ipv6连不上</p>
<p>问题：<br>光猫会分配ipv6， 有线直连，有ipv6地址，可以连ipv6网络，比较稳定。</p>
<ul>
<li>将大麦升级后，分配了ipv6但是无法联ipv6网络。 可能是猫的设置问题。</li>
<li>将路由器桥接光猫后，分配了ipv6，有时可以连ipv6网络，有时不可以。 这个可能是路由器的问题。也有可能猫的设置问题。 可以用大麦路由器去测试测试。</li>
</ul>
<p>将新账号 放在以前旧的移动光猫上，无法注册成功。 可能是账号和设备绑定的。</p>
<p>大麦DW33D 硬件是支持ipv6的。 </p>
<ul>
<li>原先的固件不支持，所以导致连接的设备没有分配ipv6.</li>
<li>更新了固件。 支持了。 但是分配的是内网的ipv6，还是无法访问ipv6网络的。(待解决，很奇怪，计算是内网，只是外部无法访问到内部，但也应该能访问到ipv6网络)</li>
<li>使用路由器桥接猫。 这个能行，但是受限于猫的性能。</li>
<li>使用猫的桥接模式(不是猫桥接到路由器)。其实就是不用光猫拨号，用路由器拨号。猫这里只做猫的功能，然后将网络功能桥接到某个网口，该网口连接路由器wan口，路由器进行拨号。</li>
</ul>
</div>]]></content>
      <categories>
        <category>Skills</category>
      </categories>
      <tags>
        <tag>宽带</tag>
        <tag>ipv6</tag>
      </tags>
  </entry>
  <entry>
    <title>提升幸福度的App</title>
    <url>/2022/04/19/%E6%8F%90%E5%8D%87%E5%B9%B8%E7%A6%8F%E5%BA%A6%E7%9A%84App/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><h1 id="Macos"><a href="#Macos" class="headerlink" title="Macos"></a>Macos</h1><ul>
<li>菜单栏／状态栏软件<ul>
<li>Hidden Bar</li>
<li>iStat Menus</li>
<li>Paste</li>
<li>MenuBarX</li>
</ul>
</li>
<li>软件<ul>
<li>Mos</li>
<li>Jitouch</li>
<li>键指如飞： (显示当前app的快捷键)</li>
<li>自动切换输入法</li>
<li>iShot</li>
</ul>
</li>
</ul>
<h1 id="Chrome插件"><a href="#Chrome插件" class="headerlink" title="Chrome插件"></a>Chrome插件</h1><ul>
<li>videospeed</li>
<li>OneTab</li>
<li>Google 翻译</li>
<li>Tampermonkey<ul>
<li>网盘助手</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>app</tag>
        <tag>效率</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2022/04/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li><a href="#%E6%95%99%E7%A8%8B">教程</a></li>
<li><a href="#%E8%AF%AD%E6%B3%95">语法</a></li>
<li><a href="#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">注意事项</a></li>
<li><a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9C%A8%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%B8%AD%E8%BF%90%E7%94%A8">正则表达式在编程语言中运用</a></li>
<li><a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%BC%95%E6%93%8E">正则表达式引擎</a></li>
</ul>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p><a href="https://www.runoob.com/regexp/regexp-tutorial.html">菜鸟教程</a> </p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li><p>正则：匹配(核心，基础(其他的功能都是在匹配基础上的)), 提取。</p>
</li>
<li><p>一般我们要处理的 输入 都是字符串形式的。</p>
</li>
<li><p>正则表达式也是以字符串形式，也叫模式串，规则串。<br>（输入串中只要有部分 匹配 模式串的，那么就属于匹配，true，如果连部分都没匹配，就是不匹配，false）</p>
<ul>
<li>原生的正则表达式： 字符串形式 ‘&#x2F;pattern&#x2F;flags’.<br>模式串包裹在&#x2F;&#x2F;中。<br>pattern的元字符： 普通字符，非打印字符(用转义表示)，特殊字符，限定符，定位符。  <a href="https://www.runoob.com/regexp/regexp-syntax.html">语法</a></li>
</ul>
</li>
</ul>
<p>元字符的完整列表以及它们在正则表达式上下文中的行为：<a href="https://www.runoob.com/regexp/regexp-metachar.html">语法2</a></p>
<p>flag，是标志&#x2F;修饰符，正则表达式的标记用于指定额外的匹配策略。有g i m s。 <a href="https://www.runoob.com/regexp/regexp-flags.html">语法3</a></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li><p>正则在不同环境下有不同的方言。 要注意区别。</p>
<ul>
<li>有的正则表达式是 放在&#x2F;&#x2F;里面的，如”&#x2F;^(abc)(bcd)&#x2F;g” g是修饰符&#x2F;标记符 表示全局匹配。 放在&#x2F;&#x2F;里的也是原生的正则表达式的语法。</li>
<li>有的直接开始 “^(abc)(bcd)”，修饰符在其他地方设置。</li>
</ul>
</li>
<li><p>输入的字符串形式有单行，多行(含\n)。</p>
</li>
<li><p>正则表达式的单行模式 和 多行模式， &#x2F;pattern&#x2F;g, &#x2F;pattern&#x2F;gm。<br>多行模式 只是影响到 ^ $ 定位符的作用。如果没有^  $ 那么单行模式和多行模式没什么区别。</p>
<ul>
<li>对于正则表达式为单行模式，将输入的字符串(不管单行还是多行) 都以整体去处理。 ^ $ 定位整体的开头和结尾。</li>
<li>对于正则表达式为多行模式的，多行模式下会改变^和$的含义【^和$是匹配整个字符串的开头和结尾】，使它在任意一行的行首和行尾进行匹配，即每行每行处理。 如果没有^$那么会以所有行整体处理，不是以行为单位的一行一行处理。</li>
<li>注意，正则中的. 无法匹配\r \n。如果要做多行&#x2F;跨行匹配，见下面讨论。多行&#x2F;跨行匹配和 单行模式 多行模式没有关系，不同的概念。<pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"runoobgoogle\ntaobao\nrunoobweibo"</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> n1<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^runoob</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 匹配一个 </span>
    <span class="token keyword">var</span> n2<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^runoob</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 多行匹配</span>
	document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>n1<span class="token punctuation">;</span> <span class="token comment">//runoob</span>
	document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>n2<span class="token punctuation">;</span> <span class="token comment">//runoob,runoob</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"runoobgoogle\ntaobao\nrunoobweibo"</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> n1<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">runoob</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
    <span class="token keyword">var</span> n2<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">runoob</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>n1<span class="token punctuation">;</span> <span class="token comment">//runoob,runoob</span>
	document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>n2<span class="token punctuation">;</span> <span class="token comment">//runoob,runoob</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>跨行&#x2F;多行匹配问题。<br>和正则表达式的单行模式 多行模式 没有必然关系。 <a href="https://developer.aliyun.com/article/15973">参考</a><br>.不能匹配换行，\r和\n。（不匹配回车和换行）<br>解决跨行匹配问题：主要就是要解决\n或\r的匹配。</p>
<ul>
<li>使用s修饰符。 &#x2F;pattern&#x2F;s。</li>
<li>把 . 改为  (?:.|\n)<br><a href="https://blog.csdn.net/qq_39241986/article/details/100036180">参考</a><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">'123\n\rabcbcd'</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> n1<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">123.*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
	<span class="token function">alert</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ==> 123</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">'123\nabcbcd'</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> n1<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">123.*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gs</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
	<span class="token function">alert</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//==> 123\nabcbcd</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
正则&#x2F;123.+&#x2F;g 不能匹配 “123\nabc”。<br>正则&#x2F;123.+&#x2F;gs 可以匹配 “123\nabc”。</li>
</ul>
</li>
<li><p>正则贪婪模式与非贪婪模式。<a href="https://www.cnblogs.com/admans/p/11955614.html">链接</a></p>
<pre class="line-numbers language-none"><code class="language-none">当 ? 字符紧跟在任何一个其他限制符 (*, +, ?, &#123;n&#125;, &#123;n,&#125;, &#123;n,m&#125;) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 &quot;oooo&quot;，&#39;o+?&#39; 将匹配单个 &quot;o&quot;，而 &#39;o+&#39; 将匹配所有 &#39;o&#39;。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">可以看到，在“整个表达式匹配成功”的前提下，非贪婪模式才真正的影响着子表达式的匹配行为，如果整个表达式匹配失败，非贪婪模式无法影响子表达式的匹配行为。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<p>^ 表示开始。 $ 表示结束。  &#x2F;^(abc)(bcd)$&#x2F; 表示 以abc开始 bcd结束。 &#x2F;^(abc)|(bcd)$&#x2F; 表示以abc开始 或者 bcd结束, abcagugh, asugbcd, bcdsaa 不行， safabc 不行。  &#x2F;^(abc)$|^(bcd)$&#x2F; 匹配 abc 或bcd。  </p>
<ul>
<li><p>()也用于捕获分组。例外，如果()中前面有如下会变成非捕获分组，变成先行 后行断言： ?:、?&#x3D;、?&lt;&#x3D;、?!、?&lt;!等。  ?:仅仅是非捕获。后面四种不仅非捕获，而且零宽(即不消耗字符)，而且还有特定作用。</p>
</li>
<li><p>反向引用。 <a href="https://www.runoob.com/regexp/regexp-syntax.html">链接</a></p>
</li>
<li><p>反向引用。 向后处理视为正向，引用到前面的规则，所以叫反向引用。<br>(?:[1-9])([a-z]+)\1<br>123456runoobrunoob623runoob456 &#x3D;&gt;6runoobrunoob</p>
<p>([1-9])([a-z]+)\1<br>123456runoob623runoob456 &#x3D;&gt; 6runoob6<br>123456runoob123runoob456 &#x3D;&gt; 无</p>
</li>
<li><p>先行断言，后行断言。<br>?&#x3D;、?&lt;&#x3D;、?!、?&lt;! 的使用区别。<a href="https://www.runoob.com/w3cnote/reg-lookahead-lookbehind.html">链接</a><br>(?&#x3D;pattern) 零宽正向先行断言(zero-width positive lookahead assertion)<br>(?!pattern) 零宽负向先行断言(zero-width negative lookahead assertion)<br>(?&lt;&#x3D;pattern) 零宽正向后行断言(zero-width positive lookbehind assertion)<br>(?&lt;!pattern) 零宽负向后行断言(zero-width negative lookbehind assertion)<br>我感觉这里不叫正向 负向，叫正 和 负更好， 正先行断言，负先行断言。正后行断言，负后行断言。记忆方法：这里正 负向是表示肯定 否定， 先行 后行是表示 位置在pattern的前 后。<br>还有其他的叫法， 正预测先行断言， 负预测先行断言。 正回顾后发断言， 负回顾后发断言。<br>正向肯定断言， 正向否定断言， 负向肯定断言， 负向否定断言。（从查找的方向看，这种叫法其实也合理）（最后的叫法最合理。）</p>
</li>
</ul>
<h2 id="正则表达式在编程语言中运用"><a href="#正则表达式在编程语言中运用" class="headerlink" title="正则表达式在编程语言中运用"></a>正则表达式在编程语言中运用</h2><p><a href="https://www.runoob.com/regexp/regexp-intro.html">链接</a></p>
<p>在 Java 中，<code>\\</code> 表示：我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。</p>
<p>所以，在其他的语言中（如 Perl），一个反斜杠 <code>\</code> 就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个 <code>\\</code> 代表其他语言中的一个 <code>\</code>，这也就是为什么表示一位数字的正则表达式是 <code>\\d</code>，而表示一个普通的反斜杠是 <code>\\</code>。</p>
<p>java 中的正则字符串(java字符串形式的正则表达式)是包裹在原生的正则表达式字符串上的(即实际上加了一个中间层做处理)。 所以要将java字符串形式的正则表达式 转为 原生的正则表达式字符串， 要<code>\\d</code>。   java自己先对自己的字符串做处理的，而不是直接处理正则，其他的语法是直接处理正则，因此只要<code>\d</code>.</p>
<div style= "display:none;" >
    ![找不到图片时显示的文字](imgs/20220413_1.jpeg)
</div>


<p>Java中正则表达式。</p>
<ul>
<li>String类的方法中直接使用正则表达式模式串。<br>String 的str.replace(regstr, repstr) , str.find(regstr)， str.match(regstr)</li>
<li>专门的正则类。 Pattern类 (将模式串编译成pattern类)。 match类(由pattern类match方法得到match类实例)。</li>
</ul>
<p>python中的正则表达式。 <a href="https://www.jianshu.com/p/5295c5988b7f">https://www.jianshu.com/p/5295c5988b7f</a></p>
<ul>
<li>字符串类中的方法不支持正则规则。</li>
<li>专门的正则模块 re 模块。 1. 模块中的函数，re.match，re.search等。 2.专门正则相关的类。Pattern类 (re.compile(patstr) 将模式串编译成pattern类)， match类(由pattern类match方法得到match类实例)。<br>  匹配 查看一个字符串是否符合正则表达式的语法，一般返回true或者false<br>  获取 正则表达式来提取字符串中符合要求的文本<br>  替换 查找字符串中符合正则表达式的文本，并用相应的字符串替换<br>  分割 使用正则表达式对字符串进行分割。</li>
</ul>
<h2 id="正则表达式引擎"><a href="#正则表达式引擎" class="headerlink" title="正则表达式引擎"></a>正则表达式引擎</h2><p><a href="https://blog.csdn.net/weixin_55267022/article/details/118082886">https://blog.csdn.net/weixin_55267022/article/details/118082886</a></p>
<p><a href="https://www.cnblogs.com/Bubgit/p/10240790.html">https://www.cnblogs.com/Bubgit/p/10240790.html</a></p>
<p>正则表达式&#x2F;模式串。<br>根据正则表达式 构造 NFA， DFA。 （正则表达式引擎）<br>遍历字符串&#x2F;待匹配字符串。 一个一个遍历， 跟随NFA DFA进行比较，<br>0.针对整个字符串而言，如果遍历到某个字符时不在NFA／ DFA的状态中，那么不匹配。 或者 如果遍历结束时不在终结状态，不匹配。 只有遍历结束时 在 NFA／DFA的 终结状态 才是匹配。<br>1.针对部分匹配而言，如果待匹配字符串部分 走到了终结状态，那么说明部分字符串符合正则表达式。(这个可用于提取)。如果整个过程都没走到终结状态，那么就是连部分都不匹配的。</p>
<p>手动流程： 1. 正则表达式，如果可以直观转DFA，可以直接转DFA。 如果不能，先转NFA(转NFA比较直观)，再将NFA转DFA（手动）。 2.根据DFA处理待匹配字符串(手动) 。<br>正则表达式模式串-&gt;NFA-&gt;DFA—&gt;匹配。</p>
<p>完整的正则表达式程序（两部分：表达式引擎+匹配），流程（代码形式）：<br>根据 正则表达式字符串 生成 状态机(实际上是图结构)(有NFA，DFA) (节点是状态，线是输入的值)。 这个生成状态机部分的程序称为正则表达式引擎，用于生成状态机。（重点，难点）<br>然后利用状态机 去遍历待匹配字符串，看是否匹配。<br><a href="https://blog.csdn.net/weixin_39969611/article/details/114613950">https://blog.csdn.net/weixin_39969611/article/details/114613950</a><br><a href="https://baijiahao.baidu.com/s?id=1736259056451963107&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1736259056451963107&amp;wfr=spider&amp;for=pc</a></p>
<p><a href="https://blog.csdn.net/weixin_43655282/article/details/108963761">https://blog.csdn.net/weixin_43655282/article/details/108963761</a></p>
<p><a href="https://blog.csdn.net/qq_40294512/article/details/89004777">https://blog.csdn.net/qq_40294512/article/details/89004777</a> 好！ move操作的为所有出现的输入值。</p>
<p>正则表达式 可以 直观的 转为 NFA。 NFA状态转换图和转换表 都是 直观的看出正则表达式的 含义。<br>但是对于程序而言，这个不好处理，因为对输入是不确定的。 对计算机而言更合适处理的的是DFA，因此将NFA转成DFA。 转换DFA时，可能会出现多个结束状态。<br>NFA 转 DFA， 要引入闭包的概念和操作。<br>对任何非确定的有穷自动机N ，存在定义同一语言的确定的有穷自动机D。对任何确定的有穷自动机D ，存在定义同一语言的非确定的有穷自动机N</p>
<p>NFA&#x2F;DFA 都有状态转换图，状态转换表。 起始状态 终结状态。</p>
<p>NFA 有 带有和不带有“ε-边”的NFA。 两者等价。 一般用带有”ε-边”的NFA。 一般 带有”ε-边” 可以变为只有一个终结状态，而不带有”ε-边”可能会有多个终结状态。<br>NFA的不确定性：多值映射(输入一个值有多个状态转换)，带空转移。</p>
<p>NFA／DFA 可以用在正则表达式。 也可以用在编译原理 的词法分析阶段(将源程序&#x2F;字符串形式 生成token表)。</p>
]]></content>
      <categories>
        <category>Programing</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>正向代理和反向代理</title>
    <url>/2022/04/14/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>之前就了解过正向代理和反向代理， 这两天突然又搞不清楚了。看来还是没有真的了解正向代理和反向代理。</p>
<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>代理，中介，委托。字面意思就是帮别人做事。原理是多了中间方。本来双方直接联系，现在不直接联系，变成了代理&#x2F;中介和某一方联系。<br>好了，中文的意思就是上面的简单解释了。 在计算机中，很多地方都会用到代理，比如：</p>
<ul>
<li>在设计模式中有 代理模式／委托模式。</li>
<li>服务器中的代理服务器。有 正向代理，反向代理。</li>
<li>网络攻击中的中间人攻击，实际上也能算代理。</li>
</ul>
<p>今天要说的就是 正向代理和反向代理。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>正向代理。用过科学上网的都知道，那个服务器就是一个正向代理服务器。<br>反向代理。用过nginx的应该比较熟悉，nginx一大特色就是支持反向代理。</p>
<div style= "display:none;" >  
    我为什么之前了解了，现在又糊涂了。主要也是因为名词的不理解。正向 反向 其实 和方向没有关系，和数据流动没关系。正是这样的翻译，让人比较迷惑和误会。
    正向代理 反向代理 都是代理。 都是代理的一种表现方式。它们主要是看给谁做代理。这个正和反是从客户端的角度来区分。从客户端角度来看，正向代理，就是给客户端做代理。 反向代理，就是給服务器做代理(即对客户端来说反过来给服务器做代理)。
</div>

<p>正向代理 反向代理 都是代理。 都是代理的一种表现方式。区分它们的关键是，看它给谁做代理。这个正和反是从客户端的角度来区分。从客户端角度来看，正向代理，就是给客户端做代理。 反向代理，就是給服务器做代理(即对客户端来说，是反过来给服务器做代理)。  </p>
<ul>
<li>在没有代理情况下，客户端和服务端是直接通讯的。</li>
<li>正向代理。 客户端请了代理&#x2F;中介，由中介和服务端通讯。中介代表了客户端。可以看成客户端和中介是一伙的，服务端是另一伙。</li>
<li>反向代理。 服务端请了代理&#x2F;中介, 由中介和客户端通讯。中介代表了服务端。可以看成服务端和中介是一伙的，客户端是另一伙。</li>
</ul>
<div style= "display:none;" >
    ![找不到图片时显示的文字](imgs/20220414_1.jpeg)
</div>

<h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><p>正向代理的运用：</p>
<ul>
<li>vpn的使用。</li>
<li>中间人攻击。</li>
<li>设计模式中 代理模式&#x2F;中介模式&#x2F;委托模式。</li>
</ul>
<p>反向代理的运用：</p>
<ul>
<li>nginx的负载均衡。负载均衡的原理就是反向代理。</li>
<li>内网传统。ngrok。原理也是反向代理。</li>
</ul>
<h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><p>正向代理的用途：</p>
<ul>
<li>对服务端隐藏客户端。 服务端只知道中介。</li>
<li>突破访问限制。 如VPN。</li>
</ul>
<p>方向代理用途：</p>
<ul>
<li>对客户端隐藏服务端。 客户端只知道中介。</li>
<li>负载均衡。</li>
</ul>
<h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><p>看到一篇很通俗的解释，<a href="https://cloud.tencent.com/developer/article/1418457">链接</a></p>
<pre class="line-numbers language-none"><code class="language-none">正向代理和反向代理的区别
虽然正向代理服务器和反向代理服务器所处的位置都是客户端和真实服务器之间，所做的事情也都是把客户端的请求转发给服务器，再把服务器的响应转发给客户端，但是二者之间还是有一定的差异的。
1、正向代理其实是客户端的代理，帮助客户端访问其无法访问的服务器资源。反向代理则是服务器的代理，帮助服务器做负载均衡，安全防护等。
2、正向代理一般是客户端架设的，比如在自己的机器上安装一个代理软件。而反向代理一般是服务器架设的，比如在自己的机器集群中部署一个反向代理服务器。
3、正向代理中，服务器不知道真正的客户端到底是谁，以为访问自己的就是真实的客户端。而在反向代理中，客户端不知道真正的服务器是谁，以为自己访问的就是真实的服务器。
4、正向代理和反向代理的作用和目的不同。正向代理主要是用来解决访问限制问题。而反向代理则是提供负载均衡、安全防护等作用。二者均能提高访问速度。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>正向代理和反向代理</tag>
      </tags>
  </entry>
  <entry>
    <title>2021双十一</title>
    <url>/2022/05/05/2021%E5%8F%8C%E5%8D%81%E4%B8%80/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="aff93dd9e09a8af64ef76e18ed098004c625c74874e820d58e185706cf7e2281">3a9386b74a75ebe57713af3bc4d282a74e3020e7fb284842999de43ed3c787097e8f8d749915098eb992815ad7db19b0e28f2c48b91462824aef79b33f96d6ff9482db9e5036e5ac00219e922deeced960cef8faad6b695fdd83fff8f3e663d0945a1b86cd5f9a4dd517f1e23e0ba455a2313c03160dc8af907c10169df8bbc314ee4f997bbb8dae90d20eed3e35aeb1898c3f20b1c4242e889edd881a2d6ce56157878cf8441eca1e283b01591da39445f9f21e1b927c7356a8faf3fb9c3322a75af6f2e75ffb7eb651c9208362045539c23b6756dd28e8503e5e451ff2ad9ea9f4a9929cac214f54016a15690a0af3ffcf55a8de00b90506d5bbab46e8bd7cbf2e3200c1ca5bf32720dbe551fb38b595465aa7d877532f897cfe3480b01bc3c299e47bfeef71f36574dd424533c09ee24310909e894b486f4c827002a70014c368786c3d1ad3c588ea8ada1a2719a6f5276d6982a468449d48907c6dda4966b8af2efaf099f045d301c1aa876cd5845aad54e934eb509f2f952e6d371e44b3db87132e0b452ddf6e4351c058fac4e70400ef50a343802ec8c278525cd3937d891f0827d6b092e4f424021d7a39906724eb83f9af2fcfceadc71e4ab3fd5dd60989d5511d855065f420ec7498ae52ad42950a46c59ec43b3e32ee8bc5420e91103f3a433aef1c4592d797b86358ce408c121328a65f39a8adde2fa3563b759496ea9837696552366f82f94982d49a9fa37421ebc6b843900928956a3bc58e6028b9fde235323eae6df288e4c2c9fd087bd3a2b4a12f9f43bd11028939f3220e080ff3ad16057238459efa49e540508f5ddc9b6f6a0a7b54006922d94b8dfd224a7789b6e0aa909a6ad49b2308d7796c57d8b83e16598203ca0c74cb2d0b44b76080a2ce3691a50bc692424f875a05affe8fd5545a93dd13a5be8e4221528d5b822b0576e0797e9a52b9439bcb8785fb00ba20420f1f9927166b617c1fac2ded54283aa1f087904dcd162fd99a73ada850cc364c1983583ef5ad971fb48543716f17bcf87d9dc890ea1a68e6f95382fa4df8286a8fc933a3bd15a98eea7762e2203951df64b230deed6fda44bf0e7d679cc475eeb310451cffe16e82e4cb7ad39785bab77aab89609d5b44f194cd972e103a5010923000150be7cdd46ee58234268c0056b79044a970bb8073ca33885a1daf7cc8d2cb23bb935918c9a8f2fdd61f0c1f1637766fa6384429d152ea4d0adddc8169e2612e8e434326a3ffd27768da5bfb69e5770ab0f165e0aa968f457db43fc3748cead7ab149a09372f34923cc494cce1938231e9ffb53eaf2b7f27bf4b7b3d2c275af9aff128818fa42b592ced4b2f104338cdf82f96811b1e785a857057888fe036938352eb9832a54eaf756475e94c07e4ac83d61ccc38809b67e1a83c92df080534b44afabe83ff4f134757185d65452ab340bd911d76016b2a662a9db29f7186c105890be49645ca2518ee3e1e509c30adfb5fe5b2c189cf50b62cffce1bef55b23151843e7c91990823c37a62624d8cc413e98769175f2dae6b4478e0e2e25a54c1c385fa581f89ef729c6785733c5de0038846643afa34c33b16547d74d1ec9d34b7ccee67cdfa6f16e24887c3698c6c67fc6b53149832eef680f4a3cc61797e54f60c047381ca5ef46365dde6fc0b90e557d79bbe68aff85a60fcc192d458008c630432f6ce1151282fe5b813826ba409dd40dbb16857e79f65c653d32e6a91a7369f473173f0465c42c3dd3ac7da7977a05de8752907b1ccda78a66a87b584e11584fbf2d761fb405acf1b908235c563d2e865ea0c5a02a8d7d2d4ac3d3d0f0fcfac263b9ffe2e8f06d5340fba470c175fbf16a1c1e1eb52bcb7c1a2a839bb14c3ce9d2f50db0557a415628b3d05e0d7feaa6a971a226cd9510876147b1c51c298da7f982b0871d06ad346456aa609d1786887586678a5c2cfc0371202ab6f3fdab588d70ee226c7d04459b1e0e6c0d6739200a4d67ee02045c1cc998a143d1247444e37529e05c9fff19fd433234fd584f9cc61a4b95306fc7a9117962f97ffaf9f4ba7c41c6b023198369600c9071041e81304efd88cbb6f78737ba27755e2945e11f95d0af77ec65bd6ac12ba88646f65677d9bb26a37e65a31d44ccc76419da0a31aaea7ed34059b33d8c2c617098dfcd1942a01c744fe29c4e9e144e4568ffdad171df7ba87a376899d124b0ad8bf0ab4ab932af4180b2f405d584493f1d8c20671cd7bd065e8d928d2a6e7070ce772fd48661a5dc54cec75b74158d89d6dd18efbe62276486945e8a043c2f1fb1cddfade675925eefffe44b0635e380edde5f3d5bf5b07f9b493b452afbf59a6326e576a13d1cca821712010229e983d3813ed7e36fec43acdd5f8b261421bad2a44075615a3ab9fd67ad4ad60b6417579b3122a57cbb6843db050cc1a15c50cdca53a6fae04adc28b5946b78f7b309e9fa38fad86aed938838f45191332777b9104038aefd65165b8972f4066f7888ce0fccf3da3a0f5258013a4b2e2b2053493826743d4484d97574cab4c1c5874277877b04087e333dd22ad878ebf2e7480ed89dd373e19a3d65b260ae263339bd371295b11ba851c7d0f140c11d9a30503e340b63638578ca3f5e724e57fa9dcbac07eb9b27a846feaa3832e329b43b73eab7dce2d4793a3e26680ba660155346f47eb31d423235c7417062854d974a56b43a318f66fd8572ce30f8005c572ea7e30ae43ec718e4ef8b7f5d2cfc284371e1c6e7d3652c706e177e41fd3f80fcc7b050faf5aff40884fa2e7d65eb71d34694169e7ce017acfa49324e9bf8f599d3a7533d0a63535dfc9523885865df62fee1a8d8197ed50488d12150815dfc29ad71e4d471eff563e28328226402f119566c1668c46826b22b197c6b3efe32c9240c2039bf45835f8b5c42312ec79fccdacf36832cf8cd96e2d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>购物</tag>
      </tags>
  </entry>
  <entry>
    <title>web服务器</title>
    <url>/2022/05/23/web%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>unix&#x2F;linux&#x2F;macos 中关于软件的使用方法。学习方法。<br>安装软件后，注意以下关键：<br>1.安装的可执行文件／命令 的具体路径 以及 命令名。  （可用which查看）<br>2.安装之后是否修改环境变量。<br>3.配置文件位置 以及 配置方法。<br>4.重要的路径，如web服务器的 根目录 ， log文件路径 等 重要文件的路径。<br>5.软件 命令的 常用使用方法。 比如 开启， 关闭， 重启 等等。 善用 xxx -h, xxx –helps</p>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>比如，以nginx 为例。<br>1.安装后的软件&#x2F;命令路径为 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;nginx.  一般使用which都可以查出来。 它的命令名就是nginx。<br>2.nginx没有修改环境变量。 查看 ~&#x2F;.bashrc 或 ~&#x2F;.bash_profile. 如果需要，那么可以在该文件中修改。<br>3.nginx 具体配置文件位置  &#x2F;usr&#x2F;local&#x2F;etc&#x2F;nginx&#x2F;nginx.conf。 具体路径以及配置方法 可直接百度或者官网查看。<br>4.nginx的重要路径除了配置文件外，还有服务器 的文件根目录， &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;nginx&#x2F;1.19.5&#x2F;<br>5.nginx 安装之后 命令为 nginx. 常用的命令有：<br>    nginx 启动服务器。<br>    nginx -s stop<br>    nginx -s reload</p>
<h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p>apache使用。</p>
<p>1.apachectl 是可执行的脚步文件。 调用httpd 程序&#x2F;命令的。<br>httpd 是apache web服务器的核心程序。<br>&#x2F;usr&#x2F;sbin&#x2F;apachectl<br>&#x2F;usr&#x2F;sbin&#x2F;httpd<br><a href="https://blog.csdn.net/u013368932/article/details/54881324">https://blog.csdn.net/u013368932/article/details/54881324</a></p>
<p>2.配置文件在 &#x2F;etc&#x2F;apache2&#x2F;httpd.conf。</p>
<p>3.web服务器的根目录在httpd.conf 中定义了。DocumentRoot “&#x2F;Users&#x2F;rzet&#x2F;ApacheDocRoot”</p>
<ol start="4">
<li>httpd<br>httpd -k start&#x2F;restart&#x2F;stop</li>
</ol>
<h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><p>tomcat本身也是一个web服务器。 同时也是servlet容器。<br>apache是一个web服务器。性能比tomcat好。 所以一般可以将apcahe 和 tomcat整合使用， apache作为web服务器，tomcat只作为servlet容器。</p>
]]></content>
      <tags>
        <tag>web服务器</tag>
        <tag>nginx</tag>
        <tag>apache</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>乱七八糟知识</title>
    <url>/2022/05/05/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li><a href="#%E5%85%B3%E4%BA%8E%E6%89%93%E5%8D%B0-%E5%8D%B0%E5%88%B7-%E5%86%B2%E5%8D%B0">关于打印 印刷 冲印。</a></li>
<li><a href="#%E9%97%A8">门</a></li>
<li><a href="#%E9%82%AE%E4%BB%B6">邮件</a></li>
<li><a href="#"></a></li>
<li><a href="#android-%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6">android 四大组件</a></li>
<li><a href="#%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE">获取系统设置</a></li>
</ul>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  </p>
<h3 id="关于打印-印刷-冲印。"><a href="#关于打印-印刷-冲印。" class="headerlink" title="关于打印 印刷 冲印。"></a>关于打印 印刷 冲印。</h3><p>打印复印、印刷、冲印。<br><a href="https://zhidao.baidu.com/question/25154682.html">https://zhidao.baidu.com/question/25154682.html</a><br>打印不需要模版。 印刷需要一个模版。</p>
<p>打印、印刷用的是CMYK模式。显示器等 设备用RGB模式。<br>RGB是加色模式，CMYK是减色模式 。RGB模式是一种发光的色彩模式 ， CMYK是一种依靠反光的色彩模式 。<br>RGB的原理是光源发出光到⼈眼（即加⾊原理），在RGB显示屏上是适⽤的（然⽽不是所有的显示屏都是<br>RGB的）。但凡是涉及到印刷，将图案放置在纸张、布料等物体上，它适⽤的原理就会变成物体反射光到<br>⼈眼（即减⾊原理）。<br><a href="https://www.zhihu.com/question/20476536">https://www.zhihu.com/question/20476536</a></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  </p>
<h3 id="门"><a href="#门" class="headerlink" title="门"></a>门</h3><p>与 或 非。在数字电路中的表示，门电路。与门，或门，非门。<br>门电路是数字电路中最基本的逻辑单元。<a href="https://zhuanlan.zhihu.com/p/395540201">https://zhuanlan.zhihu.com/p/395540201</a></p>
<p>电路(电子电路)：模拟电路 和 数字电路。<br><a href="https://www.eefocus.com/analog-power/465165">https://www.eefocus.com/analog-power/465165</a><br><a href="https://zhuanlan.zhihu.com/p/166110092">https://zhuanlan.zhihu.com/p/166110092</a></p>
<p>常见的电子元器件。 工作原理，功能以及作用，具体应用。  </p>
<p>电阻，电容，电感器，二极管，三极管，变压器，继电器，开关 等等。<br>二极管：PN结，单向导电性。 P positive，N negative。 这里是指正 负电荷。N型，因为多了自由电子，对外显负电。P型，多了空穴，对外显正电。<br>单质硅是不导电的，要让其导电，加入了P，或 N。<br>N型： Si+P。 多了一个电子，自由移动的载流子， 形成电流。电子流出，负极N极。 电子是多数载流子，空穴 是少数载流子。<br>P型： Si+B。 少一个电子，空穴，(相当于正电粒子),吸引电子流动，形成电流。电子流入，正极P极。空穴是多数载流子，电子是少数载流子。<br>要导电，就要电子和空穴复合。<br>三极管： 发射极，基极，集电极。  发射区，基区，集电区。 电流从基极流向发射极。从集电极流向发射极。<br>NPN型。 两个PN结。 </p>
<p>电子负电荷。 电子移动方向 与 电流方向相反。<br>正负极 指电流的正负极。<br>正负电荷 指粒子是正&#x2F;负电荷。<br>粒子的正负 是电荷的正负。正电荷 负电荷。</p>
<p>物理上规定电流的方向，是正电荷定向运动的方向（即正电荷定向运动的速度的正方向或负电荷定向运动的速度的反方向）。电流运动方向与电子运动方向相反。<br>电荷指的是自由电荷，在金属导体中的自由电荷是自由电子，在酸，碱，盐的水溶液中是正离子和负离子。</p>
<p>我们一般所说的电流，指的是正电荷的流向，但实际上正电荷是不会动的，真正会动的是“自由移动的电子”，但电子是带负电的，从“电源的负极”流出，和我们平常所言的“电流从正极流出”正好相反。</p>
<p>物体传导电流的能力叫做导电性，非电解质物体导电的能力是由其原子外层自由电子数以及其晶体结构决定的，比如同样是碳单质，石墨导电，金刚石不导电。<br>硅单质被称为半导体，是因为硅的导电性是变化的。<br><a href="https://www.zhihu.com/question/303408616">https://www.zhihu.com/question/303408616</a></p>
<p>半导体是指导电能力介于金属和绝缘体之间的固体材料。</p>
<p>正极 负极，根据电势高低。电势高 正极， 电势低 负极。</p>
<p>电池的正极 负极。</p>
<p>电流方向。</p>
<p>电子运动方向。</p>
<p>粒子带电(正负电荷) ,不带电(中性)。<br>电子 带负电荷。<br>原子核</p>
<p>物质，分子，原子(原子核，电子）。<br>原子核：质子(正电荷)，中子(不带电)。<br>质子、中子、电子是构成原子的三种基本粒子。<br>电荷是粒子的基本性质。带正电荷 带负电荷 不带电。</p>
<p>电池的原理是 原电池， 充电的时候是电解池。</p>
<p>升失氧(氧化反应，被氧化，还原剂)，降得还(还原反应，被还原，氧化剂)。</p>
<p>升价 失去电子 氧化反应。</p>
<p>降价 得到电子 还原反应。</p>
<p>正极负极。（电池。电流方向／电势高低，电子方向）<br>阴极阳极。（电解池，原电池。阳极 氧化反应 吸引负离子， 阴极 还原反应 吸引阳离子。）</p>
<p>氧化还原反应（氧化反应，还原反应）：（从最底层电子层面的得失来一步步推导 记忆）<br>失升氧(失去电子 升价 氧化反应)。充当还原剂，具有还原性，发生氧化反应，得到氧化产物。<br>得降还(得到电子 降价 还原反应)。充当氧化剂，具有氧化性，发生还原反应，得到还原反应。<br>利用氧气助记(氧气是氧化剂)： 比如，氧气和铁 反应。 氧气和铁 反应。<br>(h2+o2&#x3D;h2o。 其中氧气 得到电子，降价，发生还原反应。 是充当氧化剂，具有氧化性。 氧气发生还原反应，得到还原产物 h2o。  氢气 失去电子，升价，发生氧化反应。 是充当还原剂，具有还原性。 氢气发生氧化反应，得到氧化产物h2o。)</p>
<p>百科：<a href="https://baike.baidu.com/item/%E6%B0%A7%E5%8C%96%E5%89%82/2520415">https://baike.baidu.com/item/%E6%B0%A7%E5%8C%96%E5%89%82/2520415</a><br>在氧化还原反应中，获得电子的物质称作氧化剂 [1]  ，与此对应，失去电子的物质称作还原剂。狭义地说，氧化剂又可以指可以使另一物质得到氧的物质，以此类推，氟化剂是可以使物质得到氟的物质，氯化剂、溴化剂等亦然。<br>（注：这两种定义有不同，前者强调电子的得失，后者则强调氧元素的得失。根据前者定义，一些物质，如二氟化氙是强氧化剂，而根据后者定义，则为氟化剂。本词条主要描述前者。）<br>含有容易得到电子元素的物质，即氧化性强的物质常用氧化剂。</p>
<p>氧化剂是在氧化还原反应中，获得电子的物质。氧化剂具有氧化性，得到电子化合价降低，发生还原反应，得到还原产物。</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;    </p>
<h3 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h3><p>收取邮件一般是客户端主动行为，而不是服务端行为。(其实很多时候都是客户端主动，服务端被动。除非是一直保持连接，才能服务端主动。) 客户端不断去服务端取邮件，这样看过去像服务端主动发过来的，这样看过去也像实时收到。其实后面都是客户端在不断向服务端发送请求的，一直在循环loop。<br>亦或客户端和服务端一直保持连接，通过类似心跳包一直保持连接，那么这时服务端就可以主动发送邮件给服务端的。 另外，邮件并不是像IM那样实时的，所以也不必维持时刻的连接。一般服务端和客户端 要一直维持连接，那么也是需要类似 客户端那样不断发送心跳包 来维持连接的（一直保持也很耗资源）。 并没有啥都不发送就能一直维持连接的，因为一个连接最多只能维持一段时间，无法一直维持的。 在邮件这里，也是同样的道理。 另外，一般都是客户端主动行为，很少服务端一开始就主动行为的。</p>
<p>代码中发送邮件，那么肯定需要一个邮箱地址，而这个邮箱地址要给服务器鉴权用的。那么就需要某个stmp服务器才能发送（鉴权以及发送其他smtp服务器）。这个服务器可以用三方的如qq 163，也可以用自己写的stmp服务器或linux的mail(不过很大程度上会被拒收) 。<br>所以代码中并不是只要有收件人的邮箱地址就行的，要有我们收件人的邮箱地址以及该邮箱地址的stmp服务器 才行。 我们客户端是要通过服务端发送邮件，而不是单单客户端就能发送邮件的。</p>
<p>代码中实际上 1.用发送方用自己的stmp服务器发邮件，2.也可以用市场上第三方stmp服务器的。 (直接食用stmp服务器进行发送，不需要发送方的邮件地址和鉴权，直接用stmp服务端发送的)<br>但基本用的还是第三方，而不是用自己的stmp服务器。<br>为什么用第三方的stmp服务器。因为如果用自己的stmp服务器发送邮件，可能会被对方的stmp服务器拒绝(虽然stmp服务器之间不需要什么鉴权，不过有的商用的stmp服务器会拒绝一些奇怪domain的stmp服务器发件，因为有垃圾邮件等)，因为市场常用的stmp服务器(如QQ 网易等)，都会对不信任的domain的stmp服务器拒绝的。所以我们一般用的是市场上第三方stmp服务器进行发送。<br>如果用第三方的stmp服务器那么可能需要第三方stmp服务器的用户名，密码或者鉴权码。<br>具体可以见 ~&#x2F;lxr_Code&#x2F;gitHub&#x2F;pythonDemo&#x2F;email</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  </p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>python函数参数，将类 ，类的实例作为参数传入。 python中的函数的参数可以是任何类型，函数，类， 实例， 一般类型的数据。<br><a href="https://blog.csdn.net/qq_27403925/article/details/105418916">https://blog.csdn.net/qq_27403925/article/details/105418916</a></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  </p>
<h3 id="android-四大组件"><a href="#android-四大组件" class="headerlink" title="android 四大组件"></a>android 四大组件</h3><p>android 四大组件 Activity， Service，ContentProvider，Broadcast。<br>Intent</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; </p>
<h3 id="获取系统设置"><a href="#获取系统设置" class="headerlink" title="获取系统设置"></a>获取系统设置</h3><p>在linux／android中，获取系统设置，1.读取文件&#x2F;配置文件 2.使用api获取。 （很多时候读取文件都能获取。如果获取不到或者api更方便，才会用api。 其实很多软件的设置等也是从配置文件／数据等去处理的）</p>
]]></content>
      <tags>
        <tag>未分类</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器模式</title>
    <url>/2022/05/24/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li><a href="#1">1</a></li>
<li><a href="#2">2</a></li>
</ul>
<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>迭代器模式&#x2F;原理：利用迭代器 迭代&#x2F;循环遍历 可迭代对象中的数据集合。 原理上是利用迭代器的。<br>而且不是一次性将全部读取到内存中，而是一个一个读取，用过的内存再被覆盖，这样明显不会占用太多内存。迭代器并不是一次性读出所有数据，而是一次一次读出.<br>迭代器模式提供一种方法顺序访问一个聚合对象中的各种元素，而又不暴露该对象的内部表示。</p>
<p>一般意义上／广义上的：<br>可迭代对象：1.本身中拥有集合。2一般 拥有或可以得到迭代器的对象(因为要通过迭代器去访问数据集合)  3.可通过迭代器访问可迭代对象中的数据集合 或 可对对象本身直接进行for的对象(实际上也是通过获取可迭代对象的迭代器去迭代其中的集合，一种语法糖罢了)。  &lt;&#x3D;&#x3D;&gt; 可迭代&#x2F;循环 (其中的数据集合)的对象 &lt;&#x3D;&#x3D;&gt; 可for&#x2F;while 的对象(使用for while 或 直接在for foreach 中使用的)  </p>
<p>迭代器： 一般指，可以对可迭代对象／数据集合  进行迭代(循环)处理的对象。通过迭代器 可以迭代(循环)遍历可迭代对象中的数据集合。所以 一般迭代器中是拥有或可访问到可迭代对象中的数据集合或者本身也是可迭代对象(自然就能访问到可迭代对象中的数据集合)，而且会维护一个index和集合个数。<br>迭代器对象本身不能用于for中(不一定，有的具体语言语法是迭代器本身也是可迭代对象，因此也可以直接用于for)。 但是可以通过迭代器去迭代访问集合中的数据。</p>
<p>我们编程中直接对外的接口为可迭代对象（因为最直接的表现拥有数据集合，因此直接与我们接触的就是可迭代对象）。 通过可迭代对象 可以获得 迭代器。 通过迭代器 可以迭代访问可迭代对象中的数据集合。</p>
<p>迭代访问可迭代对象中的数据集合： 1.通过获取迭代器，从而迭代访问可迭代对象中的数据集合。 2.通过for直接使用可迭代对象(原理也是1，实际上一种语法糖)。</p>
<p>[广义的，狭义的 可迭代对象 迭代器。 广义上一般 不是某种具体的语法。 狭义的 一般是语言中特指的类，符合广义的含义 的类对象。一般在某个语言中说 可迭代对象 迭代器是狭义的指该语言中狭义上的迭代器 可迭代对象，一般是符合特殊要求的类]</p>
<p>注意，具体语言中的可迭代对象和迭代器，如果有语法所谓的可迭代对象 迭代器， 那么这个可迭代对象和迭代器一般是指 狭义上的迭代器 可迭代对象，是某种特殊要求的类。</p>
<p>通过demo来体会下迭代器模式，可迭代对象， 迭代器。<br>关键：<br>1.类的设计<br>可迭代对象设计：a.可迭代对象本身拥有数据集合。b.通过可迭代对象可以获取到迭代器(因此可迭代对象应该能获取到或持有迭代器)。<br>迭代器设计：a.通过迭代器可以访问到可迭代对象(因此可迭代器要能访问可迭代对象的能力) b.迭代的访问,持有idx指针或其他能表明数据集合状态的值。维持状态、进度，也即用到索引。<br>2.对外接口使用（通过可迭代对象，获取迭代器，通过迭代器访问可迭代对象(中的数据集合)或直接在for中使用可迭代对象本身）。<br>demo：<br>C<br>Java<br>Python</p>
<p><a href="https://cloud.tencent.com/developer/article/1805426">https://cloud.tencent.com/developer/article/1805426</a></p>
<p><a href="https://www.jianshu.com/p/a40d5a42d643">https://www.jianshu.com/p/a40d5a42d643</a></p>
<p><a href="https://blog.csdn.net/jxqingge/article/details/81296465">https://blog.csdn.net/jxqingge/article/details/81296465</a></p>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><pre class="line-numbers language-none"><code class="language-none">package cn.bjsxt.interator;
&#x2F;**
 * 简化迭代器原理
 * hasNext
 * next
 * @author Administrator
 *
 *&#x2F;
public class MyArrayList &#123;
    private String[] elem &#x3D; &#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;&#125;;
    private int size &#x3D; elem.length;
    private int curror &#x3D; -1;
    
    &#x2F;**
     * 判断是否存在下一个元素
     * @return
     *&#x2F;
    public boolean hasNext() &#123;
        return curror+1 &lt; size; &#x2F;&#x2F;指向下一个元素 
    &#125;
    
    &#x2F;**
     * 获取下一个元素
     *&#x2F;
    public String next() &#123;
        curror++;         &#x2F;&#x2F;移动一次
        return elem[curror];
    &#125;
    
    
    public static void main(String[] args) &#123;
        MyArrayList list &#x3D; new MyArrayList();
        while(list.hasNext()) &#123;
            System.out.println(list.next());
        &#125;
    &#125;
    
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>严格意义上来将，MyArrayList 这个只是用到了迭代器模式，MyArrayList并不是定义上的可迭代对象。</p>
<p>可迭代对象在不同语言中的实现有不同的要求(语法要求)。<br>Java中是指 要必须实现 Iterable 接口。python中是实现继承Iterable类或实现__iter__ 方法 。才能称之为可迭代对象。 可迭代对象 特征： 对象本身可以直接用于 for ，增强的foreach 的语法中。（通常本身也可以获取到迭代器，或 持有迭代器引用）</p>
<p>迭代器在不同语言中的实现有不同的要求。<br>Java中是指要必须实现Iterator接口(该接口有两个方法 hasnext() next()). Python中是继承Iterator类或实现__iter__和__next__。 迭代器特征： 对象本身不能用于for中。 但是可以通过迭代器去迭代访问集合中的数据。</p>
<p>ps：java中仅仅自己实现hasnext next的类 并不能称之为迭代器 或 可迭代对象，那仅仅能称之为可迭代模式。 </p>
<pre class="line-numbers language-none"><code class="language-none">public interface Iterator&lt;E&gt; &#123;
    &#x2F;**
     * Returns &#123;@code true&#125; if the iteration has more elements.
     * (In other words, returns &#123;@code true&#125; if &#123;@link #next&#125; would
     * return an element rather than throwing an exception.)
     *
     * @return &#123;@code true&#125; if the iteration has more elements
     *&#x2F;
    boolean hasNext();


    &#x2F;**
     * Returns the next element in the iteration.
     *
     * @return the next element in the iteration
     * @throws NoSuchElementException if the iteration has no more elements
     *&#x2F;
    E next();
    ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">public interface Iterable&lt;T&gt; &#123;
    &#x2F;**
     * Returns an iterator over elements of type &#123;@code T&#125;.
     *
     * @return an Iterator.
     *&#x2F;
    Iterator&lt;T&gt; iterator();


    &#x2F;**
     * Performs the given action for each element of the &#123;@code Iterable&#125;
     * until all elements have been processed or the action throws an
     * exception.  Unless otherwise specified by the implementing class,
     * actions are performed in the order of iteration (if an iteration order
     * is specified).  Exceptions thrown by the action are relayed to the
     * caller.
     *
     * @implSpec
     * &lt;p&gt;The default implementation behaves as if:
     * &lt;pre&gt;&#123;@code
     *     for (T t : this)
     *         action.accept(t);
     * &#125;&lt;&#x2F;pre&gt;
     *
     * @param action The action to be performed for each element
     * @throws NullPointerException if the specified action is null
     * @since 1.8
     *&#x2F;
    default void forEach(Consumer&lt;? super T&gt; action) &#123;
        Objects.requireNonNull(action);
        for (T t : this) &#123;
            action.accept(t);
        &#125;
    &#125;


    &#x2F;**
     * Creates a &#123;@link Spliterator&#125; over the elements described by this
     * &#123;@code Iterable&#125;.
     *
     * @implSpec
     * The default implementation creates an
     * &lt;em&gt;&lt;a href&#x3D;&quot;Spliterator.html#binding&quot;&gt;early-binding&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;
     * spliterator from the iterable&#39;s &#123;@code Iterator&#125;.  The spliterator
     * inherits the &lt;em&gt;fail-fast&lt;&#x2F;em&gt; properties of the iterable&#39;s iterator.
     *
     * @implNote
     * The default implementation should usually be overridden.  The
     * spliterator returned by the default implementation has poor splitting
     * capabilities, is unsized, and does not report any spliterator
     * characteristics. Implementing classes can nearly always provide a
     * better implementation.
     *
     * @return a &#123;@code Spliterator&#125; over the elements described by this
     * &#123;@code Iterable&#125;.
     * @since 1.8
     *&#x2F;
    default Spliterator&lt;T&gt; spliterator() &#123;
        return Spliterators.spliteratorUnknownSize(iterator(), 0);
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>python中 迭代器：1.实现__iter__和__next__（<strong>iter__返回迭代器本身）。 或者  2. 继承Iterator类(该类也是有__iter__和__next</strong>)。<br>python中 可迭代对象：1.实现__iter__ 方法 (返回一个迭代器). 或者 2.继承Iteratble类(该类也是有__iter__)。<br>从python 中定义来看，python中的迭代器也是可迭代对象。 可迭代对象不一定是迭代器。 所以python中迭代器本身也可以直接用于for。<br>iter方法：<br><a href="https://blog.csdn.net/sunjintaoxxx/article/details/122060513">https://blog.csdn.net/sunjintaoxxx/article/details/122060513</a></p>
<pre class="line-numbers language-none"><code class="language-none">from collections import Iterator, Iterable
@runtime_checkable
class Iterable(Protocol[_T_co]):

@abstractmethod
def __iter__(self) -&gt; Iterator[_T_co]: ...



@runtime_checkable
class Iterator(Iterable[_T_co], Protocol[_T_co]):

@abstractmethod
def __next__(self) -&gt; _T_co: ...

def __iter__(self) -&gt; Iterator[_T_co]: ...
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Java,pyhton 中的可迭代对象 都可以得到 迭代器。（有的方式是直接持有迭代器对象）。</p>
<p>由于在C中没有相应的语法要求，迭代器 可迭代对象(由于没有语法支持，无法让对象本身用于for)， 不能在语法层面得到支持。 但是C也可以像java那样自定义构造一个迭代器，然后可迭代对象中持有迭代器(虽然这个可迭代器对象无法直接用于for，但是基本思想 框架是如此的，也是迭代器模式). </p>
]]></content>
      <tags>
        <tag>迭代器模式</tag>
        <tag>迭代器</tag>
        <tag>可迭代对象</tag>
      </tags>
  </entry>
  <entry>
    <title>音频视频多媒体流媒体</title>
    <url>/2022/05/20/%E9%9F%B3%E9%A2%91%E8%A7%86%E9%A2%91%E5%A4%9A%E5%AA%92%E4%BD%93%E6%B5%81%E5%AA%92%E4%BD%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>音频、视频、多媒体、流媒体</p>
<h3 id="单-媒体，-多媒体："><a href="#单-媒体，-多媒体：" class="headerlink" title="(单)媒体， 多媒体："></a>(单)媒体， 多媒体：</h3><p><a href="https://zhuanlan.zhihu.com/p/144495523">https://zhuanlan.zhihu.com/p/144495523</a><br><a href="https://zhuanlan.zhihu.com/p/52311894">https://zhuanlan.zhihu.com/p/52311894</a><br><a href="https://baike.baidu.com/item/%E5%A4%9A%E5%AA%92%E4%BD%93/140486">https://baike.baidu.com/item/%E5%A4%9A%E5%AA%92%E4%BD%93/140486</a></p>
<p>多媒体（duō méi tǐ） 的英文单词是Multimedia，它由media和multi两部分组成。一般理解为多种媒体的综合。多媒体是计算机和视频技术的结合，实际上它是两个媒体；声音和图像，或者用现在的术语：音响和电视。多媒体技术是当今信息技术领域发展最快、最活跃的技术，本文通过对多媒体技术的应用现状和发展趋势的分析，使我们展望到，随着日益普及的高速信息网，它正被广泛应用在咨询服务、图书、教育、通信、军事、金融、医疗等诸多行业。多媒体技术更一步地促进了我国的科技发展。</p>
<p>口语中的媒体 实际上包括所有，比如 报纸 杂志 新闻等。</p>
<h3 id="关于-音频，-视频。"><a href="#关于-音频，-视频。" class="headerlink" title="关于 音频， 视频。"></a>关于 音频， 视频。</h3><ul>
<li>音频 编码格式。</li>
<li>视频 编码格式。</li>
<li>音频封装格式(含音频 元数据 歌词等)，视频封装格式 (含音频 视频 元数据 字幕等)。 是容器。</li>
</ul>
<p>一般容器格式&#x2F;封装格式&#x2F;文件格式  决定了 文件的后缀名。 当然很多的 封装格式 也有 其名字相应的编码格式，所以很多比如 mp3, 既是编码格式也是封装格式。<br><a href="https://www.lifewire.com/what-is-an-ogg-file-2622795">https://www.lifewire.com/what-is-an-ogg-file-2622795</a><br><a href="https://cloud.tencent.com/developer/article/1924790">https://cloud.tencent.com/developer/article/1924790</a></p>
<p><a href="https://www.jianshu.com/p/def926938398">https://www.jianshu.com/p/def926938398</a><br>音频编码格式有如下：<br>AAC<br>AMR<br>PCM<br>ogg(ogg vorbis音频)<br>AC3(DVD 专用音频编码)<br>DTS(DVD 专用音频编码)<br>APE(monkey’s 音频)<br>AU(sun 格式)<br>WMA<br>音频编码方案之间音质比较（AAC，MP3，WMA等）结果： AAC+ &gt; MP3PRO &gt; AAC&gt; RealAudio &gt; WMA &gt; MP3</p>
<p>视频编码标准有两大系统： MPEG 和ITU-T，国际上制定视频编解码技术的组织有两个，一个是“国际电联（ITU-T）”，它制定的标准有H.261、H.263、H.263+、H.264等，另一个是“国际标准化组织（ISO）”它制定的标准有MPEG-1、MPEG-2、MPEG-4等。</p>
<p>常见编码格式有：<br>Xvid(MPEG4)<br>H264 （目前最常用编码格式）<br>H263<br>MPEG1，MPEG2<br>AC-1<br>RM，RMVB<br>H.265（目前用的不够多）<br>目前最常见的视频编码方式的大致性能排序基本是： MPEG-1&#x2F;-2 &lt; WMV&#x2F;7&#x2F;8 &lt; RM&#x2F;RMVB &lt; Xvid&#x2F;Divx &lt; AVC&#x2F;H.264（由低到高，可能不完全准确）。<br>在H.265出来之前，H264是压缩率最高的视频压缩格式。</p>
<p>存储封装格式<br>目前市面常见的存储封装格式有如下：</p>
<p>AVI (.avi)<br>ASF（.asf)<br>WMV (.wmv)<br>QuickTime ( .mov)<br>MPEG (.mpg &#x2F; .mpeg)<br>MP4 (.mp4)<br>m2ts （.m2ts &#x2F; .mts )<br>Matroska （.mkv &#x2F; .mks &#x2F; .mka )<br>RM ( .rm &#x2F; .rmvb)<br>TS&#x2F;PS</p>
<p>AVI : 可用MPEG-2, DIVX, XVID, WMV3, WMV4, AC-1, H.264<br>WMV : 可用WMV3, WMV4, AC-1<br>RM&#x2F;RMVB : 可用RV40, RV50, RV60, RM8, RM9, RM10<br>MOV : 可用MPEG-2, MPEG4-ASP(XVID), H.264<br>MKV : 所有</p>
<h3 id="流媒体学习："><a href="#流媒体学习：" class="headerlink" title="流媒体学习："></a>流媒体学习：</h3><p>流媒体 并不是一种新的媒体格式，只是传输方式是流式的。而这里的传统媒体是指以前播放媒体的方式都是下载后才能看。<br>从传输方式上大致可以分为传统文件下载、HTTP渐进式下载、HTTP流式传输、实时流媒体传输四大类。 前一个就是以往传统看视频的方式。后三种都能算流媒体方式。<br>流媒体中 点播 录播 直播。 上面的后三种都可以点播 录播， 只有第四种直播，第一种只能下载完成后才能观看。 </p>
<p><img src="/imgs/20220520_1.png"></p>
<p><a href="https://blog.csdn.net/flqbestboy/article/details/78123910">https://blog.csdn.net/flqbestboy/article/details/78123910</a></p>
<p>一般的http服务器上也有 mp4文件， 此时客户端也是不用全部下载完后再看的， 这个也是和流媒体有关系吗? 这个是http传输的，分段， 如果是分段，部分的数据在网页上的播放器可以解析吗?  这种从定义上来讲也算是流式，其实介于传统下载和流媒体之间。<br>流媒体（streaming media）技术，是指将一连串的多媒体数据压缩后，经过互联网分段发送数据，在互联网上即时传输影音，以供用户观赏的一种技术。<br>在流媒体技术出现之前，人们必须要先下载多媒体内容到本地计算机，等待完整的多媒体内容下载完成之后，才能够欣赏多媒体的内容。流媒体技术的出现，使人们只需经过几秒或十几秒的启动延时即可欣赏媒体内容，而无需再等待媒体内容完全下载完成了<br>从这个定义上来说，渐进式也算是流媒体的一种，只是不够完全 彻底。</p>
]]></content>
      <tags>
        <tag>音频</tag>
        <tag>视频</tag>
        <tag>流媒体</tag>
      </tags>
  </entry>
  <entry>
    <title>async</title>
    <url>/2022/07/22/async/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>关于 异步 的理解。  </p>
]]></content>
  </entry>
  <entry>
    <title>U盘装系统</title>
    <url>/2023/03/10/U%E7%9B%98%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>BIOS， EUFI。</p>
<p>MBR， GPT。 GUID(macos上的分区表)。</p>
<p>grub，LILO。 （bootloader）</p>
<p>系统：一般系统，winpe，老毛桃(基于winpe)。</p>
<p>winpe，老毛桃 等是放在u盘上的系统，选择U盘启动，从而运行winpe系统。 这些系统也有自己的bootloader，比如老毛桃引导程序界面，可以选择启动系统。</p>
<p>ventoy仅仅是引导程序 (bootloader)，并没有做成一个系统，可以引导 其他系统镜像的安装 或 其他系统的。 ventoy是基于grub2.</p>
<p>winpe 是将系统安装在了内存上。<br>所以 ventoy中只要winpe的iso镜像文件就可以启动winpe。 因为启动的时候直接将iso安装在内存上，而不是像其他os的镜像文件要先安装在某个磁盘上再load到内存。<br>所以winpe很适合放在u盘上，选择u盘启动，启动的时候会安装在内存上。</p>
<p>grub， mac的引导程序， 引导程序 都是bootloader。</p>
<ul>
<li>虚拟机识别u盘。</li>
<li>虚拟机开机启动项改为u盘。<br>  因为虚拟机启动项中没有u盘，所以曲线处理。创建一个虚拟硬盘vmdk，映射到u盘，然后添加该虚拟硬盘到虚拟机中，从而实现以U盘为启动。</li>
</ul>
<p>macos vbox中设置u盘启动。<br>0.u盘在macos中的名称 &#x2F;dev&#x2F;diskXXX。 用diskutil list查看 各磁盘信息。<br>1.设置&#x2F;dev&#x2F;diskxxx的owner。因为后续会报没有权限操作磁盘。 macos下没有disk用户组，所以只能更改disk的owner。 sudo chown。<br>2.使用macos 自带的 磁盘工具.app， 对u盘进行卸载，不是eject。如果不卸载，那么会导致访问冲突。<br>3.进入vbox安装路径下，使用其工具，创建vmdk。 cd &#x2F;Applications&#x2F;VirtualBox.app&#x2F;Contents&#x2F;MacOS， 然后<br>VBoxManage internalcommands createrawvmdk -filename &#x2F;Users&#x2F;rzet&#x2F;usb.vmdk -rawdisk &#x2F;dev&#x2F;disk2<br>4.打开vbox，某个虚拟机-&gt;设置-&gt;存储-&gt;SATA中添加虚拟硬盘-&gt;选择&#x2F;Users&#x2F;rzet&#x2F;usb.vmdk。 确定。 (如果出现虚拟磁盘访问busy，那么可能是u盘被加载了，要进行2的操作)<br>5.启动虚拟机。按F12，选择启动的磁盘。 进而进入u盘启动。<br>注意，如果在4阶段发现虚拟磁盘的uuid冲突，可以在 管理-&gt;虚拟介质管理 删除相应相应的虚拟磁盘，然后再操作4。</p>
<p>如果已经设置好了，下次再用u盘时，只要执行1后 启动虚拟机就行。</p>
<p>安装系统在u盘上。 </p>
<ul>
<li>1.直接iso文件放在u盘上，启动时直接将iso解压安装在内存上， 如WinPE。这个适合小系统。 </li>
<li>2.直接将原生系统安装在u盘上 （用系统文件镜像iso安装(不是直接将iso文件放在u盘上)，安装时将系统安装在u盘上），将u盘看成是普通的硬盘，以u盘启动就行了。比如ubuntu安装在u盘上，wintogo安装在u盘上。 这个对u盘读写速度要求高，也要比较大的容量。</li>
<li>3.将系统装在vhdx中，然后将vhdx直接放在u盘上，让引导程序可以读取到这个vhdx就行，进而以vhdx进行启动，从而实现u盘启动系统。（只要引导程序&#x2F;bootloader 可以读取到vhdx，就可以启动这个虚拟硬盘。能识别到这个虚拟硬盘后，就能进入这个虚拟硬盘中的操作系统。其实也是虚拟机技术。这个虚拟硬盘就像相当于普通的磁盘，里面安装了操作系统。严格意义上也算事虚拟机，只是将全部都放在虚拟硬盘中。其实只要引导程序可以识别虚拟机的虚拟文件，也完全可以直接用物理机来启动u盘上的虚拟机，而不必都要在虚拟机程序中启动虚拟机，目前可以直接在u盘启动的好像就vhdx，对于vmware，vbox的虚拟机可以转换成vhdx，然后再放到硬盘下就可以u盘启动了。 ventoy可以直接识别任何虚拟机的虚拟硬盘，可以直接使用）<a href="https://ventoy.net/cn/plugin_vtoyboot.html">https://ventoy.net/cn/plugin_vtoyboot.html</a></li>
</ul>
<p>wintogo(可以安装win8 win10) 可以用第二种也可以用第三种。 如果要直接安装win10 可以用2 也可以3。 安装其他系统也是可以2或者3,即直接安装或虚拟硬盘形式。 2，3方式的安装对U盘容量，读写速度都有一定的要求。大容量，最好usb3以上。</p>
<p>wintogo 安装的win8 win10 和 正常的win8 win10 安装，优势在与驱动更简单，大小更小等。</p>
<p>vbox 中的虚拟机 和 主机 文件之间复制粘贴。拖拽文件等。<br>vbox 中的虚拟机 和 主机 进行共享文件夹。 虚拟机中的windows显示为 \VBoxSvr。<a href="https://blog.csdn.net/weixin_43321041/article/details/103611942">https://blog.csdn.net/weixin_43321041/article/details/103611942</a><br>vbox 中的虚拟机 识别，访问 u盘。<br>vbox 中的虚拟机 使用串口，usb接口等。<br>vbox 中的虚拟机 使用u盘启动。<br>vbox功能很强大，强大到完全可以用虚拟机做物理机的任何事。因为虚拟机也可以用到物理机的物理接口，因此体验也完全和物理机差不多。轻度使用还是没问题的，不用专门跑到其他物理机上去使用windows。</p>
<p>centos minimal安装之后 网络设置 <a href="https://blog.csdn.net/yhblog/article/details/83112449">https://blog.csdn.net/yhblog/article/details/83112449</a></p>
<p>ventoy 折腾：<br>0.u盘制作ventoy。<br>1.u盘放入winpe的iso文件。<br>2.u盘放入vhd &#x2F; vdi.vtoy 文件。<br>3.启动， F12， 选择u盘启动。</p>
<p>BIOS中 选择 机器的启动位置（某一个硬盘，某一个u盘，某一个光盘，某一个软驱，某一个网络位置）。-&gt; 多启动位置的选择。<br>bootloader(如grub2等) 选择 操作系统的启动 &#x2F; 选择分区。 选择的是 前面BIOS选中的硬盘中的某一个分区(该分区的操作系统)。 -&gt; 多系统的选择&#x2F;分区的选择。</p>
<p>开机启动： 选择某个硬盘 [bios]，选择该硬盘某个分区(分区中的os) [bootloader]。<br>有两个设置界面，bios设置，bootloader设置。</p>
]]></content>
      <tags>
        <tag>搞机</tag>
        <tag>U盘装系统</tag>
      </tags>
  </entry>
  <entry>
    <title>git and github</title>
    <url>/2023/03/13/git-and-github/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li><a href="#github-%E5%92%8C-git%E7%9A%84%E4%BD%BF%E7%94%A8">github 和 git的使用。</a><ul>
<li><a href="#%E6%B3%A8%E5%86%8C-github">注册 github。</a></li>
<li><a href="#%E5%AE%89%E8%A3%85git">安装git。</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AEssh">设置ssh</a></li>
<li><a href="#"></a></li>
<li><a href="#-1"></a></li>
</ul>
</li>
<li><a href="#%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C">其他操作</a><ul>
<li><a href="#%E5%90%8C%E4%B8%80%E5%8F%B0%E5%A4%9A%E8%B4%A6%E5%8F%B7github">同一台多账号github。</a></li>
</ul>
</li>
</ul>
<h2 id="github-和-git的使用。"><a href="#github-和-git的使用。" class="headerlink" title="github 和 git的使用。"></a>github 和 git的使用。</h2><h3 id="注册-github。"><a href="#注册-github。" class="headerlink" title="注册 github。"></a>注册 github。</h3><h3 id="安装git。"><a href="#安装git。" class="headerlink" title="安装git。"></a>安装git。</h3><h3 id="设置ssh"><a href="#设置ssh" class="headerlink" title="设置ssh"></a>设置ssh</h3><ul>
<li>使用ssh 免密登陆github。 如果不用ssh，使用https，那么每次git push  git pull,就需要输入github的账号和密码。  （不过现在github规定不能https提交了）</li>
</ul>
<p>注意 github https 和 ssh 连接的不同使用。<br><a href="mailto:&#x67;&#105;&#116;&#64;&#x67;&#105;&#116;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#109;">&#x67;&#105;&#116;&#64;&#x67;&#105;&#116;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#109;</a>:<br><a href="https://github.com/">https://github.com/</a> </p>
<p>如：<br><a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#x6d;">&#103;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#x6d;</a>:ruozhiertong&#x2F;phpDemo.git<br><a href="https://github.com/ruozhiertong/UULP.git">https://github.com/ruozhiertong/UULP.git</a></p>
<p>ssh要配置公钥和私钥。 配置之后提交不用密码了。<br>https要每次都输入github的账号和密码。</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>本地repository。<br>远程github repository。</p>
<ul>
<li>如果只有本地仓库，没有远程，那么需要在远程建立仓库后，将本地和远程关联，再同步。</li>
<li>如果只有远程，没有本地，那么可以直接从远程clone。 或者本地创建后，将本地和远程关联，同步。</li>
</ul>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><ol>
<li>新建本地仓库</li>
</ol>
<ul>
<li>git init .</li>
</ul>
<ol start="2">
<li><p>新建远程github仓库。</p>
</li>
<li><p>本地和远程进行连接</p>
</li>
</ol>
<p>git remote add xxx url<br>git remote set-upstream-to xxxxxxx<br>git remote -v</p>
<p>具体信息 也可以查看仓库下的 .git&#x2F;config.<br>如：<br>[core]<br>    repositoryformatversion &#x3D; 0<br>    filemode &#x3D; true<br>    bare &#x3D; false<br>    logallrefupdates &#x3D; true<br>    ignorecase &#x3D; true<br>    precomposeunicode &#x3D; true<br>[remote “origin”]<br>    url &#x3D; <a href="mailto:&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#x74;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#x74;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;</a>:ruozhiertong&#x2F;phpDemo.git<br>    fetch &#x3D; +refs&#x2F;heads&#x2F;<em>:refs&#x2F;remotes&#x2F;origin&#x2F;</em><br>[branch “master”]<br>    remote &#x3D; origin<br>    merge &#x3D; refs&#x2F;heads&#x2F;master</p>
<p>git push oringin master &#x2F;&#x2F;将master分支push到远程 origin 的master分支上。<br>git push origin HEAD:master &#x2F;&#x2F;将当前分支push到远程的master分支上。<br>           Push the current branch to the remote ref matching master in the<br>           origin repository. This form is convenient to push the current<br>           branch without thinking about its local name.</p>
<p>git status<br>git add<br>git commit -m<br>git push<br>git pull</p>
<p>git log<br>git diff xx xx</p>
<p>如果本地branch和远程不一致，不能直接用git push。<br>fatal: The upstream branch of your current branch does not match<br>the name of your current branch.  To push to the upstream branch<br>on the remote, use</p>
<pre><code>git push origin HEAD:main
</code></pre>
<p>To push to the branch of the same name on the remote, use</p>
<pre><code>git push origin master
</code></pre>
<p>To choose either option permanently, see push.default in ‘git help config’.</p>
<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="同一台多账号github。"><a href="#同一台多账号github。" class="headerlink" title="同一台多账号github。"></a>同一台多账号github。</h3><p><a href="https://blog.csdn.net/qq_43199318/article/details/103469792">https://blog.csdn.net/qq_43199318/article/details/103469792</a><br><a href="https://blog.csdn.net/littleRpl/article/details/109801707">https://blog.csdn.net/littleRpl/article/details/109801707</a></p>
<p>0.生成两套ssh私钥和公钥。 一般在~&#x2F;.ssh目录下。<br>ssh-keygen -t rsa。<br>1.添加<br>ssh-add ~&#x2F;.ssh&#x2F;id_rsa_github1<br>ssh-add ~&#x2F;.ssh&#x2F;id_rsa_github2<br>2.a测试<br>ssh -T <a href="mailto:&#103;&#105;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#98;&#x2e;&#99;&#x6f;&#109;">&#103;&#105;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#98;&#x2e;&#99;&#x6f;&#109;</a><br>ssh -T <a href="mailto:&#103;&#x69;&#116;&#x40;&#116;&#119;&#111;&#x2e;&#x67;&#x69;&#116;&#104;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#103;&#x69;&#116;&#x40;&#116;&#119;&#111;&#x2e;&#x67;&#x69;&#116;&#104;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;</a><br>2.b<br>git clone<br>git clone <a href="mailto:&#x67;&#105;&#x74;&#64;&#116;&#104;&#x72;&#101;&#101;&#x2e;&#103;&#105;&#116;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#109;">&#x67;&#105;&#x74;&#64;&#116;&#104;&#x72;&#101;&#101;&#x2e;&#103;&#105;&#116;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#109;</a>:mswanghang&#x2F;hello-world-javascript-action.git<br>3.修改 仓库下 .git&#x2F;config 文件，将 对应的远程url改到对应的ssh配置。<br>如：<br>[remote “origin”]<br>    url &#x3D; <a href="mailto:&#103;&#105;&#x74;&#64;&#116;&#119;&#111;&#46;&#103;&#105;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#111;&#109;">&#103;&#105;&#x74;&#64;&#116;&#119;&#111;&#46;&#103;&#105;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#111;&#109;</a>:fightingcoder2022&#x2F;haxvps.git<br>    fetch &#x3D; +refs&#x2F;heads&#x2F;<em>:refs&#x2F;remotes&#x2F;origin&#x2F;</em><br>如<br>[remote “origin”]<br>    url &#x3D; <a href="mailto:&#x67;&#105;&#116;&#64;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#x67;&#105;&#116;&#64;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;</a>:ruozhiertong&#x2F;phpDemo.git<br>    fetch &#x3D; +refs&#x2F;heads&#x2F;<em>:refs&#x2F;remotes&#x2F;origin&#x2F;</em></p>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>wifi_and_p2p</title>
    <url>/2023/03/10/wifi-and-p2p/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li><a href="#%E5%B8%B8%E8%A7%81%E7%9A%84%E6%97%A0%E7%BA%BF%E6%8A%95%E5%B1%8F">常见的无线投屏</a></li>
</ul>
<h2 id="常见的无线投屏"><a href="#常见的无线投屏" class="headerlink" title="常见的无线投屏"></a>常见的无线投屏</h2><h3 id="隔空-x2F-无线投屏原理：-wifi。"><a href="#隔空-x2F-无线投屏原理：-wifi。" class="headerlink" title="隔空&#x2F;无线投屏原理： wifi。"></a>隔空&#x2F;无线投屏原理： wifi。</h3><ul>
<li>方式1.设备在同一局域网下。 这种是 CS 模型。一个服务端，一个客户端。 优点简单，可以使用多种已有协议如http等。比如很多的投屏app。电脑上安装app，手机上安装app.<br>再比如苹果的airplay两个设备也是要同一局域网下的，但并不是p2p原理，还是CS。两个设备的数据要经过第三方的路由器中转，不是直接p2p。</li>
<li>方式2.两设备直接wifi direct，p2p传输，不需要路由器的参与。 （wifi direct 技术）。 真正的p2p，点对点，不需要第三方参与。实际上是两个wifi自己之间形成的局域网。两个设备的数据直接p2p。比如Miracast，airdrop。</li>
</ul>
<h3 id="投屏协议标准（GoogleCast，chrome-cast，AirPlay，Miracast，DLNA）"><a href="#投屏协议标准（GoogleCast，chrome-cast，AirPlay，Miracast，DLNA）" class="headerlink" title="投屏协议标准（GoogleCast，chrome cast，AirPlay，Miracast，DLNA）"></a>投屏协议标准（GoogleCast，chrome cast，AirPlay，Miracast，DLNA）</h3><ul>
<li>苹果：airplay协议。</li>
<li>android： google cast， Miracast， DLNA。<br>主流的是Airplay， Miracast， DLNA。</li>
</ul>
<p>Miracast是完全支持WifiDirect。设备可以直接p2p，不用经过第三方如路由器形成的局域网。 如果在同一个局域网也可以，连接更稳定。<br>android系统自带的投屏是Miracast。 </p>
<h3 id="投屏：有线投屏-复制模式-x2F-镜像-和-扩展模式-无线投屏-流模式-x2F-推送模式，镜像模式，扩展模式-。"><a href="#投屏：有线投屏-复制模式-x2F-镜像-和-扩展模式-无线投屏-流模式-x2F-推送模式，镜像模式，扩展模式-。" class="headerlink" title="投屏：有线投屏(复制模式&#x2F;镜像 和 扩展模式)+无线投屏(流模式&#x2F;推送模式，镜像模式，扩展模式)。"></a>投屏：有线投屏(复制模式&#x2F;镜像 和 扩展模式)+无线投屏(流模式&#x2F;推送模式，镜像模式，扩展模式)。</h3><p>无线投屏原理：<br><a href="https://www.zhihu.com/question/287361675">https://www.zhihu.com/question/287361675</a><br><a href="https://www.voycn.com/article/toupingjishuyuanli">https://www.voycn.com/article/toupingjishuyuanli</a><br><a href="https://github.com/xfangfang/Macast/wiki/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B">https://github.com/xfangfang/Macast/wiki/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B</a></p>
<p>无线投屏：<br>投屏设备， 接收器设备。</p>
<p>两种模式：</p>
<ul>
<li>推送模式&#x2F;流模式&#x2F;投屏模式&#x2F;媒体文件投屏 。  视频，音乐，图像等媒体文件的投屏。<br>  DLNA，airplay。（主要用于投屏视频和音乐，投屏之后手机可以关闭或聊微信，电视不会停止播放。玩手机看电视两不误。最常见是视频软件里的tv按钮。）</li>
<li>同屏模式&#x2F;镜像模式&#x2F;录屏模式&#x2F;屏幕镜像投屏。<br>  Miracast， airplay。</li>
</ul>
<p>DLNA<br>全平台<br>条件：<br>1.投屏设备和接收设备要开启wifi，并且连接到同一个局域网。数据发送的要经过路由器中转的。<br>2.wifi网络能连接互联网。（否则接收端接收投屏 后无法从服务器获取视频流播放）<br>很多视频app中的投屏用的就是DLNA。<br>（在接收端接收发送端的视频信息之后，两个设备就没有什么关系了，各自独立了）</p>
<p>Miracast<br>pc linux 和 android<br>条件：<br>1.接收端和发送端都支持miracast。投屏设备和接收设备要开启wifi。<br>是的，只要设备wifi就行了，没有必须要求蓝牙，或者 连接第三方的路由器，也不要求能连上互联网。<br>直接进行wifi direct进行p2p连接。<br>android手机系统的的投屏 基本都是Miracast。 视频app中的投屏基本是 DLNA。</p>
<p>Miracast 只要有wifi就可以，不需要三方的路由器，也不需要蓝牙， 两个设备直接p2p连接。<br>走的是wifi p2p自己形成的局域网。 就算设备连接在同一个wifi网络下，走的还是设备间的wifip2p形成的局域网（也有自己的IP地址）。 数据不需要经过路由器中转。<br>走的是wifi网卡的p2p0接口。 Miracast并不走wlan0，即并不是走wifi的局域网，是走p2p的局域网。</p>
<p>airplay：<br>macos和iOS。<br>条件：<br>1.接收端和发送端连接同一个wifi，在同一个局域网。 不要求一定要连接互联网。<br>接收端 客户端组成cs模式。<br>maos、iOS不支持Miracast。</p>
<p>测试下 在同一个局域网下，miracast 走的是那个网络，是局域网，还是自己的p2p网络。 不管在什么网络下，miracast走的都是p2p0的接口的p2p网络。而airplay dlan走的是wlan0接口的局域网。<br>p2p网络可以直接通过两个设备wifi的p2p0接口直接发起连接，不需要经过第三方(比如路由器)，可以点对点的发起连接。<br>这个特点决定了miracast不需要两个设备在同一个wifi局域网中，并不是CS模式，是p2p模式。 而airplay dlan需要在同一个wifi局域网中，是一种典型的CS模式。  投屏之前的关键是要找到设备，miracast是p2p直接找设备，不需要经过第三方的路由方式来查找设备，数据之间两者之间传输，不经过路由器。AirPlay dlan是局域网中发现查找设备(CS模式)，是要经过路由器来查找局域网中的设备，查找、发送数据等数据啥的要经过路由器的路由、转发。</p>
<p>&#x3D;&#x3D; </p>
<p>苹果的 隔空投送&#x2F;airdrop 原理:<br>前提：要蓝牙和wifi。<br>苹果的“隔空投送”是通过蓝牙+Wi-Fi Direct实现的（直接两个wifi之间p2p，并不需要两个设备都在同一个局域网。两个wifi之间p2p自己形成局域网）。通过蓝牙识别，确定接收之后之后两台设备之间建立点对点的Wi-Fi（WLAN）链接。 利用蓝牙建立了wifi的p2p连接，然后使用wifi传送数据。<br><a href="https://zhuanlan.zhihu.com/p/566055452">https://zhuanlan.zhihu.com/p/566055452</a><br>隔空投送的原理简单的概括起来就是：“蓝牙握手、WiFi传输”。首先，Apple设备间的蓝牙通过搜索相互配对，然后利用WiFi进行传输。整个过程当中并不需要网络参与，即使是设备处于网络离线状态，依旧可以通过隔空投送进行文件传输。</p>
<p>条件：打开蓝牙和wifi。</p>
<p>弱智儿童<br>苹果airdrop的工作原理<br>AirDrop 是苹果公司推出的一种文件传输技术，可以在苹果设备（如 iPhone、iPad 和 Mac）之间快速方便地进行文件传输。</p>
<p>AirDrop 使用 Wi-Fi 和 Bluetooth 技术进行文件传输。在使用 AirDrop 时，发送设备会向周围的设备广播该文件，而接收设备可以接收并保存该文件。AirDrop 在传输过程中使用加密技术保证数据的安全性。</p>
<p>总的来说，AirDrop 的工作原理是通过在两个苹果设备之间使用 Wi-Fi 和 Bluetooth 进行文件传输，提供了一种简便快捷的文件传输方式。在使用 AirDrop 时，发送和接收设备必须处于同一个本地网络中，以便进行通信。</p>
<p>弱智儿童<br>airdrop传输是靠蓝牙还是Wi-Fi<br>AirDrop 使用 Wi-Fi 和 Bluetooth 技术进行文件传输。在使用 AirDrop 时，发送设备会向周围的设备广播该文件，而接收设备可以通过搜索周围的设备并找到该文件进行接收。</p>
<p>实际上，AirDrop 会先使用 Bluetooth 发现周围的设备，然后使用 Wi-Fi 进行文件传输。在发送设备和接收设备靠近时，AirDrop 会使用 Bluetooth 技术识别设备；在设备之间的距离较远时，AirDrop 会使用 Wi-Fi 技术进行文件传输。</p>
<p>因此，AirDrop 使用两种技术：Wi-Fi 和 Bluetooth，实现了苹果设备之间的文件传输。</p>
<p>弱智儿童<br>airdrop wifi之间是如何传送数据的<br>AirDrop 使用 Wi-Fi Direct 技术来在两个苹果设备之间进行文件传输。Wi-Fi Direct 是一种无线技术，允许两个设备直接连接而不需要通过网络设备或路由器。</p>
<p>在使用 AirDrop 时，发送设备会创建一个 Wi-Fi Direct 会话，并向周围的设备广播该文件。接收设备可以搜索周围的设备，并通过 Wi-Fi Direct 连接到发送设备。一旦连接成功，接收设备就可以开始接收文件。</p>
<p>与传统的 Wi-Fi 连接不同，Wi-Fi Direct 连接不需要通过网络设备或路由器进行转发，因此它可以提供更快的传输速度和更好的文件传输体验。同时，Wi-Fi Direct 连接还具有更强的安全性，因为它使用了加密技术保护文件在传输过程中的安全。</p>
<p>弱智儿童<br>airdrop之间是使用蓝牙传输数据吗<br>AirDrop 在两个设备之间传输数据是通过 Wi-Fi 而不是蓝牙。AirDrop 利用 Wi-Fi Direct 技术，这是一种直接在两个设备之间进行通信的无线技术。使用 AirDrop 时，发送设备会创建一个 Wi-Fi Direct 会话，并向周围的设备广播该文件。接收设备可以搜索周围的设备，并通过 Wi-Fi Direct 连接到发送设备。一旦连接成功，接收设备就可以开始接收文件。</p>
<p>蓝牙在 AirDrop 中的作用是在设备发现阶段提供快速的预配置，并确保在发送设备和接收设备之间简单的配对。但是，真正的数据传输是通过 Wi-Fi 进行的。</p>
<p>&#x3D;&#x3D;</p>
<p>苹果的 隔空投屏&#x2F;隔空播放&#x2F;airplay 原理：<br>前提：要wifi。 （不用蓝牙参与）。<br>苹果airplay还是要求要在同一个局域网下的才能连接.two devices cannot use AirPlay if they are not on the same local network. AirPlay requires a direct connection between the source device and the AirPlay receiver, typically over Wi-Fi. The devices must be connected to the same Wi-Fi network in order to use AirPlay.<br>（苹果这么做，实际上减弱了使用的场景，多了路由器的存在）<br>airdrop使用到了wifi-direct 技术， 而airplay没有。 有点奇怪，为什么不用呢。</p>
<p>do u know how the iOS Airplay works</p>
<p>Yes, I am familiar with how AirPlay works on iOS.</p>
<p>AirPlay is a technology developed by Apple that allows you to wirelessly stream audio, video, and photos from one Apple device to another. With AirPlay, you can stream content from an iPhone, iPad, or Mac to an Apple TV, AirPlay-enabled speakers, or other compatible devices. The streaming is done over Wi-Fi, which means that you can enjoy high-quality audio and video with no cords or cables.</p>
<p>To use AirPlay, you simply tap the AirPlay icon on your device and choose the destination device. The content is then instantly streamed to the chosen device, allowing you to enjoy it on a larger screen or better speakers. The technology is designed to be simple and seamless, allowing you to enjoy your content without any hassle.</p>
<p>弱智儿童<br>If two devices are not in the local network, can they use airplay<br>No, two devices cannot use AirPlay if they are not on the same local network. AirPlay requires a direct connection between the source device and the AirPlay receiver, typically over Wi-Fi. The devices must be connected to the same Wi-Fi network in order to use AirPlay.</p>
<p>If the devices are not on the same local network, it may be possible to use a third-party service or technology to extend the network and allow for AirPlay streaming, but this would require additional setup and configuration.</p>
<p>弱智儿童<br>and airdrop?<br>Like AirPlay, AirDrop also requires a direct connection between the source device and the receiving device. AirDrop uses Bluetooth to create a peer-to-peer Wi-Fi connection between the devices, which allows for the transfer of files, photos, videos, and other content.</p>
<p>For AirDrop to work, both the source and receiving devices must be within close proximity to each other and have Bluetooth and Wi-Fi turned on. Additionally, both devices must be running a compatible version of iOS or MacOS. If the devices are not in close proximity, or if they are not running compatible software, AirDrop will not work.</p>
<p>In summary, AirDrop requires a direct connection between the source and receiving devices, and both devices must be on the same local network (i.e., within close proximity) with Bluetooth and Wi-Fi turned on.</p>
<p>弱智儿童<br>if two devices are not in the same local network, can the airdrop work<br>No, AirDrop does not work between devices that are not on the same local network. AirDrop uses Bluetooth to create a peer-to-peer Wi-Fi connection between the devices, and both devices must be within close proximity to each other in order for the connection to be established.</p>
<p>If the devices are not on the same local network, they cannot use AirDrop to transfer files or other content. The devices must be close enough to each other that their Bluetooth signals can connect and establish a direct, peer-to-peer Wi-Fi connection.</p>
<p>In other words, AirDrop requires both devices to be in close physical proximity to each other in order to work properly.</p>
<p>&#x3D;&#x3D; </p>
<h2 id="Wifi-和-wifi-p2p"><a href="#Wifi-和-wifi-p2p" class="headerlink" title="Wifi 和 wifi p2p"></a>Wifi 和 wifi p2p</h2><p>wifi p2p 有使用ip吗？ 当然，用的是p2p0接口下的局域网，也有ip地址的。 经过的网卡接口是p2p0.原理也是TCP&#x2F;IP协议的。<br>sta是wlan0接口的局域网。 ap是wlan1&#x2F;ap0 接口的局域网。 p2p是p2p0接口的局域网。<br>理论上，一个物理网卡，可以有多个网卡接口，每个网卡接口都可以有mac地址，每个接口可以有ip地址，每个接口都可以有对应的局域网。</p>
<p>（<br>wifi和基站。wifi和基站之间是广播。 发现接收端只有自己时才能接收，如果不是自己不接收，而且不是自己的接收了，没有破解也无法查看内容。<br>）</p>
<p><a href="https://blog.csdn.net/honour2sword/article/details/40214171">https://blog.csdn.net/honour2sword/article/details/40214171</a><br>wifi模式： <a href="https://www.cnblogs.com/killiancheung/p/4757047.html">https://www.cnblogs.com/killiancheung/p/4757047.html</a><br>有三种模式 station, ap, p2p.<br>每路wifi可以：其中sta+p2p, ap+p2p 可以共存。 sta+ap不能共存，需要双路wifi支持才行。<br>一般可以支持到两种。 （好像不能三种同时共同组合）。<br>sta + ap.<br>sta + p2p.<br>ap + p2p.(暂未看到)<br>目前设备基本都支持两种的共存。不过有的设备&#x2F;系统还是只支持一种模式。理论上虽然可行，但还是要看具体系统是否支持。具体机器测试。<br>wifi支持三种模式，理论傻姑娘每路wifi应该可以同时使用三种，两种，一种，不过实际具体也是看系统是否支持。目前系统一般同时支持上面列出的两种。</p>
<p>这些都是只有一个物理wifi网卡。但是在驱动中会有三个网络接口虚拟出来。 （wlan0是网络接口名）。同时虚拟出三个mac地址的。 使用各自组成的局域网。<br>sta模式： wlan0.<br>ap模式：wlan1&#x2F;ap0.<br>p2p模式:p2p0. </p>
<p>只使用wifi时是station用的是wlan0.。<br>使用热点时是ap 用的是wlan1&#x2F;ap0。<br>使用wifidirect时是p2p 用的是p2p0<br><a href="https://blog.csdn.net/dxpqxb/article/details/102547411">https://blog.csdn.net/dxpqxb/article/details/102547411</a></p>
<p>比如我的小米note3.<br>三个网络接口： （ip link）<br>wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP mode DORMANT group default qlen 3000<br>    link&#x2F;ether 18:f0:e4:17:91:9e brd ff:ff:ff:ff:ff:ff<br>wlan1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 3000<br>    link&#x2F;ether 18:f0:e4:98:91:9e brd ff:ff:ff:ff:ff:ff<br>p2p0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc mq state DOWN mode DEFAULT group default qlen 3000<br>    link&#x2F;ether 1a:f0:e4:99:91:9e brd ff:ff:ff:ff:ff:ff</p>
<p>当我使用Wi-Fi和热点时：<br>ip route show:<br>192.168.1.0&#x2F;24 dev wlan0 proto kernel scope link src 192.168.1.101<br>192.168.43.0&#x2F;24 dev wlan1 proto kernel scope link src 192.168.43.1 </p>
<p>cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>192.168.43.210   0x1         0x2         64:09:80:d2:12:39     *        wlan1<br>192.168.1.105    0x1         0x2         6c:b7:49:91:fa:8a     *        wlan0<br>192.168.1.1      0x1         0x2         5c:de:34:27:14:09     *        wlan0</p>
<p>当我使用wifip2p和wifi时：<br>ip route show：<br>192.168.1.0&#x2F;24 dev wlan0 proto kernel scope link src 192.168.1.101<br>192.168.49.0&#x2F;24 dev p2p0 proto kernel scope link src 192.168.49.1 </p>
<p>cat &#x2F;proc&#x2F;net&#x2F;arp：<br>IP address       HW type     Flags       HW address            Mask     Device<br>192.168.1.105    0x1         0x2         6c:b7:49:91:fa:8a     *        wlan0<br>192.168.1.1      0x1         0x2         5c:de:34:27:14:09     *        wlan0<br>192.168.49.95    0x1         0x2         4e:ef:bf:c3:e2:a8     *        p2p0</p>
<p>查看android所有的网络接口：<br>ip link</p>
<p>虽然物理网卡只有那么一两个，但是网络接口是可以虚拟出很多的，每个网络接口都有自己的mac地址和ip地址。而且每个都能在各自的局域网中使用。</p>
<p>关于wifi的一些东西：<br>SSID<br>BSSID<br><a href="https://blog.csdn.net/weixin_42445727/article/details/94737103">https://blog.csdn.net/weixin_42445727/article/details/94737103</a><br><a href="https://blog.csdn.net/qq_38880380/article/details/79899852">https://blog.csdn.net/qq_38880380/article/details/79899852</a><br><a href="https://zhuanlan.zhihu.com/p/337819729">https://zhuanlan.zhihu.com/p/337819729</a><br><a href="https://zhuanlan.zhihu.com/p/112123189">https://zhuanlan.zhihu.com/p/112123189</a></p>
<p>同时使用wifi和热点，是使用了双路wifi技术（相当于全双工）。 虽然可以同时wifi和热点，但用的仍然是一个wifi网卡，即只有一个mac地址的，只是有两个天线，可以同时使用sta和ap模式。 （可通过代码验证的。 见项目  &#x2F;Users&#x2F;rzet&#x2F;AndroidStudioProjects&#x2F;HelloWorld&#x2F;wifiipdemo）。<br><a href="https://zhidao.baidu.com/question/1835690503744911340.html">https://zhidao.baidu.com/question/1835690503744911340.html</a><br><a href="https://blog.csdn.net/iningwei/article/details/100134783">https://blog.csdn.net/iningwei/article/details/100134783</a><br>有的手机不支持同时开启，可能是wifi网卡不支持双路(也就无法全双工)，也有可能是系统限制了。</p>
<p>同时使用wifi(sta)和热点(ap)的方式，1.软件层面支持(不管是simo，还是mimo，都可以做到。但是这个方式比较少)。 2.硬件层面支持，网卡需要有两根天线，支持双路wifi(就能全双工)。<br><a href="https://www.zhihu.com/question/361051612">https://www.zhihu.com/question/361051612</a><br><a href="https://www.zhihu.com/question/367187013">https://www.zhihu.com/question/367187013</a></p>
<p>比如小米3就不支持同时开启wifi和热点。 小米note3支持。</p>
<p>双路wifi和双频wifi。<br><a href="https://www.zhihu.com/question/61083142">https://www.zhihu.com/question/61083142</a><br>双频wifi是指支持2.4G和5G。 双路wifi能组合成全双工功能的。</p>
<p>一般的wifi是都是半双工的。 一般的wifi都是一根天线，单通道，因此是某个时刻只能收或发，因此是半双工。  对于只有一根天线，只能是一种模式(要么station 要么ap 要么p2p)或两种模式(p2p+ap, p2p+sta, 不能ap+sta)。 而对于双路wifi，实际上两根天线，组合成类似全双工的功能(对于单根天线还是半双工)，因此可以同时开启任意两种模式，一根用station模式，一根ap模式。</p>
<p>单工，双工(半双工，全双工)。</p>
<p>（单根wifi天线是半双工的。）</p>
<p>双频wifi，双路wifi(2x2MIMO)-&gt;(物理硬件上需要两根天线的)。 </p>
<p>wifi的模式。</p>
<p>wifi如果要同时开启sta+ap两种模式，物理上需要两根天线及以上，同时系统要有MIMO技术。当然如果有两张物理网卡&#x2F;wifi网卡，自然也能sta+ap，每张网卡各自用一种模式。<br>如果只有一根天线，只能同时开启三种模式中的一种或有两种共存。</p>
<p>物理网卡&#x2F;wifi网卡。<br>一个wifi，就一张无线网卡。<br>一般一个手机就一张物理wifi网卡。 是否双路要看天线数量，并不是看网卡数量。<br>一张网卡可以有多个接口，即一张网卡（可以有一个或多个mac地址）。 </p>
<p>小米note3的wifi就是2x2MIMO。 以前的都是单天线，SISO的， 现在的都是很多都是两天线，MIMO (也就是说可以同时开启多种wifi模式的).<br>小米3:<br>ip link:<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue state UNKNOWN mode DEFAULT<br>    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>2: dummy0: &lt;BROADCAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UNKNOWN mode DEFAULT<br>    link&#x2F;ether ce:6c:ec:f8:0e:e4 brd ff:ff:ff:ff:ff:ff<br>3: rmnet0: &lt;&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;[530]<br>4: rmnet1: &lt;&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;[530]<br>5: rmnet2: &lt;&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;[530]<br>6: rmnet3: &lt;&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;[530]<br>7: rmnet4: &lt;&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;[530]<br>8: rmnet5: &lt;&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;[530]<br>9: rmnet6: &lt;&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;[530]<br>10: rmnet7: &lt;&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;[530]<br>11: rmnet_usb0: &lt;BROADCAST,MULTICAST&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;ether 86:e4:e7:3b:94:57 brd ff:ff:ff:ff:ff:ff<br>12: rev_rmnet0: &lt;BROADCAST,MULTICAST&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;ether 52:7e:81:13:f1:12 brd ff:ff:ff:ff:ff:ff<br>13: rev_rmnet1: &lt;BROADCAST,MULTICAST&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;ether 26:be:92:e0:ec:07 brd ff:ff:ff:ff:ff:ff<br>14: rev_rmnet2: &lt;BROADCAST,MULTICAST&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;ether 56:da:6c:73:74:7c brd ff:ff:ff:ff:ff:ff<br>15: rev_rmnet3: &lt;BROADCAST,MULTICAST&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;ether 2e:45:10:fc:3e:2e brd ff:ff:ff:ff:ff:ff<br>16: rev_rmnet4: &lt;BROADCAST,MULTICAST&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;ether 22:21:9b:47:19:a4 brd ff:ff:ff:ff:ff:ff<br>17: rev_rmnet5: &lt;BROADCAST,MULTICAST&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;ether 52:af:43:66:e7:eb brd ff:ff:ff:ff:ff:ff<br>18: rev_rmnet6: &lt;BROADCAST,MULTICAST&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;ether 72:c6:86:21:1a:cb brd ff:ff:ff:ff:ff:ff<br>19: rev_rmnet7: &lt;BROADCAST,MULTICAST&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;ether fa:ee:ba:0d:92:c5 brd ff:ff:ff:ff:ff:ff<br>20: rev_rmnet8: &lt;BROADCAST,MULTICAST&gt; mtu 2000 qdisc noop state DOWN mode DEFAULT qlen 1000<br>    link&#x2F;ether 66:12:7d:0a:00:ff brd ff:ff:ff:ff:ff:ff<br>21: sit0: <NOARP> mtu 1480 qdisc noop state DOWN mode DEFAULT<br>    link&#x2F;sit 0.0.0.0 brd 0.0.0.0<br>26: wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP mode DORMANT qlen 1000<br>    link&#x2F;ether 64:09:80:d2:12:39 brd ff:ff:ff:ff:ff:ff<br>27: p2p0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN mode DORMANT qlen 1000<br>    link&#x2F;ether 66:09:80:d2:12:39 brd ff:ff:ff:ff:ff:ff<br>(小米3这里ap模式(开热点)和sta模式 用的都是wlan0网卡，用的是同一个mac地址的。)<br>(小米note3用的就是单独的wlan0 wlan1 p2p0)。<br> 小米note3:<br> ip link:<br> 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1<br>    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>2: bond0: &lt;BROADCAST,MULTICAST,MASTER&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ether ea:97:a3:01:da:dc brd ff:ff:ff:ff:ff:ff<br>3: dummy0: &lt;BROADCAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ether 76:32:a4:54:22:03 brd ff:ff:ff:ff:ff:ff<br>4: sit0@NONE: <NOARP> mtu 1480 qdisc noop state DOWN mode DEFAULT group default qlen 1<br>    link&#x2F;sit 0.0.0.0 brd 0.0.0.0<br>5: rmnet_ipa0: &lt;UP,LOWER_UP&gt; mtu 2000 qdisc pfifo_fast state UNKNOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>6: rmnet_data0: &lt;UP,LOWER_UP&gt; mtu 2000 qdisc pfifo_fast state UNKNOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>7: rmnet_data1: &lt;UP,LOWER_UP&gt; mtu 1410 qdisc htb state UNKNOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>8: rmnet_data2: &lt;&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>9: rmnet_data3: &lt;&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>10: rmnet_data4: &lt;&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>11: rmnet_data5: &lt;&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>12: rmnet_data6: &lt;&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>13: rmnet_data7: &lt;&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>14: r_rmnet_data0: &lt;&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>15: r_rmnet_data1: &lt;&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>16: r_rmnet_data2: &lt;&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>17: r_rmnet_data3: &lt;&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>18: r_rmnet_data4: &lt;&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>19: r_rmnet_data5: &lt;&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>20: r_rmnet_data6: &lt;&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>21: r_rmnet_data7: &lt;&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>22: r_rmnet_data8: &lt;&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;[530]<br>23: wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP mode DORMANT group default qlen 3000<br>    link&#x2F;ether 18:f0:e4:17:91:9e brd ff:ff:ff:ff:ff:ff<br>24: wlan1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 3000<br>    link&#x2F;ether 18:f0:e4:98:91:9e brd ff:ff:ff:ff:ff:ff<br>25: p2p0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN mode DORMANT group default qlen 3000<br>    link&#x2F;ether 1a:f0:e4:99:91:9e brd ff:ff:ff:ff:ff:ff</p>
<p>一个wifi网卡就只有一个物理硬件的。但是由于有三种模式，因此可以虚拟出三个网络接口，也即可以虚拟出三个mac地址的。 如果可以同时开启两个模式，那么就能同时使用两个mac地址的。如果只能一个模式，那么同一时刻，只能是用某一个mac地址的。</p>
<p><a href="https://www.gkzhan.com/news/detail/129229.html">https://www.gkzhan.com/news/detail/129229.html</a></p>
<p><a href="https://www.zhihu.com/question/33861607">https://www.zhihu.com/question/33861607</a></p>
<p><a href="https://www.zhihu.com/question/61083142">https://www.zhihu.com/question/61083142</a></p>
<p><a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/MIMO.html">https://info.support.huawei.com/info-finder/encyclopedia/zh/MIMO.html</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/41520064">https://zhuanlan.zhihu.com/p/41520064</a></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;<br>红米note11Tpro的实验：</p>
<ul>
<li>0.连接手机, .&#x2F;adb devices , .&#x2F;adb shell 进入shell。</li>
<li>1.ip link &#x2F;&#x2F;查看所有的网络接口</li>
</ul>
<p>&#x3D;&#x3D;<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>2: dummy0: &lt;BROADCAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ether 8e:e1:61:ad:fa:3e brd ff:ff:ff:ff:ff:ff<br>3: ifb0: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 32<br>    link&#x2F;ether 0a:9b:a6:88:4a:f4 brd ff:ff:ff:ff:ff:ff<br>4: ifb1: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 32<br>    link&#x2F;ether 72:f1:f0:27:78:35 brd ff:ff:ff:ff:ff:ff<br>5: tunl0@NONE: <NOARP> mtu 1480 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ipip 0.0.0.0 brd 0.0.0.0<br>6: gre0@NONE: <NOARP> mtu 1476 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;gre 0.0.0.0 brd 0.0.0.0<br>7: gretap0@NONE: &lt;BROADCAST,MULTICAST&gt; mtu 1462 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ether 00:00:00:00:00:00 brd ff:ff:ff:ff:ff:ff<br>8: erspan0@NONE: &lt;BROADCAST,MULTICAST&gt; mtu 1450 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ether 00:00:00:00:00:00 brd ff:ff:ff:ff:ff:ff<br>9: ip_vti0@NONE: <NOARP> mtu 1480 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ipip 0.0.0.0 brd 0.0.0.0<br>10: ip6_vti0@NONE: <NOARP> mtu 1364 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;tunnel6 :: brd ::<br>11: sit0@NONE: <NOARP> mtu 1480 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;sit 0.0.0.0 brd 0.0.0.0<br>12: ip6tnl0@NONE: <NOARP> mtu 1452 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;tunnel6 :: brd ::<br>13: ip6gre0@NONE: <NOARP> mtu 1448 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;gre6 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00 brd 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00<br>14: ccmni0: &lt;NOARP,UP,LOWER_UP&gt; mtu 1400 qdisc mq state UNKNOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>15: ccmni1: &lt;NOARP,UP,LOWER_UP&gt; mtu 1400 qdisc mq state UNKNOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>16: ccmni2: <NOARP> mtu 1500 qdisc mq state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>17: ccmni3: <NOARP> mtu 1500 qdisc mq state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>18: ccmni4: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>19: ccmni5: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>20: ccmni6: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>21: ccmni7: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>22: ccmni8: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>23: ccmni9: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>24: ccmni10: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>25: ccmni11: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>26: ccmni12: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>27: ccmni13: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>28: ccmni14: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>29: ccmni15: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>30: ccmni16: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>31: ccmni17: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>32: ccmni18: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>33: ccmni19: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>34: ccmni20: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>35: ccmni-lan: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ether<br>36: miw_oem0: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ether d2:23:9e:dc:5d:02 brd ff:ff:ff:ff:ff:ff<br>38: wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP mode DORMANT group default qlen 3000<br>    link&#x2F;ether 82:09:54:a8:a4:40 brd ff:ff:ff:ff:ff:ff<br>39: wlan1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 3000<br>    link&#x2F;ether bc:61:93:b1:6a:de brd ff:ff:ff:ff:ff:ff<br>62: p2p0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc mq state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ether be:61:93:b3:6a:de brd ff:ff:ff:ff:ff:ff<br>63: ap0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ether ba:61:93:b3:6a:de brd ff:ff:ff:ff:ff:ff</p>
<p>&#x3D;&#x3D;</p>
<ul>
<li>仅连接wifi时：<br>ip route show:</li>
</ul>
<p>192.168.0.0&#x2F;24 dev wlan0 proto kernel scope link src 192.168.0.115 </p>
<p>cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>192.168.0.194    0x1         0x2         58:20:59:63:12:13     *        wlan0<br>192.168.0.1      0x1         0x2         d0:76:e7:5e:26:71     *        wlan0</p>
<ul>
<li>仅使用热点时：（电脑连接着热点）<br>ip route show:</li>
</ul>
<p>192.168.234.0&#x2F;24 dev ap0 proto kernel scope link src 192.168.234.123 </p>
<p>cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>192.168.234.93   0x1         0x2         20:c9:d0:cb:f2:e7     *        ap0</p>
<ul>
<li>使用数据流量时：<br>开着热点，电脑连接着热点。<br>ip route show</li>
</ul>
<p>10.0.0.0&#x2F;8 dev ccmni3 proto kernel scope link src 10.75.159.228<br>192.168.234.0&#x2F;24 dev ap0 proto kernel scope link src 192.168.234.123 </p>
<p>cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>192.168.234.93   0x1         0x2         20:c9:d0:cb:f2:e7     *        ap0</p>
<p>测试<br>开着p2p，</p>
<ul>
<li>开启p2p连接：<br>ip route show</li>
</ul>
<p>192.168.0.0&#x2F;24 dev wlan0 proto kernel scope link src 192.168.0.114<br>192.168.49.0&#x2F;24 dev p2p0 proto kernel scope link src 192.168.49.1</p>
<p>ip route show<br>192.168.10.0&#x2F;24 dev wlan0 proto kernel scope link src 192.168.10.4<br>192.168.49.0&#x2F;24 dev p2p0 proto kernel scope link src 192.168.49.1<br>xaga:&#x2F; $ cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>192.168.49.107   0x1         0x2         d2:c0:bf:92:b7:d1     *        p2p0<br>192.168.10.185   0x1         0x2         7c:d6:61:c6:d2:21     *        wlan0<br>192.168.10.1     0x1         0x2         7c:6a:60:43:a6:85     *        wlan0</p>
<p>两个mac设备接口(wlan0, p2p0)对应 着两个局域网。 </p>
<p>ip route show 显示该主机下所有的mac设备，ip地址，以及所有该设备网段所经过的接口。<br>解释下：<br>192.168.10.0&#x2F;24 dev wlan0 proto kernel scope link src 192.168.10.4<br>本机中所有经过192.168.10.0&#x2F;24的网段 是要经过wlan0这个接口，这个接口的ip是192.168.10.4<br>cat &#x2F;proc&#x2F;net&#x2F;arp  显示所有mac设备在该设备所在局域网 可能找到的ip和mac对应的记录，以及数据所经过的接口。<br>解释下：<br>192.168.49.107   0x1         0x2         d2:c0:bf:92:b7:d1     *        p2p0<br>局域网中的IP 192.168.49.107 对于的mac地址是d2:c0:bf:92:b7:d1， 数据流经本机的p2p0接口。</p>
<p>rzet@MacBook-Pro-3 platform-tools$ .&#x2F;adb devices<br>List of devices attached<br>8X8975NB4PZLEERS    device</p>
<p>rzet@MacBook-Pro-3 platform-tools$ .&#x2F;adb shell<br>xaga:&#x2F; $ ip link<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>2: dummy0: &lt;BROADCAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ether 8e:e1:61:ad:fa:3e brd ff:ff:ff:ff:ff:ff<br>3: ifb0: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 32<br>    link&#x2F;ether 0a:9b:a6:88:4a:f4 brd ff:ff:ff:ff:ff:ff<br>4: ifb1: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 32<br>    link&#x2F;ether 72:f1:f0:27:78:35 brd ff:ff:ff:ff:ff:ff<br>5: tunl0@NONE: <NOARP> mtu 1480 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ipip 0.0.0.0 brd 0.0.0.0<br>6: gre0@NONE: <NOARP> mtu 1476 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;gre 0.0.0.0 brd 0.0.0.0<br>7: gretap0@NONE: &lt;BROADCAST,MULTICAST&gt; mtu 1462 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ether 00:00:00:00:00:00 brd ff:ff:ff:ff:ff:ff<br>8: erspan0@NONE: &lt;BROADCAST,MULTICAST&gt; mtu 1450 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ether 00:00:00:00:00:00 brd ff:ff:ff:ff:ff:ff<br>9: ip_vti0@NONE: <NOARP> mtu 1480 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ipip 0.0.0.0 brd 0.0.0.0<br>10: ip6_vti0@NONE: <NOARP> mtu 1364 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;tunnel6 :: brd ::<br>11: sit0@NONE: <NOARP> mtu 1480 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;sit 0.0.0.0 brd 0.0.0.0<br>12: ip6tnl0@NONE: <NOARP> mtu 1452 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;tunnel6 :: brd ::<br>13: ip6gre0@NONE: <NOARP> mtu 1448 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;gre6 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00 brd 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00<br>14: ccmni0: &lt;NOARP,UP,LOWER_UP&gt; mtu 1400 qdisc mq state UNKNOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>15: ccmni1: &lt;NOARP,UP,LOWER_UP&gt; mtu 1400 qdisc mq state UNKNOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>16: ccmni2: <NOARP> mtu 1500 qdisc mq state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>17: ccmni3: <NOARP> mtu 1500 qdisc mq state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>18: ccmni4: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>19: ccmni5: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>20: ccmni6: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>21: ccmni7: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>22: ccmni8: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>23: ccmni9: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>24: ccmni10: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>25: ccmni11: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>26: ccmni12: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>27: ccmni13: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>28: ccmni14: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>29: ccmni15: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>30: ccmni16: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>31: ccmni17: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>32: ccmni18: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>33: ccmni19: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>34: ccmni20: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;none<br>35: ccmni-lan: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ether<br>36: miw_oem0: <NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ether d2:23:9e:dc:5d:02 brd ff:ff:ff:ff:ff:ff<br>38: wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP mode DORMANT group default qlen 3000<br>    link&#x2F;ether 82:09:54:a8:a4:40 brd ff:ff:ff:ff:ff:ff<br>39: wlan1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 3000<br>    link&#x2F;ether bc:61:93:b1:6a:de brd ff:ff:ff:ff:ff:ff<br>62: p2p0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc mq state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ether be:61:93:b3:6a:de brd ff:ff:ff:ff:ff:ff<br>63: ap0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000<br>    link&#x2F;ether ba:61:93:b3:6a:de brd ff:ff:ff:ff:ff:ff<br>xaga:&#x2F; $ ip route show<br>192.168.0.0&#x2F;24 dev wlan0 proto kernel scope link src 192.168.0.115<br>xaga:&#x2F; $ cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>192.168.0.194    0x1         0x2         58:20:59:63:12:13     *        wlan0<br>192.168.0.1      0x1         0x2         d0:76:e7:5e:26:71     *        wlan0<br>xaga:&#x2F; $ ping 192.168.0.194<br>PING 192.168.0.194 (192.168.0.194) 56(84) bytes of data.<br>64 bytes from 192.168.0.194: icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;4.19 ms<br>64 bytes from 192.168.0.194: icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;150 ms<br>^C<br>— 192.168.0.194 ping statistics —<br>2 packets transmitted, 2 received, 0% packet loss, time 1001ms<br>rtt min&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 4.192&#x2F;77.106&#x2F;150.021&#x2F;72.915 ms<br>xaga:&#x2F; $ ifconfig<br>lo        Link encap:UNSPEC<br>          inet addr:127.0.0.1  Mask:255.0.0.0<br>          inet6 addr: ::1&#x2F;128 Scope: Host<br>          UP LOOPBACK RUNNING  MTU:65536  Metric:1<br>          RX packets:28985 errors:0 dropped:0 overruns:0 frame:0<br>          TX packets:28985 errors:0 dropped:0 overruns:0 carrier:0<br>          collisions:0 txqueuelen:1000<br>          RX bytes:396983856 TX bytes:396983856 </p>
<p>dummy0    Link encap:UNSPEC<br>          inet6 addr: fe80::8ce1:61ff:fead:fa3e&#x2F;64 Scope: Link<br>          UP BROADCAST RUNNING NOARP  MTU:1500  Metric:1<br>          RX packets:0 errors:0 dropped:0 overruns:0 frame:0<br>          TX packets:7217 errors:0 dropped:0 overruns:0 carrier:0<br>          collisions:0 txqueuelen:1000<br>          RX bytes:0 TX bytes:1680653 </p>
<p>ccmni0    Link encap:UNSPEC<br>          inet6 addr: 240e:57c:3290:956c:1748:ca54:2733:5ff7&#x2F;64 Scope: Global<br>          inet6 addr: fe80::1748:ca54:2733:5ff7&#x2F;64 Scope: Link<br>          UP RUNNING NOARP  MTU:1400  Metric:1<br>          RX packets:9 errors:0 dropped:0 overruns:0 frame:0<br>          TX packets:5 errors:0 dropped:0 overruns:0 carrier:0<br>          collisions:0 txqueuelen:1000<br>          RX bytes:780 TX bytes:608 </p>
<p>ccmni1    Link encap:UNSPEC<br>          inet6 addr: 2409:815a:3298:c120:1748:ca54:7b01:3ea0&#x2F;64 Scope: Global<br>          inet6 addr: fe80::1748:ca54:7b01:3ea0&#x2F;64 Scope: Link<br>          UP RUNNING NOARP  MTU:1400  Metric:1<br>          RX packets:4 errors:0 dropped:0 overruns:0 frame:0<br>          TX packets:1 errors:0 dropped:0 overruns:0 carrier:0<br>          collisions:0 txqueuelen:1000<br>          RX bytes:324 TX bytes:48 </p>
<p>wlan0     Link encap:UNSPEC    Driver wlan<br>          inet addr:192.168.0.115  Bcast:192.168.0.255  Mask:255.255.255.0<br>          inet6 addr: fe80::8009:54ff:fea8:a440&#x2F;64 Scope: Link<br>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1<br>          RX packets:29434 errors:0 dropped:0 overruns:0 frame:0<br>          TX packets:30808 errors:0 dropped:0 overruns:0 carrier:0<br>          collisions:0 txqueuelen:3000<br>          RX bytes:23114949 TX bytes:10115118 </p>
<p>xaga:&#x2F; $ ifconfig | grep 194<br>1|xaga:&#x2F; $ ip route show<br>192.168.0.0&#x2F;24 dev wlan0 proto kernel scope link src 192.168.0.115<br>192.168.234.0&#x2F;24 dev ap0 proto kernel scope link src 192.168.234.123<br>xaga:&#x2F; $ cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>192.168.0.194    0x1         0x2         58:20:59:63:12:13     *        wlan0<br>192.168.0.132    0x1         0x2         f2:4b:7d:27:0d:d2     *        wlan0<br>192.168.0.1      0x1         0x2         d0:76:e7:5e:26:71     *        wlan0<br>xaga:&#x2F; $ cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>192.168.0.194    0x1         0x2         58:20:59:63:12:13     *        wlan0<br>192.168.0.132    0x1         0x2         f2:4b:7d:27:0d:d2     *        wlan0<br>192.168.0.1      0x1         0x2         d0:76:e7:5e:26:71     *        wlan0<br>xaga:&#x2F; $ ip route show<br>192.168.0.0&#x2F;24 dev wlan0 proto kernel scope link src 192.168.0.115<br>192.168.234.0&#x2F;24 dev ap0 proto kernel scope link src 192.168.234.123<br>xaga:&#x2F; $ ip route show<br>192.168.234.0&#x2F;24 dev ap0 proto kernel scope link src 192.168.234.123<br>xaga:&#x2F; $ cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>xaga:&#x2F; $ ip route show<br>10.0.0.0&#x2F;8 dev ccmni3 proto kernel scope link src 10.75.159.228<br>192.168.234.0&#x2F;24 dev ap0 proto kernel scope link src 192.168.234.123<br>xaga:&#x2F; $ cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>xaga:&#x2F; $ ip route show<br>10.0.0.0&#x2F;8 dev ccmni3 proto kernel scope link src 10.75.159.228<br>192.168.234.0&#x2F;24 dev ap0 proto kernel scope link src 192.168.234.123<br>xaga:&#x2F; $ cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>192.168.234.93   0x1         0x2         20:c9:d0:cb:f2:e7     *        ap0<br>xaga:&#x2F; $ ip route show<br>192.168.0.0&#x2F;24 dev wlan0 proto kernel scope link src 192.168.0.114<br>192.168.49.0&#x2F;24 dev p2p0 proto kernel scope link src 192.168.49.1<br>xaga:&#x2F; $ ip route show<br>xaga:&#x2F; $ cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>xaga:&#x2F; $ rzet@MacBook-Pro-3 platform-tools$ .&#x2F;adb shell<br>xaga:&#x2F; $ ip router show<br>Object “router” is unknown, try “ip help”.<br>1|xaga:&#x2F; $ ip route show<br>192.168.10.0&#x2F;24 dev wlan0 proto kernel scope link src 192.168.10.4<br>192.168.49.0&#x2F;24 dev p2p0 proto kernel scope link src 192.168.49.1<br>xaga:&#x2F; $ cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>192.168.49.107   0x1         0x2         d2:c0:bf:92:b7:d1     *        p2p0<br>192.168.10.185   0x1         0x2         7c:d6:61:c6:d2:21     *        wlan0<br>192.168.10.1     0x1         0x2         7c:6a:60:43:a6:85     *        wlan0<br>xaga:&#x2F; $ cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>192.168.10.185   0x1         0x2         7c:d6:61:c6:d2:21     *        wlan0<br>192.168.10.1     0x1         0x2         7c:6a:60:43:a6:85     *        wlan0<br>xaga:&#x2F; $ cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>192.168.10.185   0x1         0x2         7c:d6:61:c6:d2:21     *        wlan0<br>192.168.10.1     0x1         0x2         7c:6a:60:43:a6:85     *        wlan0<br>xaga:&#x2F; $ cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>192.168.10.185   0x1         0x2         7c:d6:61:c6:d2:21     *        wlan0<br>192.168.10.213   0x1         0x2         d0:c0:bf:92:b7:d1     *        wlan0<br>192.168.10.1     0x1         0x2         7c:6a:60:43:a6:85     *        wlan0<br>xaga:&#x2F; $ ip route show<br>192.168.10.0&#x2F;24 dev wlan0 proto kernel scope link src 192.168.10.4<br>xaga:&#x2F; $ ip route show<br>192.168.10.0&#x2F;24 dev wlan0 proto kernel scope link src 192.168.10.4<br>192.168.49.0&#x2F;24 dev p2p0 proto kernel scope link src 192.168.49.1<br>xaga:&#x2F; $ ip route show<br>192.168.203.0&#x2F;24 dev wlan0 proto kernel scope link src 192.168.203.20<br>xaga:&#x2F; $ ip route show<br>192.168.203.0&#x2F;24 dev wlan0 proto kernel scope link src 192.168.203.20<br>xaga:&#x2F; $ cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>192.168.203.1    0x1         0x2         d2:c0:bf:92:b7:d1     *        wlan0<br>xaga:&#x2F; $ cat &#x2F;proc&#x2F;net&#x2F;arp<br>IP address       HW type     Flags       HW address            Mask     Device<br>192.168.49.105   0x1         0x2         d0:c0:bf:92:b7:d1     *        p2p0<br>192.168.10.1     0x1         0x2         7c:6a:60:43:a6:85     *        wlan0<br>xaga:&#x2F; $ ip route show<br>192.168.10.0&#x2F;24 dev wlan0 proto kernel scope link src 192.168.10.4<br>192.168.49.0&#x2F;24 dev p2p0 proto kernel scope link src 192.168.49.1<br>xaga:&#x2F; $ ip route show<br>192.168.10.0&#x2F;24 dev wlan0 proto kernel scope link src 192.168.10.4<br>192.168.49.0&#x2F;24 dev p2p0 proto kernel scope link src 192.168.49.1<br>xaga:&#x2F; $ ip route show<br>192.168.49.0&#x2F;24 dev p2p0 proto kernel scope link src 192.168.49.1<br>xaga:&#x2F; $ ip route show<br>192.168.49.0&#x2F;24 dev p2p0 proto kernel scope link src 192.168.49.1<br>xaga:&#x2F; $ rzet@MacBook-Pro-3 platform-tools$ </p>
<p>&#x3D;&#x3D;&#x3D;</p>
<p>手机的IMEI类似与mac地址。  他们都是二层设备。</p>
<p>网络层：IP地址。 </p>
<p>数据链路层： 以太网 802.3 mac地址。  wifi 802.11 mac地址。 蜂窝网络 3GPP协议 IMEI(类似于mac地址)。 蓝牙 蓝牙协议 mac地址。</p>
<p>wifi 网线 数据流量 都走 TCP／IP协议栈。 只不过在数据链层有不一样的实现罢了。</p>
<p>imei跟着设备走的，设备唯一标识。跟着卡走的叫imsi吧。 一般一卡一个imsi， 而一卡也对应着一个IMEI。 双卡手机也是有两个imei的。<br><a href="https://www.jianshu.com/p/d6c57dcefb06">https://www.jianshu.com/p/d6c57dcefb06</a></p>
<p>IMEI 对应移动／联通制式。 MEID对应电信制式(CDMA).<br>手机上一个卡槽对应一个IMEI或MEID。 由于现在手机双卡，所以都有两个IMEI，而且由于双卡都支持移动或联通，所以两个卡槽可以对应两个IMEI，而双卡只能用一个电信的，因此虽然两个卡槽，但是只有一个MEID。 所以，比如电信手机，有两个IMEI，一个MEID。<br>卡槽1 卡槽2 对应的IMEI是固定的，而卡槽1 2对应的IMSI会随着卡放置的位置不同而不同。<br>如果支持移动&#x2F;联通的手机，是没有MEID的。</p>
<p>手机： SN码， IMEI， MEID， IMSI(电话卡)。<br><a href="https://www.cnblogs.com/aeolian/p/10234447.html">https://www.cnblogs.com/aeolian/p/10234447.html</a><br><a href="https://blog.csdn.net/lfcoolhappy/article/details/19608381">https://blog.csdn.net/lfcoolhappy/article/details/19608381</a></p>
<p><a href="https://blog.csdn.net/whbk101/article/details/103089390">https://blog.csdn.net/whbk101/article/details/103089390</a><br><a href="https://blog.csdn.net/MirkoWug/article/details/106860832">https://blog.csdn.net/MirkoWug/article/details/106860832</a></p>
<p>android 系统版本 和 android sdk版本&#x2F;API等级 对应关系：<br><a href="https://www.jianshu.com/p/dc7e5399be32">https://www.jianshu.com/p/dc7e5399be32</a><br><a href="https://baike.baidu.com/item/Android%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC/1578450">https://baike.baidu.com/item/Android%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC/1578450</a></p>
<p>android 动态权限步骤：<br>1.在manifest中写入相应权限。<br>2.代码中动态申请权限。 a.检查是否有权限。 2.如果有 完成后续操作。 b如果没有，那么提示为什么需要权限，然后申请权限。<br><a href="https://www.jianshu.com/p/a51593817825">https://www.jianshu.com/p/a51593817825</a><br><a href="https://www.jianshu.com/p/ccea3c2f9cfa">https://www.jianshu.com/p/ccea3c2f9cfa</a></p>
<p>android 获取本地 IP mac， 路由器的mac地址等， <a href="https://www.jianshu.com/p/de7cbcb4fd3e">https://www.jianshu.com/p/de7cbcb4fd3e</a><br><a href="https://blog.csdn.net/qq_23025319/article/details/119214937">https://blog.csdn.net/qq_23025319/article/details/119214937</a><br><a href="https://blog.csdn.net/ddxxii/article/details/76468349">https://blog.csdn.net/ddxxii/article/details/76468349</a></p>
<p>android 在wifi下 获取本地ip mac， 获取网关&#x2F;路由器 ip  mac.<br>在蜂窝网络下 获取本地ip imei&#x2F;meid, 获取网关／基站 ip mac (可以使用命令行进行获取然后解析)(好像读取网关mac有点坑，因为走的是蜂窝网络，arp表中没有信息，不像wifi下，arp表中有信息的。好像基站也不一定是mac地址啥，也可能是其他形式的).<br><a href="https://blog.csdn.net/h784707460/article/details/87779494">https://blog.csdn.net/h784707460/article/details/87779494</a><br><a href="https://blog.csdn.net/github_30662571/article/details/75088644">https://blog.csdn.net/github_30662571/article/details/75088644</a></p>
<p>.&#x2F;adb devices -l</p>
<p>.&#x2F;adb -s deviceName shell  &#x2F;&#x2F;进入某个设备的shell。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>搞机</tag>
        <tag>wifi</tag>
        <tag>p2p</tag>
        <tag>无线投屏</tag>
      </tags>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2023/03/10/%E6%B5%8B%E8%AF%95Markor/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>测试</p>
<ul>
<li>手机安装termux</li>
<li>termux 中安装git , ssh. 克隆github项目</li>
<li>使用markor 编辑md.</li>
</ul>
]]></content>
      <tags>
        <tag>markor</tag>
      </tags>
  </entry>
  <entry>
    <title>随身wifi折腾</title>
    <url>/2023/03/10/%E9%9A%8F%E8%BA%ABwifi%E6%8A%98%E8%85%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.bilibili.com/video/av214888486/">https://www.bilibili.com/video/av214888486/</a></p>
<p>小讯 随身wifi：<br>板子UFI1003_MB_V02<br>电信的esim 8986112126303924835H<br>运行 android 4<br>高通410 MSM8916<br>RAM512M+EMMC4G （亏了。有的是8G）<br>切卡密码 UFIadmin1234 （sim1是物理sim，sim2是esim）<br>移动电信联通4G卡。</p>
<p>查看硬件信息：1.直接看硬件。 2.使用软件(adb shell df du, Miko 等)。<br><a href="https://www.jianshu.com/p/811741a2ad97">https://www.jianshu.com/p/811741a2ad97</a></p>
<p>刷机。<br>工具：随身wifi助手。</p>
<p>玩法：1.安装openwrt。 2.安装debian。 3.直接在android上root 安装magisk。</p>
<p>中沃：<br><a href="https://blog.csdn.net/m0_55216258/article/details/127052513">https://blog.csdn.net/m0_55216258/article/details/127052513</a><br><a href="https://www.bilibili.com/read/cv21471637/">https://www.bilibili.com/read/cv21471637/</a><br><a href="https://blog.csdn.net/qq_31539875/article/details/128200941">https://blog.csdn.net/qq_31539875/article/details/128200941</a><br>中兴微（中兴的全资子公司）的芯片。 MF782D OM+HS FW60<br>网络锁：az952#。 解锁后才能用实体sim。<br>解锁后，如果有插实体sim卡，用实体。没有实体，就会用esim。<br>移动联通电信4G卡。<br>后台有两个密码，一般用户的密码， 超级用户密码。</p>
<p>测试 移动卡 电信卡 的速率。<br>中兴微：电信 10～20 Mbps 移动5～12 Mbps<br>高通410：电信 10～20 Mbps 移动5～12 Mbps。 但是稳定性不足。<br>单独手机插卡测试4G：理论下行100～150Mbps，上行50Mbps。移动 电信20～60Mbps<br>单独手机插卡测试5G：理论下行数十Gbps， 上行。 移动80～120Mbps 电信 100～300Mbps<br><a href="https://blog.csdn.net/mao834099514/article/details/79456881">https://blog.csdn.net/mao834099514/article/details/79456881</a></p>
<p>4G网络的理论速率取决于使用的制式和网络配置，但通常可以达到以下速率：<br>LTE Cat4：下行速率最高可达150Mbps，上行速率最高可达50Mbps。<br>LTE Cat6：下行速率最高可达300Mbps，上行速率最高可达50Mbps。<br>LTE Cat9：下行速率最高可达450Mbps，上行速率最高可达50Mbps。<br>LTE Cat12：下行速率最高可达600Mbps，上行速率最高可达100Mbps。<br>LTE Cat16：下行速率最高可达1Gbps，上行速率最高可达150Mbps。<br>在中国，4G网络的实际速率受到多种因素的影响，例如地理位置、网络拥塞、设备性能、网络运营商等。不同地区、不同运营商的网络速率也会有所差异。根据第三方机构的测试数据和统计，目前中国4G网络的平均下载速率大约在30Mbps-40Mbps之间，上传速率平均在10Mbps左右。不过需要注意的是，实际速率还会受到网络运营商的限速和网络优化等因素的影响。</p>
<p>测试， 刷机前 ，刷机后的速率对比。</p>
<p>随身Wifi助手。 中兴微工具箱v1.3。<br>0.打开adb。<br>1.刷入全功能后台。<br>2.解除商家后台限制，比如禁止向云服务器传送数据，禁用远程定位，禁用ESIN云服务等等。</p>
<p>（有说解除后台限制后，速率会变快。 感觉不是很明显。）</p>
<p><a href="http://remowireless.com/news/shownews.php?id=24&amp;lang=cn">http://remowireless.com/news/shownews.php?id=24&amp;lang=cn</a><br><a href="https://www.sohu.com/a/550910816_121192896">https://www.sohu.com/a/550910816_121192896</a></p>
<p>随身wifi ：1.(将4G转wifi) MiFi(Mobile WIFI)， uFi(usb wifi)， CPE. （随身WIFI还具备两大功能：1、WIFI发射&#x2F;ap。2、WIFI接收&#x2F;sta。（实际上是无线网卡起的作用,当然速率不太行））<br>          2.(转宽带信号为wifi，有modem，不就是无线路由器嘛) </p>
<p>无线网卡： pci接口的无线网卡， usb接口的无线网卡。</p>
<p>随身wifi 用法：1.常规用法，转换4G信号为wifi。 2.充当作为无线网卡。（2a.ufi连接其他wifi，然后无wifi的电脑插入ufi进行上网，通过usb进行联网. 2b.桥接有网的wifi，然后释放自己的wifi(ap+sta)。） </p>
<p>电脑连接随身Wi-Fi：1.使用电脑自身的wifi。 2.使用usb(这样无wifi的电脑也能通过usb连上ufi的网络)(理论上可以，充当无线网卡).</p>
<p>TODO<br>随身wifi刷机。</p>
]]></content>
      <tags>
        <tag>搞机</tag>
        <tag>随身wifi</tag>
      </tags>
  </entry>
  <entry>
    <title>404</title>
    <url>/404/index.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>about</title>
    <url>/about/index.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>contact</title>
    <url>/contact/index.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>gallery</title>
    <url>/galleries/index.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>留言板</title>
    <url>/guestbook/index.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>欢迎留下脚印👣</p>
]]></content>
  </entry>
  <entry>
    <title>personal</title>
    <url>/personal/index.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1cccfc780923147be7137859ffc4464d59402ad5e4fc04b2aa8fab44e92c14c9">10d79030e8222445804370796b90fca14b3382df4730eb0fe3a9f1aa6acbfdf977f308135c251cf4014cb9472e5eb4c7010efd08fb0e3bdf1ebef1844b47b7bbdce99f87d5af857ca0ff659bfd7ff840f919ac903c0da67ccc85cc230a8bbc6beae3b3b4b69f0eb06ca4b5cf10f1599355da44ea1f207869e070e07b0d03c07a4b83b3fb06d2d04cf13f3cb9ca969e4439cef45d0eb382f3303bccc4e70948f7840bad89cb99df664e0f7bc2e56ad784a708e9abe83eec0eddd1009405bc1812119b3153926b5bc457063b4c3683fad0f0433ebb109bff128a768fe7807cb9c4bb9718a662bf812a8ea8fad267b90a79f1a075bc1e8b75fb09961cd1b85b1b4a33c09a41539e195bc83720253dfcb0cd4590be32bef558e5d2bff012cabd58617412d2c12cb844cbc076088369568025</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>p1</title>
    <url>/personal/p1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li><a href="#%E6%A0%87%E9%A2%981">标题1</a><ul>
<li><a href="#%E6%A0%87%E9%A2%981-1">标题1-1</a></li>
</ul>
</li>
<li><a href="#%E6%A0%87%E9%A2%982">标题2</a></li>
</ul>
<p>[TOC]</p>
<p>This is gerenated by command: haxo new post “Hi hexo”</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">hello world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>This is from</p>
<h2 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h2><h3 id="标题1-1"><a href="#标题1-1" class="headerlink" title="标题1-1"></a>标题1-1</h3><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><p>  </p>



<p><a href="https://v.youku.com/v_show/id_XMTQ2MjU2NTU2OA==.html?spm=a1z3jc.11711052.0.0&amp;isextonly=1">https://v.youku.com/v_show/id_XMTQ2MjU2NTU2OA==.html?spm=a1z3jc.11711052.0.0&amp;isextonly=1</a></p>
<p>Share this blog post on <a href="https://twitter.com/intent/tweet?text=%22p1%22%20https://ruozhiertong.github.io/personal/p1.html%20via%20@hexojs" target="_blank" rel="noopener">Twitter</a>, <a href="https://www.facebook.com/sharer/sharer.php?u=https://ruozhiertong.github.io/personal/p1.html&t=p1" target="_blank" rel="noopener">Facebook</a>, and <a href="https://www.linkedin.com/sharing/share-offsite/?url=https://ruozhiertong.github.io/personal/p1.html&title=p1" target="_blank" rel="noopener">LinkedIn</a></p>
<iframe height=480 width=400 src="http://player.youku.com/embed/XNDUwMjM0NjMyMA" frameborder=0 allowfullscreen></iframe>

<p><a href="https://v.youku.com/v_show/id_XNDUwMjM0NjMyMA==.html?spm=a2ha1.14919748_WEBMOVIE_JINGXUAN.drawer17.d_zj1_1&amp;s=5354d5f1042948ee8448&amp;scm=20140719.apircmd.5700.show_5354d5f1042948ee8448">https://v.youku.com/v_show/id_XNDUwMjM0NjMyMA==.html?spm=a2ha1.14919748_WEBMOVIE_JINGXUAN.drawer17.d_zj1_1&amp;s=5354d5f1042948ee8448&amp;scm=20140719.apircmd.5700.show_5354d5f1042948ee8448</a></p>
<p><a href="https://v.youku.com/v_show/id_XNTIwMTU0MzI1Mg==.html?spm=a2ha1.14919748_WEBHOME_GRAY.drawer5.d_zj1_2&amp;s=ccedb1027a8a4008b250&amp;scm=20140719.manual.7182.show_ccedb1027a8a4008b250">https://v.youku.com/v_show/id_XNTIwMTU0MzI1Mg==.html?spm=a2ha1.14919748_WEBHOME_GRAY.drawer5.d_zj1_2&amp;s=ccedb1027a8a4008b250&amp;scm=20140719.manual.7182.show_ccedb1027a8a4008b250</a></p>
<ul>
<li>tab1</li>
<li>tab2</li>
</ul>
<p><a href="http://vodkgeyttp9.vod.126.net/cloudmusic/1FgSA8LX_3222439799_sd.mp4?wsSecret=25dc3b1d0e2fcc4c65db0cab7d6f107d&amp;wsTime=1606454043">http://vodkgeyttp9.vod.126.net/cloudmusic/1FgSA8LX_3222439799_sd.mp4?wsSecret=25dc3b1d0e2fcc4c65db0cab7d6f107d&amp;wsTime=1606454043</a></p>
<!-- <iframe height=498 width=510 src="https://v.youku.com/v_show/id_XNTIwMTU0MzI1Mg==.html?spm=a2ha1.14919748_WEBHOME_GRAY.drawer5.d_zj1_2&s=ccedb1027a8a4008b250&scm=20140719.manual.7182.show_ccedb1027a8a4008b250"> -->



    <div id="aplayer-uqxAvxJx" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="60198" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="false" data-listmaxheight="340px" data-preload="none" data-theme="#ad7a86"
    ></div>


    <div id="aplayer-tyayvaZh" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="7868005687" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="1000px" data-preload="auto" data-theme="#555"
    ></div>



    <div id="aplayer-nIKVKHRL" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="60198" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>


			<script>
				console.error("Error: [hexo-tag-aplayer] Specified asset file not found (picture.jpg)");
			</script>



			<script>
				console.error("SyntaxError: Unexpected token / in JSON at position 48");
			</script>


  <h6> hello </h6>


<p>原声aplayer<br><a href="https://aplayer.js.org/#/zh-Hans/">https://aplayer.js.org/#/zh-Hans/</a></p>
<!-- require APlayer -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css">
<script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js"></script>

<div id="aplayer"></div>

<script>
const ap = new APlayer({
    container: document.getElementById('aplayer'),
    audio: [{
        name: 'name',
        artist: 'artist',
        url: '/mp3/1.mp3',
        cover: 'cover.jpg'
    }]
});
</script>


<p>  使用meting-js。 在aplayer基础上做的一个标签插件。<br>  <a href="https://github.com/metowolf/MetingJS">https://github.com/metowolf/MetingJS</a><br>  <a href="https://blog.csdn.net/Edviv/article/details/106867810">https://blog.csdn.net/Edviv/article/details/106867810</a><br>  <!-- require APlayer --><br>  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><br>    <script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js"></script><br>    <!-- require MetingJS。 导入metingjs前需要导入aplayer --><br>    <script src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script></p>
<p>  <meting-js server="tencent" type="playlist" id="7868005687"></meting-js></p>
]]></content>
  </entry>
  <entry>
    <title>p2</title>
    <url>/personal/p2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li><a href="#%E6%A0%87%E9%A2%981">标题1</a><ul>
<li><a href="#%E6%A0%87%E9%A2%981-1">标题1-1</a></li>
</ul>
</li>
<li><a href="#%E6%A0%87%E9%A2%982">标题2</a></li>
</ul>
<p>[TOC]</p>
<p>This is gerenated by command: haxo new post “Hi hexo”</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">hello world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>This is from</p>
<h2 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h2><h3 id="标题1-1"><a href="#标题1-1" class="headerlink" title="标题1-1"></a>标题1-1</h3><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2>]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>2017</title>
    <url>/galleries/2017/index.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>2018</title>
    <url>/galleries/2018/index.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0ab5c69977f96b00381bcf8773eb2c7d198cc464e190f807878cd992d472f2c5">45be8d86313d96527c9198d76c40ced4d41876099f39d8db102a7e4d696d04e7d0938175e6eef36fe3a74cf344d79b1ebd91fe2dda046d906bc779d817b3158c4d914f8bfeab8377b6bda4d0ba9ce1b88305a8e5f1789f44ddd5977c8e84dedc804030b68a35efa0a1fa4dd8e8df4949f57c8a544ae6a7340d846c556f37b1a8becfc078098136fd6c9fd7a82dbf9885048b01a27ee4aa454ac18b82bfa4eb66ea21f8dcf7808817d56d560219196ef0e0a641d226287db8d33112a637a8a53b610285e9376be3429f37d26014c758080c795ae810f5b14f2049d3a0bce5f01b89f70a3a954f1c71967b482efe6ebdc4ef9481b22f7c5c7d04d6eeb038b74e971b2b8951b9b29ca51add83d11cb303cd73ec4291b75fa8537e782e33e410b7dd8c74345cc743adccac38bd0870b8d370</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>2019</title>
    <url>/galleries/2019/index.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>2022</title>
    <url>/galleries/202203/index.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0ab5c69977f96b00381bcf8773eb2c7d198cc464e190f807878cd992d472f2c5">45be8d86313d96527c9198d76c40ced4d41876099f39d8db102a7e4d696d04e7d0938175e6eef36fe3a74cf344d79b1ebd91fe2dda046d906bc779d817b3158c4d914f8bfeab8377b6bda4d0ba9ce1b88305a8e5f1789f44ddd5977c8e84dedc804030b68a35efa0a1fa4dd8e8df4949f57c8a544ae6a7340d846c556f37b1a8becfc078098136fd6c9fd7a82dbf9885048b01a27ee4aa454ac18b82bfa4eb66ea21f8dcf7808817d56d560219196ef0e0a641d226287db8d33112a637a8a53b610285e9376be3429f37d26014c758080c795ae810f5b14f2049d3a0bce5f01b89f70a3a954f1c71967b482efe6ebdc4ef9481b22f7c5c7d04d6eeb038b74e971b2b8951b9b29ca51add83d11cb303cd73ec4291b75fa8537e782e33e410b7dd8c74345cc743adccac38bd0870b8d370</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>峨眉山之行</title>
    <url>/galleries/%E5%B3%A8%E7%9C%89%E5%B1%B1%E4%B9%8B%E8%A1%8C/index.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
  </entry>
</search>
